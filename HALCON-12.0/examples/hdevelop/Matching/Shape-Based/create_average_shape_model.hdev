<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* This example demonstrates how to create a model out of a set</c>
<c>* of samples in order to achieve greater robustness. The idea</c>
<c>* is to create an average image out of a set of samples from a</c>
<c>* given object in order to average out distractors like surface</c>
<c>* texture, or variations in shape and/or size.</c>
<c>* </c>
<c>* In order to carry out this operation, one first need to align</c>
<c>* the samples. In this particular example, sample objects are</c>
<c>* found and aligned by means of shape-based matching with an</c>
<c>* artificial model based on previous knowledge of the object's</c>
<c>* geometry</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>read_image (Image, 'smd/smd_samples')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_display (Image)</l>
<l>dev_set_line_width (2)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<l>MinScore1 := 0.65</l>
<l>MinScore2 := 0.8</l>
<l>create_reference_image (ReducedReferenceImage)</l>
<l>area_center (ReducedReferenceImage, Area, RowRef, ColumnRef)</l>
<l>get_image_size (ReducedReferenceImage, RefImgWidth, RefImgHeight)</l>
<l>dev_open_window (0, Width + 12, 3 * RefImgWidth, 3 * RefImgHeight, 'black', WindowHandleAvg)</l>
<l>set_display_font (WindowHandleAvg, 14, 'mono', 'true', 'false')</l>
<l>dev_display (ReducedReferenceImage)</l>
<l>disp_message (WindowHandleAvg, '1. Search artificial model', 'window', -1, -1, 'black', 'true')</l>
<l>disp_continue_message (WindowHandleAvg, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Search artificial model in image with set of sample objects</c>
<l>create_scaled_shape_model (ReducedReferenceImage, 0, rad(-1), rad(2), 0, 0.77, 0.78, 0, 'point_reduction_low', 'use_polarity', 30, 3, ModelID)</l>
<l>get_shape_model_params (ModelID, NumLevels, AngleStart, AngleExtent, AngleStep, ScaleMin, ScaleMax, ScaleStep, Metric, MinContrast)</l>
<l>find_scaled_shape_model (Image, ModelID, rad(0), rad(180), 0.77, 0.78, MinScore1, 0, 0, 'interpolation', 2, 0.7, Row, Column, Angle, Scale, Score)</l>
<c>* </c>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('green')</l>
<l>dev_display_shape_matching_results (ModelID, 'green', Row, Column, Angle, Scale, Scale, 0)</l>
<l>disp_message (WindowHandle, 'MinScore: ' + MinScore1, 'window', -1, -1, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Average over all matches and calculate the average image</c>
<l>dev_set_window (WindowHandleAvg)</l>
<l>dev_set_line_width (2)</l>
<l>get_shape_model_contours (ModelContours, ModelID, 1)</l>
<l>gen_empty_obj (Templates)</l>
<l>for K := 0 to |Row| - 1 by 1</l>
<l>    vector_angle_to_rigid (RowRef, ColumnRef, 0, Row[K], Column[K], Angle[K], HomMat2DTranslate)</l>
<l>    hom_mat2d_scale (HomMat2DTranslate, Scale[K], Scale[K], Row[K], Column[K], HomMat2DScale)</l>
<l>    hom_mat2d_invert (HomMat2DScale, HomMat2DInvert)</l>
<l>    affine_trans_image (Image, ImageAffinTrans, HomMat2DInvert, 'constant', 'false')</l>
<l>    crop_rectangle1 (ImageAffinTrans, ImagePart, 0, 0, 80, 130)</l>
<l>    concat_obj (Templates, ImagePart, Templates)</l>
<c>    * </c>
<l>    dev_set_window (WindowHandle)</l>
<l>    if (K &gt; 0)</l>
<l>        dev_display_shape_matching_results (ModelID, 'green', Row[K - 1], Column[K - 1], Angle[K - 1], Scale[K - 1], Scale[K - 1], 0)</l>
<l>    endif</l>
<l>    dev_display_shape_matching_results (ModelID, 'yellow', Row[K], Column[K], Angle[K], Scale[K], Scale[K], 0)</l>
<l>    dev_set_window (WindowHandleAvg)</l>
<l>    dev_display (ImagePart)</l>
<l>    wait_seconds (0.2)</l>
<l>endfor</l>
<c>* Average template image</c>
<l>channels_to_image (Templates, MultiChannelImage)</l>
<l>mean_n (MultiChannelImage, ImageMean)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display_shape_matching_results (ModelID, 'green', Row[K - 1], Column[K - 1], Angle[K - 1], Scale[K - 1], Scale[K - 1], 0)</l>
<l>dev_set_window (WindowHandleAvg)</l>
<l>dev_display (ImageMean)</l>
<l>disp_message (WindowHandleAvg, 'Average object image', 'window', -1, -1, 'black', 'true')</l>
<l>disp_continue_message (WindowHandleAvg, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Use the average image to create a model that resembles more closely</c>
<c>* the actual appearance of the smd</c>
<l>create_scaled_shape_model (ImageMean, 0, rad(-1), rad(2), 0, 0.77, 0.78, 0, 'point_reduction_low', 'use_polarity', 45, 30, ModelIDAvg)</l>
<l>find_scaled_shape_model (Image, ModelIDAvg, rad(-1), rad(2), 0.77, 0.78, MinScore2, 0, 0, 'interpolation', 2, 0.5, Row, Column, Angle, Scale, Score)</l>
<c>* </c>
<l>dev_display (ImageMean)</l>
<l>disp_message (WindowHandleAvg, 'Resulting shape based model', 'window', -1, -1, 'black', 'true')</l>
<l>get_shape_model_contours (ModelContoursAvg, ModelIDAvg, 1)</l>
<l>area_center (ImageMean, Area1, Row1, Column1)</l>
<l>vector_angle_to_rigid (0, 0, 0, Row1, Column1, 0, HomMat2D)</l>
<l>affine_trans_contour_xld (ModelContoursAvg, ContoursAffinTrans, HomMat2D)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (ContoursAffinTrans)</l>
<l>disp_continue_message (WindowHandleAvg, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<l>dev_set_window_extents (-1, -1, Width, Height)</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('green')</l>
<l>dev_display_shape_matching_results (ModelIDAvg, 'green', Row, Column, Angle, Scale, Scale, 0)</l>
<l>disp_message (WindowHandleAvg, 'MinScore: ' + MinScore2, 'window', -1, -1, 'black', 'true')</l>
<c>* </c>
<l>clear_shape_model (ModelIDAvg)</l>
<l>clear_shape_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="create_reference_image">
<interface>
<oo>
<par name="ReducedReferenceImage" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>Row1 := 20</l>
<l>Row2 := 64</l>
<l>Column1 := 20</l>
<l>Column2 := 106</l>
<l>Column11 := 38</l>
<l>Column12 := 88</l>
<l>gen_contour_polygon_rounded_xld (TemplateShape, [Row1,Row1,Row2,Row2,Row1], [Column1,Column2,Column2,Column1,Column1], [9,9,9,9,9], 1)</l>
<l>gen_contour_polygon_rounded_xld (TemplateLeft, [Row1,Row1,Row2,Row2,Row1], [Column1,Column11,Column11,Column1,Column1], [9,7,7,9,9], 1)</l>
<l>gen_contour_polygon_rounded_xld (TemplateRight, [Row1,Row1,Row2,Row2,Row1], [Column12,Column2,Column2,Column12,Column12], [7,9,9,7,7], 1)</l>
<l>gen_image_const (BlacKBacKground, 'byte', Column2 + 20, Row2 + 20)</l>
<l>paint_xld (TemplateShape, BlacKBacKground, ReferenceImage1, 90)</l>
<l>paint_xld (TemplateLeft, ReferenceImage1, ReferenceImageTmp, 150)</l>
<l>paint_xld (TemplateRight, ReferenceImageTmp, ReferenceImage, 150)</l>
<l>concat_obj (TemplateShape, TemplateLeft, Tmp)</l>
<l>concat_obj (Tmp, TemplateRight, DispTemplate)</l>
<l>gen_rectangle1 (TemplateROI, Row1 - 10, Column1 - 10, Row2 + 10, Column2 + 10)</l>
<l>reduce_domain (ReferenceImage, TemplateROI, ReducedReferenceImage)</l>
<l>* write_image (ReducedReferenceImage, 'png best', 0, 'template')</l>
<l>return ()</l>
</body>
<docu id="create_reference_image">
<parameters>
<parameter id="ReducedReferenceImage"/>
</parameters>
</docu>
</procedure>
</hdevelop>
