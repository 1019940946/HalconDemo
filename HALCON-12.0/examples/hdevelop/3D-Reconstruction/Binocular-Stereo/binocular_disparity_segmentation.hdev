<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* Example program to illustrate the 'binocular_disparity' operator.</c>
<c>* </c>
<c>* The program generates an artificial epipolar stereo image pair of constant, good texture. These</c>
<c>* images hide a circle in front of a background with same kind of texture. The disparities will be</c>
<c>* calculated and the circle will be segmented from the disparity image.</c>
<c>* -------------------------------------------------</c>
<l>dev_update_window ('off')</l>
<l>Width := 320</l>
<l>Height := 240</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'gray', WindowHandle1)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_color ('green')</l>
<l>dev_set_line_width (3)</l>
<l>set_display_font (WindowHandle1, 14, 'mono', 'true', 'false')</l>
<l>dev_open_window (0, Width + 12, Width, Height, 'gray', WindowHandle2)</l>
<l>set_display_font (WindowHandle2, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<l>gen_binocular_image_pair (Image1, Image2, -22.5, 18.7, Width, Height)</l>
<l>dev_set_window (WindowHandle1)</l>
<l>dev_display (Image1)</l>
<l>disp_message (WindowHandle1, 'Left image', 'window', 12, 12, 'black', 'true')</l>
<l>dev_set_window (WindowHandle2)</l>
<l>dev_display (Image2)</l>
<l>disp_message (WindowHandle2, 'Right image', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<l>binocular_disparity (Image1, Image2, Disparity1, Score1, 'sad', 11, 11, 0, -30, 30, 2, 30, 'left_right_check', 'interpolation')</l>
<l>dev_open_window (Height + 62, 0, Width, Height, 'gray', WindowHandle3)</l>
<l>set_display_font (WindowHandle3, 14, 'mono', 'true', 'false')</l>
<l>dev_set_window (WindowHandle3)</l>
<l>dev_display (Disparity1)</l>
<l>disp_message (WindowHandle3, 'Disparity image', 'window', 12, 12, 'black', 'true')</l>
<c>* Extract the object from the background</c>
<l>min_max_gray (Disparity1, Disparity1, 0, Min, Max, Range)</l>
<l>scale_image (Disparity1, Disparity1, Max * 255 / (Max - Min), Min)</l>
<l>convert_image_type (Disparity1, ByteDisparity, 'byte')</l>
<l>binary_threshold (ByteDisparity, SegmCircle, 'max_separability', 'dark', UsedThreshold)</l>
<l>smallest_circle (SegmCircle, Row, Column, Radius)</l>
<c>* The green circle marks the segmented foreground</c>
<l>gen_circle (Circle, Row, Column, Radius)</l>
<l>dev_display (Circle)</l>
<l>dev_set_window (WindowHandle1)</l>
<l>dev_display (Image1)</l>
<l>dev_display (Circle)</l>
<l>disp_message (WindowHandle1, 'Left image', 'window', 12, 12, 'black', 'true')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="gen_binocular_image_pair">
<interface>
<oo>
<par name="Image1" base_type="iconic" dimension="0"/>
<par name="Image2" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ObjectDisparity" base_type="ctrl" dimension="0"/>
<par name="BackgroundDisparity" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* generate a background image</c>
<l>gen_image_const (BackgroundImage, 'byte', Width, Height)</l>
<l>gen_image_proto (BackgroundImage, BackgroundImage, 128)</l>
<l>add_noise_white (BackgroundImage, BackgroundImage, 100)</l>
<c>* generate an image of a circle</c>
<l>gen_image_const (CircleImage, 'byte', Width, Height)</l>
<l>gen_image_proto (CircleImage, CircleImage, 128)</l>
<l>add_noise_white (CircleImage, CircleImage, 70)</l>
<l>gen_circle (Circle, Height / 2, Width / 2, 50.5)</l>
<l>reduce_domain (CircleImage, Circle, CircleImage)</l>
<c>* </c>
<c>* paint the background and the circle into image 1</c>
<l>paint_gray (CircleImage, BackgroundImage, Image1)</l>
<c>* </c>
<c>* translate the background and the circle object and paint them into image 2</c>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_translate (HomMat2DIdentity, 0, BackgroundDisparity, HomMat2DBackground)</l>
<l>affine_trans_image (BackgroundImage, Image2, HomMat2DBackground, 'constant', 'false')</l>
<l>hom_mat2d_translate (HomMat2DIdentity, 0, ObjectDisparity, HomMat2DCircle)</l>
<l>affine_trans_image (CircleImage, CircleImage2, HomMat2DCircle, 'constant', 'false')</l>
<l>affine_trans_region (Circle, Circle2, HomMat2DCircle, 'constant')</l>
<l>reduce_domain (CircleImage2, Circle2, CircleImage2)</l>
<l>paint_gray (CircleImage2, Image2, Image2)</l>
<l>return ()</l>
</body>
<docu id="gen_binocular_image_pair">
<short lang="en_US">generates an artificial epipolar image pair.</short>
<parameters>
<parameter id="BackgroundDisparity"/>
<parameter id="Height"/>
<parameter id="Image1"/>
<parameter id="Image2"/>
<parameter id="ObjectDisparity"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
</hdevelop>
