<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Example for grabbing images with the pylon image acquisition interface.</c>
<c>* (concurrent grabbing from two connected cameras)</c>
<c>* </c>
<c>* </c>
<c>* check interface revision:</c>
<c>* </c>
<l>info_framegrabber ('pylon', 'revision', RevInfo, RevInfoValues)</l>
<c>* </c>
<c>* access the required device information to open the devices</c>
<l>info_framegrabber ('pylon', 'device', DeviceInfo, DeviceInfoValues)</l>
<l>info_framegrabber ('pylon', 'info_boards', BoardInfo, BoardInfoValues)</l>
<c>* </c>
<c>* </c>
<l>if (|DeviceInfoValues| &lt; 2)</l>
<c>    * The camera shows the usage of two connected devices</c>
<c>    * Unfortunately we do not found a device or only one device</c>
<l>    stop ()</l>
<l>endif</l>
<c>* </c>
<c>* Open with default resolution the first connected device</c>
<l>open_framegrabber ('pylon', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'default', DeviceInfoValues[0], -1, -1, AcqHandle1)</l>
<c>* Open with default resolution the second connected device</c>
<l>open_framegrabber ('pylon', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'default', DeviceInfoValues[1], -1, -1, AcqHandle2)</l>
<c>* </c>
<l>Num1394Cameras := 0</l>
<l>tuple_strstr (BoardInfoValues[0], 'Basler1394', Position)</l>
<l>if (Position != -1)</l>
<l>    Num1394Cameras := Num1394Cameras + 1</l>
<l>endif</l>
<l>tuple_strstr (BoardInfoValues[1], 'Basler1394', Position)</l>
<l>if (Position != -1)</l>
<l>    Num1394Cameras := Num1394Cameras + 1</l>
<l>endif</l>
<l>if (Num1394Cameras == 2)</l>
<c>    * Please note, if each of your IEEE 1394 device is connected to his own bus,</c>
<c>    * you can skip or comment out the folling lines of code. In this case we don't</c>
<c>    * have to share the bandwidth of the IEEE 1394 bus.</c>
<l>    get_framegrabber_param (AcqHandle1, 'RecommendedPacketSize', RecommendedPacketSize1)</l>
<l>    get_framegrabber_param (AcqHandle2, 'RecommendedPacketSize', RecommendedPacketSize2)</l>
<c>    * </c>
<l>    if (RecommendedPacketSize1 &gt;= 4096 or RecommendedPacketSize2 &gt;= 4096)</l>
<l>        MaxPacketSize := 8192</l>
<l>    else</l>
<l>        MaxPacketSize := 4096</l>
<l>    endif</l>
<c>    * </c>
<c>    * Check if the recommended packet size from the device is lower than</c>
<c>    * the half of the bus packet size. This could happen in case of slow devices.</c>
<l>    if (RecommendedPacketSize1 &lt; MaxPacketSize / 2)</l>
<l>        set_framegrabber_param (AcqHandle1, 'PacketSize', RecommendedPacketSize1)</l>
<l>    else</l>
<l>        set_framegrabber_param (AcqHandle1, 'PacketSize', MaxPacketSize / 2)</l>
<l>    endif</l>
<c>    * </c>
<l>    if (RecommendedPacketSize2 &lt; MaxPacketSize / 2)</l>
<l>        set_framegrabber_param (AcqHandle2, 'PacketSize', RecommendedPacketSize2)</l>
<l>    else</l>
<l>        set_framegrabber_param (AcqHandle2, 'PacketSize', MaxPacketSize / 2)</l>
<l>    endif</l>
<l>endif</l>
<c>* </c>
<c>* </c>
<l>dev_update_window ('off')</l>
<l>dev_close_window ()</l>
<l>dev_close_window ()</l>
<l>get_framegrabber_param (AcqHandle1, ['image_width','image_height'], ImageSize1)</l>
<l>dev_open_window (0, 0, ImageSize1[0] / 2, ImageSize1[1] / 2, 'black', WindowHandle1)</l>
<l>dev_set_part (0, 0, ImageSize1[1] - 1, ImageSize1[0] - 1)</l>
<l>get_framegrabber_param (AcqHandle2, ['image_width','image_height'], ImageSize2)</l>
<l>dev_open_window (0, (ImageSize1[0] / 2) + 10, ImageSize2[0] / 2, ImageSize2[1] / 2, 'black', WindowHandle2)</l>
<l>dev_set_part (0, 0, ImageSize2[1] - 1, ImageSize2[0] - 1)</l>
<l>grab_image_start (AcqHandle1, -1)</l>
<l>grab_image_async (Image1, AcqHandle1, -1)</l>
<c>* </c>
<l>NumImages := 0</l>
<l>count_seconds (SecondsBegin)</l>
<l>while (1)</l>
<l>    grab_image_async (Image1, AcqHandle1, -1)</l>
<l>    dev_set_part (0, 0, ImageSize1[1] - 1, ImageSize1[0] - 1)</l>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_display (Image1)</l>
<c>    * </c>
<l>    grab_image_async (Image2, AcqHandle2, -1)</l>
<l>    dev_set_part (0, 0, ImageSize2[1] - 1, ImageSize2[0] - 1)</l>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_display (Image2)</l>
<c>    * </c>
<l>    NumImages := NumImages + 1</l>
<l>    count_seconds (SecondsCurrent)</l>
<l>    FrameRate := NumImages / (SecondsCurrent - SecondsBegin)</l>
<l>endwhile</l>
<c>* </c>
<l>close_framegrabber (AcqHandle2)</l>
<l>close_framegrabber (AcqHandle1)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
