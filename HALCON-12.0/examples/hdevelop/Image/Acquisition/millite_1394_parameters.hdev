<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Example for the usage of a Matrox Meteor-II/1394 frame grabber board based on MIL-Lite</c>
<c>* (query current parameter settings)</c>
<c>* </c>
<c>* </c>
<l>info_framegrabber ('MilLite', 'revision', RevInfo, RevInfoValues)</l>
<l>info_framegrabber ('MilLite', 'general', GeneralInfo, GeneralInfoValues)</l>
<l>info_framegrabber ('MilLite', 'parameters', ParameterInfo, ParameterInfoValues)</l>
<c>* </c>
<c>* open the board with the desired camera configuration file</c>
<l>MyDevice := 'METEOR_II_1394:0'</l>
<l>MyCameraType := 'M_DEFAULT'</l>
<l>MyPort := -1</l>
<l>open_framegrabber ('MilLite', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', MyCameraType, MyDevice, MyPort, -1, AcqHandle)</l>
<c>* </c>
<c>* query all available parameter names and sort them:</c>
<l>info_framegrabber ('MilLite', 'parameters', ParameterInfo, ParameterInfoValues)</l>
<l>tuple_sort (ParameterInfoValues, ParameterInfoValues)</l>
<c>* </c>
<c>* open graphics window for parameter output:</c>
<l>dev_close_window ()</l>
<l>ImageHeight := 12 * |ParameterInfoValues| + 20</l>
<l>dev_open_window (0, 0, 600, ImageHeight, 'black', WindowHandle)</l>
<l>dev_set_part (0, 0, ImageHeight - 1, 599)</l>
<c>* </c>
<c>* query all current parameter values:</c>
<l>dev_set_check ('~give_error')</l>
<l>dev_error_var (HalconError, 1)</l>
<l>get_system ('do_low_error', LowErrorFlag)</l>
<l>if (LowErrorFlag == 'true')</l>
<l>    set_system ('do_low_error', 'false')</l>
<l>endif</l>
<l>dev_update_pc ('off')</l>
<l>for i := 0 to |ParameterInfoValues| - 1 by 1</l>
<l>    dev_set_color ('white')</l>
<l>    set_tposition (WindowHandle, (12 * i) + 2, 10)</l>
<l>    write_string (WindowHandle, ParameterInfoValues[i] + ': ')</l>
<l>    get_framegrabber_param (AcqHandle, ParameterInfoValues[i], ParameterValue)</l>
<l>    if (HalconError == H_MSG_TRUE)</l>
<l>        dev_set_color ('green')</l>
<l>        if (|ParameterValue| &gt; 1)</l>
<l>            for j := 0 to |ParameterValue| - 2 by 1</l>
<l>                write_string (WindowHandle, ParameterValue[j] + ',')</l>
<l>            endfor</l>
<l>            write_string (WindowHandle, ParameterValue[j])</l>
<l>        else</l>
<l>            if (|ParameterValue| == 1)</l>
<l>                write_string (WindowHandle, ParameterValue)</l>
<l>            else</l>
<l>                write_string (WindowHandle, '-')</l>
<l>            endif</l>
<l>        endif</l>
<l>    else</l>
<l>        dev_set_color ('red')</l>
<l>        write_string (WindowHandle, '&lt;not supported&gt;')</l>
<l>    endif</l>
<l>endfor</l>
<l>dev_set_check ('give_error')</l>
<l>set_system ('do_low_error', LowErrorFlag)</l>
<l>dev_update_pc ('on')</l>
<l>stop ()</l>
<c>* </c>
<l>get_framegrabber_param (AcqHandle, 'image_width', ImageWidth)</l>
<l>get_framegrabber_param (AcqHandle, 'image_height', ImageHeight)</l>
<l>dev_open_window (10, 10, ImageWidth / 2, ImageHeight / 2, 'black', WindowHandle)</l>
<c>* </c>
<c>* test parameters</c>
<l>for i := 0 to |ParameterInfoValues| - 1 by 1</l>
<l>*     apply_parameter_range (AcqHandle, ParameterInfoValues[i], 50)</l>
<l>    Position := strstr(ParameterInfoValues[i],'_range')</l>
<l>    if (Position != -1)</l>
<l>        CurrentParameter := ParameterInfoValues[i]{0:Position - 1}</l>
<l>        apply_parameter_range (AcqHandle, CurrentParameter, 50)</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<l>dev_close_window ()</l>
<c>* </c>
<l>close_framegrabber (AcqHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="apply_parameter_range">
<interface>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="ParameterName" base_type="ctrl" dimension="0"/>
<par name="NrSteps" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>get_framegrabber_param (AcqHandle, ParameterName + '_range', Range)</l>
<l>grab_image (Image, AcqHandle)</l>
<l>dev_display (Image)</l>
<l>if (|Range| &gt; 0)</l>
<l>    get_framegrabber_param (AcqHandle, ParameterName, ValueOld)</l>
<c>    * loop over all valid values and grab some images</c>
<l>    ValueMin := Range[0]</l>
<l>    ValueMax := Range[1]</l>
<l>    ValueStep := (ValueMax - ValueMin) / NrSteps</l>
<l>    for Value := ValueMin to ValueMax by ValueStep</l>
<l>        set_framegrabber_param (AcqHandle, ParameterName, Value)</l>
<l>        grab_image (Image, AcqHandle)</l>
<l>        dev_display (Image)</l>
<l>    endfor</l>
<l>    set_framegrabber_param (AcqHandle, ParameterName, ValueOld)</l>
<l>    grab_image (Image, AcqHandle)</l>
<l>    dev_display (Image)</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="apply_parameter_range">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="NrSteps"/>
<parameter id="ParameterName"/>
</parameters>
</docu>
</procedure>
</hdevelop>
