<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 768 / 2, 576 / 2, 'black', WindowHandle1)</l>
<l>dev_update_off ()</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>set_display_font (WindowHandle1, 14, 'mono', 'true', 'false')</l>
<l>dev_get_preferences ('suppress_handled_exceptions_dlg', SuppressExceptionSetting)</l>
<l>dev_set_preferences ('suppress_handled_exceptions_dlg', 'true')</l>
<c>* </c>
<c>* Calibrate the camera.</c>
<c>* </c>
<l>CalTabDescrFile := 'caltab_big.descr'</l>
<c>* Make sure that the file 'CaltabName' is in the current directory,</c>
<c>* the HALCONROOT/calib directory, or use an absolute path</c>
<l>StartCamPar := [0.008,0,0.0000086,0.0000086,384,288,768,576]</l>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, 'area_scan_division', StartCamPar)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CalTabDescrFile)</l>
<l>NumImages := 10</l>
<l>for I := 1 to NumImages by 1</l>
<l>    read_image (Image, 'calib/calib-3d-coord-' + I$'02d')</l>
<l>    dev_display (Image)</l>
<l>    Message := 'Find calibration plate in\nall calibration images (' + I + '/' + NumImages + ')'</l>
<l>    disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<c>    * Find the calibration plate</c>
<l>    try</l>
<l>        find_calib_object (Image, CalibDataID, 0, 0, I - 1, [], [])</l>
<l>    catch (Exception)</l>
<l>        Message := 'An exception occured, please verify'</l>
<l>        Message[1] := 'that the file ' + CaltabName</l>
<l>        Message[2] := 'is present in HALCONROOT/calib or'</l>
<l>        Message[3] := 'the current working directory.\n'</l>
<l>        dev_clear_window ()</l>
<l>        disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandle1, Exception, 'window', 100, 12, 'red', 'true')</l>
<l>        dev_set_preferences ('suppress_handled_exceptions_dlg', SuppressExceptionSetting)</l>
<l>        return ()</l>
<l>    endtry</l>
<l>    get_calib_data (CalibDataID, 'camera', 0, 'init_params', StartCamPar)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, I - 1, Row, Column, Index, Pose)</l>
<l>    get_calib_data_observ_contours (Contours, CalibDataID, 'caltab', 0, 0, I - 1)</l>
<l>    gen_cross_contour_xld (Cross, Row, Column, 6, 0.785398)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Contours)</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_display (Cross)</l>
<l>endfor</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<l>calibrate_cameras (CalibDataID, Error)</l>
<l>dev_open_window (0, 391, 900 / 2, 800 / 2, 'black', WindowHandle2)</l>
<l>dev_set_part (0, 0, 799, 899)</l>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params', CamParam)</l>
<l>set_display_font (WindowHandle2, 14, 'mono', 'true', 'false')</l>
<l>for I := 1 to NumImages by 1</l>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_set_part (0, 0, 575, 767)</l>
<l>    read_image (Image, 'calib/calib-3d-coord-' + I$'02d')</l>
<c>    * Obtain the pose of the calibration table.</c>
<l>    get_calib_data (CalibDataID, 'calib_obj_pose', [0,I - 1], 'pose', Pose)</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (Image)</l>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_clear_window ()</l>
<l>    set_origin_pose (Pose, -1.125, -1.0, 0, PoseNewOrigin)</l>
<c>    * Transform the image into the world plane.</c>
<l>    image_to_world_plane (Image, ImageWorld, CamParam, PoseNewOrigin, 900, 800, 0.0025, 'bilinear')</l>
<l>    dev_display (ImageWorld)</l>
<l>    Message := 'Calibration image (' + I + '/' + NumImages + ')'</l>
<l>    disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    Message := 'Image transformed to world plane'</l>
<l>    disp_message (WindowHandle2, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    if (I &lt; NumImages)</l>
<l>        disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<l>clear_calib_data (CalibDataID)</l>
<l>dev_set_preferences ('suppress_handled_exceptions_dlg', SuppressExceptionSetting)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
