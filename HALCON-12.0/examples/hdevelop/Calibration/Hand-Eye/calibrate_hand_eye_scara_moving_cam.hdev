<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* This example explains how to perform the hand-eye calibration for</c>
<c>* a SCARA robot. In this case, the camera is attached to the robot tool</c>
<c>* and the calibration object is stationary with respect to the robot.</c>
<c>* </c>
<c>* Provide the description file of the calibration plate and the</c>
<c>* camera parameters of the previously calibrated camera</c>
<l>CalibObjDescr := 'calibrate_hand_eye_scara_setup_01_calplate.cpd'</l>
<l>CameraParam := [0.004938,-10379.136,4.65138e-006,4.65e-006,617.294,534.687,1280,1024]</l>
<c>* </c>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_size (0, 0, 1280, 1024, 640, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>dev_update_off ()</l>
<c>* </c>
<c>* 1. Acquire calibration images and corresponding robot poses</c>
<c>* </c>
<c>* Create a new calibration model</c>
<l>create_calib_data ('hand_eye_scara_moving_cam', 1, 1, CalibDataID)</l>
<c>* Set the camera parameters in the calibration model</c>
<l>set_calib_data_cam_param (CalibDataID, 0, 'area_scan_division', CameraParam)</l>
<c>* Set the calibration plate in the calibration model</c>
<l>set_calib_data_calib_object (CalibDataID, 0, CalibObjDescr)</l>
<l>for Index := 1 to 10 by 1</l>
<c>    * Read the calibration image</c>
<l>    read_image (CalibImage, '3d_machine_vision/handeye/scara_moving_cam_setup_01_calib_' + Index$'02')</l>
<c>    * Read the corresponding robot pose (pose of the tool in the</c>
<c>    * robot base coordinate system)</c>
<l>    read_pose ('scara_moving_cam_setup_01_tool_in_base_pose_' + Index$'02' + '.dat', ToolInBasePose)</l>
<c>    * Set the robot pose in the calibration model</c>
<l>    set_calib_data (CalibDataID, 'tool', Index, 'tool_in_base_pose', ToolInBasePose)</l>
<c>    * Determine the pose of the calibration plate in the camera</c>
<c>    * coordinate system and set the pose in the calibration model</c>
<l>    find_calib_object (CalibImage, CalibDataID, 0, 0, Index, [], [])</l>
<c>    * Visualize</c>
<l>    dev_display (CalibImage)</l>
<l>    get_calib_data_observ_pose (CalibDataID, 0, 0, Index, ObjInCameraPose)</l>
<l>    disp_caltab (WindowHandle, CalibObjDescr, CameraParam, ObjInCameraPose, 1)</l>
<l>    disp_message (WindowHandle, 'Calibration image ' + Index + ' of 10', 'window', 12, 12, 'black', 'true')</l>
<l>    wait_seconds (0.2)</l>
<l>endfor</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* 2. Perform the hand-eye calibration</c>
<c>* </c>
<l>calibrate_hand_eye (CalibDataID, Errors)</l>
<c>* Get the result of the calibration, i.e., the pose of</c>
<c>* the robot base in the camera coordinate system</c>
<l>get_calib_data (CalibDataID, 'camera', 0, 'tool_in_cam_pose', ToolInCamPosePre)</l>
<c>* Free the calibration model</c>
<l>clear_calib_data (CalibDataID)</l>
<c>* Visualize</c>
<l>disp_preliminary_result (WindowHandle, ToolInCamPosePre, Errors)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* 3. Fix the pose ambiguity</c>
<c>* </c>
<c>* When calibrating a SCARA robot, it is impossible to determine</c>
<c>* all pose parameters unambiguously. In case of a moving</c>
<c>* camera, the Z translation of ObjInBasePose cannot be determined.</c>
<c>* Therefore, it is necessary to fix the unknown translation in</c>
<c>* Z by moving the robot to a pose of known height in the camera</c>
<c>* coordinate system. Because normally the camera does not see</c>
<c>* the object if the tool is moved to the object, the robot is</c>
<c>* moved to two poses. For this, the calibration plate is placed</c>
<c>* at an arbitrary position. The robot is then manually moved such</c>
<c>* that the camera can observe the calibration plate. Now, an image</c>
<c>* of the calibration plate is acquired and the robot pose is</c>
<c>* queried (-&gt; ToolInBasePoseRef1). From the image, the pose of the</c>
<c>* calibration plate in the camera coordinate system can be</c>
<c>* determined (-&gt; ObjInCamPoseRef1). Afterwards, the tool of the</c>
<c>* robot is manually moved to the origin of the calibration plate</c>
<c>* (-&gt; ToolInBasePoseRef2). These three poses and the result of the</c>
<c>* calibration (ToolInCamPosePre) can be used to fix the</c>
<c>* Z ambiguity by using the procedure fix_scara_ambiguity_moving_cam:</c>
<l>read_image (ImageRef1, '3d_machine_vision/handeye/scara_moving_cam_setup_01_calib_ref_1')</l>
<l>get_calib_plate_pose (ImageRef1, CameraParam, CalibObjDescr, ObjInCamPoseRef1)</l>
<l>read_pose ('scara_moving_cam_setup_01_tool_in_base_pose_ref_1.dat', ToolInBasePoseRef1)</l>
<l>read_pose ('scara_moving_cam_setup_01_tool_in_base_pose_ref_2.dat', ToolInBasePoseRef2)</l>
<l>fix_scara_ambiguity_moving_cam (ToolInCamPosePre, ObjInCamPoseRef1, ToolInBasePoseRef1, ToolInBasePoseRef2, ZCorrection)</l>
<l>set_origin_pose (ToolInCamPosePre, 0, 0, ZCorrection, ToolInCamPose)</l>
<c>* </c>
<c>* Visualize</c>
<l>disp_final_results (WindowHandle, ToolInCamPosePre, ToolInCamPose)</l>
<l>disp_end_of_program_message (WindowHandle, 'black', 'true')</l>
<c>* </c>
<c>* After the hand-eye calibration is performed, the resulting pose</c>
<c>* ToolInCamPose can be used in robotic grasping applications:</c>
<c>* Let us assume that the camera acquires an image of the object that</c>
<c>* should be grasped. This image was taken at a certain robot pose</c>
<c>* (-&gt; ToolInBasePose). From the image, the pose of the object in the</c>
<c>* camera coordinate system must be determined (-&gt; ObjInCamPose) by</c>
<c>* using image processing.</c>
<c>* Based on these two poses and the result of the calibration</c>
<c>* (ToolInCamPose), the robot pose can be computed that is necessary</c>
<c>* to grasp the object (-&gt; ObjInBasePose):</c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>ObjInCamPose := [-0.0043,0.0085,0.087,0.445,0.068,355.9,0]</l>
<l>ToolInBasePose := [0.2612,0.084,0.1731,0,0,178.128,0]</l>
<l>pose_compose (CamInToolPose, ObjInCamPose, ObjInToolPose)</l>
<l>pose_compose (ToolInBasePose, ObjInToolPose, ObjInBasePose)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="fix_scara_ambiguity_moving_cam">
<interface>
<ic>
<par name="ToolInCamPosePre" base_type="ctrl" dimension="0"/>
<par name="ObjInCamPose1" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose1" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose2" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ZCorrection" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>pose_invert (ToolInCamPosePre, CamInToolPose)</l>
<l>pose_compose (CamInToolPose, ObjInCamPose1, ObjInToolPose1)</l>
<l>pose_invert (ToolInBasePose1, BaseInToolPose1)</l>
<l>pose_compose (BaseInToolPose1, ToolInBasePose2, Tool2InTool1Pose)</l>
<l>ZCorrection := ObjInToolPose1[2] - Tool2InTool1Pose[2]</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="fix_scara_ambiguity_moving_cam">
<parameters>
<parameter id="ObjInCamPose1"/>
<parameter id="ToolInBasePose1"/>
<parameter id="ToolInBasePose2"/>
<parameter id="ToolInCamPosePre"/>
<parameter id="ZCorrection"/>
</parameters>
</docu>
</procedure>
<procedure name="disp_preliminary_result">
<interface>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="Errors" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>dev_clear_window ()</l>
<l>disp_message (WindowHandle, 'Preliminary result of the SCARA hand-eye calibration', 'window', 12, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle, ['Ambiguous pose of the robot tool in the camera','coordinate system:'], 'window', 80, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle, ['tx = ' + ToolInCamPose[0]$'7.4f' + ' m','ty = ' + ToolInCamPose[1]$'7.4f' + ' m','tz = ' + ToolInCamPose[2]$'7.4f' + ' m','a = ' + ToolInCamPose[3]$'6.2f' + ' °','b = ' + ToolInCamPose[4]$'6.2f' + ' °','g = ' + ToolInCamPose[5]$'6.2f' + ' °'], 'window', 130, 40, 'black', 'true')</l>
<l>disp_message (WindowHandle, 'Errors:', 'window', 253, 12, 'black', 'true')</l>
<l>DispErrors := []</l>
<l>DispErrors := [DispErrors,'                     |   RMS    |  Maximum |']</l>
<l>DispErrors := [DispErrors,'|--------------------+----------+----------|']</l>
<l>DispErrors := [DispErrors,'| Translational part | ' + (Errors[0] * 1e3)$'5.3f' + ' mm | ' + (Errors[2] * 1e3)$'5.3f' + ' mm |']</l>
<l>DispErrors := [DispErrors,'| Rotational part    | ' + Errors[1]$'5.3f' + ' °  | ' + Errors[3]$'5.3f' + ' °  |']</l>
<l>disp_message (WindowHandle, DispErrors, 'window', 285, 40, 'black', 'true')</l>
<l>return ()</l>
</body>
<docu id="disp_preliminary_result">
<parameters>
<parameter id="Errors"/>
<parameter id="ToolInCamPose"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="get_calib_plate_pose">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParam" base_type="ctrl" dimension="0"/>
<par name="CalibObjDescr" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, 'area_scan_division', CameraParam)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CalibObjDescr)</l>
<l>find_calib_object (Image, CalibDataID, 0, 0, 0, [], [])</l>
<l>get_calib_data_observ_pose (CalibDataID, 0, 0, 0, Pose)</l>
<l>clear_calib_data (CalibDataID)</l>
<l>return ()</l>
</body>
<docu id="get_calib_plate_pose">
<parameters>
<parameter id="CalibObjDescr"/>
<parameter id="CameraParam"/>
<parameter id="Image"/>
<parameter id="Pose"/>
</parameters>
</docu>
</procedure>
<procedure name="disp_final_results">
<interface>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="FinalToolInCamPose" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>dev_clear_window ()</l>
<l>disp_message (WindowHandle, 'Final result of the SCARA hand-eye calibration', 'window', 12, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle, ['Ambiguous pose of the robot tool in the camera','coordinate system:'], 'window', 80, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle, ['tx = ' + ToolInCamPose[0]$'7.4f' + ' m','ty = ' + ToolInCamPose[1]$'7.4f' + ' m','tz = ' + ToolInCamPose[2]$'7.4f' + ' m','a = ' + ToolInCamPose[3]$'6.2f' + ' °','b = ' + ToolInCamPose[4]$'6.2f' + ' °','g = ' + ToolInCamPose[5]$'6.2f' + ' °'], 'window', 130, 40, 'black', 'true')</l>
<l>disp_message (WindowHandle, ['Final pose of the robot tool in the camera','coordinate system after fixing the ambiguity:'], 'window', 253, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle, ['tx = ' + FinalToolInCamPose[0]$'7.4f' + ' m','ty = ' + FinalToolInCamPose[1]$'7.4f' + ' m','tz = ' + FinalToolInCamPose[2]$'7.4f' + ' m','a = ' + FinalToolInCamPose[3]$'6.2f' + ' °','b = ' + FinalToolInCamPose[4]$'6.2f' + ' °','g = ' + FinalToolInCamPose[5]$'6.2f' + ' °'], 'window', 303, 40, 'black', 'true')</l>
<l>return ()</l>
</body>
<docu id="disp_final_results">
<parameters>
<parameter id="FinalToolInCamPose"/>
<parameter id="ToolInCamPose"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
