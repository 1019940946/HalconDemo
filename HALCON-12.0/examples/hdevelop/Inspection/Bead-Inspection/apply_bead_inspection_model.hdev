<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>*此示例显示如何使用珠子检查进行验证</c>
<c>*胶珠。 可以使用珠子检查来检测</c>
<c>*以下错误：</c>
<c>* - 缺少粘合剂的部分</c>
<c>* - 粘合剂太多或太少的部分</c>
<c>* - 粘合剂距其预定距离太远的部分</c>
<c>*位置</c>
<c>*</c>
<c>* apply_bead_inspection_model要求检查图像</c>
<c>*已与参考轮廓对齐。 在这个例子中，</c>
<c>*对齐基于平面可变形匹配。</c>
<c>*</c>
<l>dev_update_off ()</l>
<c>* </c>
<c>*创建平面可变形模型以将图像与图像对齐</c>
<c>*参考轮廓</c>
<l>prepare_alignment (RegionPart, RowT, ColumnT, ModelID)</l>
<l>smallest_rectangle1 (RegionPart, PartRow1, PartColumn1, PartRow2, PartColumn2)</l>
<c>* </c>
<c>*定义粘合剂珠的参考路径。 这条路可以</c>
<c>*也可以通过在参考图像上绘制，例如，</c>
<c>* draw_nurbs。</c>
<l>gen_contour_nurbs_xld (ContourRef, [701.767,626.953,538.867,443.54,390.447,360.28,354.247,363.9,400.1,458.02,509.907,588.34,659.533,696.94], [319.24,336.133,367.507,431.46,489.38,546.093,646.247,722.267,776.567,826.04,869.48,912.92,934.64,929.813], 'auto', [15,15,15,15,15,15,15,15,15,15,15,15,15,15], 3, 1, 5)</l>
<c>* </c>
<c>*使用以下参数创建新的珠子检测模型</c>
<l>TargetWidth := 14//目标宽度</l>
<l>WidthTolerance := 7//宽度公差</l>
<l>PositionTolerance := 30//位置容差</l>
<l>Polarity := 'dark'//极性</l>
<l>create_bead_inspection_model (ContourRef, TargetWidth, WidthTolerance, PositionTolerance, Polarity, [], [], BeadInspectionModel)</l>
<c>* </c>
<c>*与参考轮廓一起显示正确的粘合剂珠</c>
<l>read_image (Image, 'bead/adhesive_bead_01')</l>
<l>align_bead (Image, ImageAligned, ModelID, RowT, ColumnT)</l>
<c>* </c>
<c>*创建两个平行的轮廓，以给出一个如何的印象</c>
<c>*应该是厚正确的粘合剂珠</c>
<l>gen_parallel_contour_xld (ContourRef, ModelSide1, 'regression_normal', TargetWidth * 0.5)</l>
<l>gen_parallel_contour_xld (ContourRef, ModelSide2, 'regression_normal', -TargetWidth * 0.5)</l>
<l>concat_obj (ModelSide1, ModelSide2, ModelSides)</l>
<c>* </c>
<c>*创建两个平行的轮廓，给人一种印象</c>
<c>*应找到正确的胶珠</c>
<l>gen_parallel_contour_xld (ContourRef, PositionToleranceSide1, 'regression_normal', PositionTolerance)</l>
<l>gen_parallel_contour_xld (ContourRef, PositionToleranceSide2, 'regression_normal', -PositionTolerance)</l>
<l>concat_obj (PositionToleranceSide1, PositionToleranceSide2, PositionToleranceSides)</l>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_size (0, 0, PartColumn2 - PartColumn1 + 1, PartRow2 - PartRow1 + 41, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_part (PartRow1 - 20, PartColumn1, PartRow2 + 20, PartColumn2)</l>
<l>dev_display (ImageAligned)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (ContourRef)</l>
<l>dev_set_line_width (1)</l>
<l>dev_display (ModelSides)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (PositionToleranceSides)</l>
<l>Message := '绿色轮廓是正确的胶珠和参考轮廓。 '</l>
<l>Message[1] := '黄色轮廓表示位置公差范围。'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>*现在，执行检查任务</c>
<l>TextOffset := 20</l>
<l>NumImages := 7</l>
<l>for Index := 1 to NumImages by 1</l>
<l>    read_image (Image, 'bead/adhesive_bead_' + Index$'02')</l>
<c>    * </c>
<c>    *将输入图像与参考图像对齐</c>
<l>    align_bead (Image, ImageAligned, ModelID, RowT, ColumnT)</l>
<c>    * </c>
<c>    *将珠子检测模型应用于对齐图像</c>
<l>    apply_bead_inspection_model (ImageAligned, LeftContour, RightContour, ErrorSegment, BeadInspectionModel, ErrorType)</l>
<c>    * </c>
<c>    *显示带有错误段的分段胶珠</c>
<l>    dev_display (ImageAligned)</l>
<l>    dev_set_line_width (1)</l>
<l>    dev_set_color ('white')</l>
<l>    dev_display (ContourRef)</l>
<l>    dev_display (ModelSides)</l>
<l>    dev_display (PositionToleranceSides)</l>
<l>    dev_set_line_width (2)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (LeftContour)</l>
<l>    dev_display (RightContour)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (ErrorSegment)</l>
<l>    if (|ErrorType| == 0)</l>
<c>        *未检测到错误</c>
<l>        Message := '胶珠是好的'</l>
<l>        disp_message (WindowHandle, Message, 'window', 12, 12, 'white', 'forest green')</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    else</l>
<c>        *按错误类显示错误</c>
<l>        Message[0] := '胶珠有缺陷:'</l>
<c>        * </c>
<l>        ErrorClasses := ['没有珠子','太薄','太厚','位置不正确']</l>
<l>        for ClassIndex := 0 to |ErrorClasses| - 1 by 1</l>
<l>            Class := ErrorClasses[ClassIndex]</l>
<l>            ErrorIndices := find(ErrorType,Class)</l>
<l>            if (ErrorIndices != -1)</l>
<l>                select_obj (ErrorSegment, SelectedSegments, ErrorIndices + 1)</l>
<l>                dev_set_color ('red')</l>
<l>                dev_set_line_width (3)</l>
<l>                if (Class != 'no bead')</l>
<l>                    gen_display_segments (SelectedSegments, LeftContour, RightContour, ErrorParts)</l>
<l>                    dev_display (ErrorParts)</l>
<l>                else</l>
<l>                    dev_display (SelectedSegments)</l>
<l>                endif</l>
<l>                area_center_points_xld (SelectedSegments, Area, Row, Column)</l>
<l>                for E := 0 to |ErrorIndices| - 1 by 1</l>
<l>                    disp_message (WindowHandle, ErrorIndices[E] + 1, 'image', Row[E], Column[E] - TextOffset, 'white', 'red')</l>
<l>                    TextOffset := 20 - TextOffset</l>
<l>                endfor</l>
<l>            endif</l>
<l>        endfor</l>
<l>        disp_message (WindowHandle, Message, 'window', 12, 12, 'white', 'red')</l>
<l>        disp_message (WindowHandle, [1:|ErrorType|] + ': ' + ErrorType, 'image', 500, 500, 'red', 'false')</l>
<l>        if (Index &lt; NumImages)</l>
<l>            disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>            stop ()</l>
<l>        endif</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<c>*释放所有分配的内存</c>
<l>clear_bead_inspection_model (BeadInspectionModel)</l>
<l>clear_deformable_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="align_bead">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageAligned" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ModelID" base_type="ctrl" dimension="0"/>
<par name="RowT" base_type="ctrl" dimension="0"/>
<par name="ColumnT" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>*使用测试图像与参考图像对齐</c>
<c>*平面可变形匹配</c>
<c>*在图像中找到平面投影不变可变形模型的最佳匹配。</c>
<l>find_planar_uncalib_deformable_model (Image, ModelID, -0.39, 0.78, 1, 1, 1, 1, 0.5, 1, 1, 0, 0.9, [], [], HomMat2D1, Score)</l>
<c>*反转均匀的2D变换矩阵。</c>
<l>hom_mat2d_invert (HomMat2D1, HomMat2DInvert)</l>
<c>*将平移添加到同构2D变换矩阵。</c>
<l>hom_mat2d_translate (HomMat2DInvert, RowT, ColumnT, HomMat2DTranslate)</l>
<c>*对图像应用投影变换。</c>
<l>projective_trans_image (Image, ImageAligned, HomMat2DTranslate, 'bilinear', 'false', 'false')</l>
<l>return ()</l>
</body>
<docu id="align_bead">
<parameters>
<parameter id="ColumnT"/>
<parameter id="Image"/>
<parameter id="ImageAligned"/>
<parameter id="ModelID"/>
<parameter id="RowT"/>
</parameters>
</docu>
</procedure>
<procedure name="close_parallels">
<interface>
<io>
<par name="ParallelContours1" base_type="iconic" dimension="0"/>
<par name="ParallelContours2" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Contour" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>count_obj (ParallelContours1, Number)</l>
<l>gen_empty_obj (Contour)</l>
<l>for Index := 1 to Number by 1</l>
<l>    select_obj (ParallelContours1, Parallel1, Index)</l>
<l>    select_obj (ParallelContours2, Parallel2, Index)</l>
<l>    get_contour_xld (Parallel1, Row1, Col1)</l>
<l>    get_contour_xld (Parallel2, Row2, Col2)</l>
<l>    gen_contour_polygon_xld (ClosedContour, [Row1,inverse(Row2),Row1[0]], [Col1,inverse(Col2),Col1[0]])</l>
<l>    concat_obj (Contour, ClosedContour, Contour)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="close_parallels">
<parameters>
<parameter id="Contour"/>
<parameter id="ParallelContours1"/>
<parameter id="ParallelContours2"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_display_segments">
<interface>
<io>
<par name="TooThinSegments" base_type="iconic" dimension="0"/>
<par name="LeftContour" base_type="iconic" dimension="0"/>
<par name="RightContour" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ContoursIntersection" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c>* Construct contours used to visualize the error segments</c>
<c>* returned by the bead inspection</c>
<l>gen_parallel_contour_xld (TooThinSegments, ParallelContours1, 'regression_normal', 50)</l>
<l>gen_parallel_contour_xld (TooThinSegments, ParallelContours2, 'regression_normal', -50)</l>
<l>close_parallels (ParallelContours1, ParallelContours2, Contour)</l>
<l>close_parallels (LeftContour, RightContour, Contour1)</l>
<l>intersection_closed_contours_xld (Contour, Contour1, ContoursIntersection)</l>
<l>return ()</l>
</body>
<docu id="gen_display_segments">
<parameters>
<parameter id="ContoursIntersection"/>
<parameter id="LeftContour"/>
<parameter id="RightContour"/>
<parameter id="TooThinSegments"/>
</parameters>
</docu>
</procedure>
<procedure name="prepare_alignment">
<interface>
<oo>
<par name="RegionPart" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="RowT" base_type="ctrl" dimension="0"/>
<par name="ColumnT" base_type="ctrl" dimension="0"/>
<par name="ModelID" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>*设置用于确定的四个点的图像坐标</c>
<c>*投射变换以纠正参考</c>
<c>* 图片</c>
<l>Row := [658.232,291.923,314.817,691.533]</l>
<l>Col := [330.071,316.617,971.032,947.008]</l>
<c>*设置上述各自的点坐标</c>
<c>*定义的要点将得到纠正</c>
<l>W := 5.4</l>
<l>H := 3.4</l>
<l>Row1 := 300 + [H,0,0,H] * 120.0</l>
<l>Col1 := 300 + [0,0,W,W] * 120.0</l>
<c>* 使用给定的点对应计算投影变换矩阵。</c>
<l>vector_to_proj_hom_mat2d (Row, Col, Row1, Col1, 'normalized_dlt', [], [], [], [], [], [], HomMat2D, Covariance)</l>
<c>* </c>
<c>*阅读参考图像（没有胶珠的图像）</c>
<l>read_image (ImageRef, 'bead/adhesive_bead_ref')</l>
<c>* </c>
<c>*纠正参考图像</c>
<l>projective_trans_image (ImageRef, ImageRefTrans, HomMat2D, 'bilinear', 'false', 'false')</l>
<c>* </c>
<c>*确定包含平面的区域</c>
<c>*将在其上施加粘合剂珠的部分。</c>
<c>*此平面部分也将用于对齐</c>
<c>*使用参考图像测试图像。</c>
<l>binary_threshold (ImageRefTrans, Region, 'smooth_histo', 'light', UsedThreshold)</l>
<l>opening_circle (Region, RegionOpening, 5.5)</l>
<l>connection (RegionOpening, ConnectedRegions)</l>
<l>area_center (ConnectedRegions, AreaCR, RowCR, ColumnCR)</l>
<l>select_obj (ConnectedRegions, ObjectSelected, sort_index(-AreaCR)[0] + 1)//选最大面积</l>
<l>fill_up (ObjectSelected, RegionFillUp)</l>
<l>dilation_circle (RegionFillUp, RegionPart, 5.5)</l>
<l>reduce_domain (ImageRefTrans, RegionPart, ImageReduced)</l>
<l>area_center (RegionPart, AreaT, RowT, ColumnT)</l>
<c>*为未校准的透视匹配创建可变形模型。</c>
<l>create_planar_uncalib_deformable_model (ImageReduced, 'auto', -0.39, 0.79, 'auto', 1, 1, 'auto', 1, 1, 'auto', 'none', 'use_polarity', 'auto', 'auto', [], [], ModelID)</l>
<l>return ()</l>
</body>
<docu id="prepare_alignment">
<parameters>
<parameter id="ColumnT"/>
<parameter id="ModelID"/>
<parameter id="RegionPart"/>
<parameter id="RowT"/>
</parameters>
</docu>
</procedure>
</hdevelop>
