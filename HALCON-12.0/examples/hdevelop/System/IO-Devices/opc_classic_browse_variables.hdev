<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* This example shows how to determine variable nodes available on an OPC Classic server.</c>
<c>* </c>
<c>* The example uses the Kepware KEPServerEx Simulation driver. For your own server</c>
<c>* access please adapt the following lines to specify your configuration. Please</c>
<c>* check your OPC server for the current address where you can connect to it.</c>
<c>* </c>
<l>MyOpcServerHost := 'localhost'</l>
<l>MyOpcProgID := 'Kepware.KEPServerEX.V5'</l>
<c>* </c>
<l>MyOpcServer := 'opcda://' + MyOpcServerHost + '/' + MyOpcProgID</l>
<c>* </c>
<c>* Open the connection to the server.</c>
<l>open_io_device ('OPC_Classic', MyOpcServer, [], [], IODeviceHandle)</l>
<c>* </c>
<c>* Use the root node to start browsing.</c>
<l>query_io_device (IODeviceHandle, [], 'browse', Nodes)</l>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>* </c>
<c>* Recursive scan through all nodes</c>
<l>Variables := []</l>
<l>while (|Nodes|)</l>
<l>    Start := Nodes[|Nodes| - 1]</l>
<l>    tuple_remove (Nodes, |Nodes| - 1, Nodes)</l>
<l>    tuple_split (Start, ',', Substrings)</l>
<c>    * </c>
<c>    * Get node information.</c>
<l>    Node := Substrings[0]</l>
<l>    IsItem := Substrings[1]</l>
<l>    HasChild := Substrings[2]</l>
<c>    * </c>
<l>    if (HasChild == 'false')</l>
<l>        Variables := [Variables,Node]</l>
<l>    else</l>
<l>        query_io_device (IODeviceHandle, Node, 'browse', NewNode)</l>
<l>        Nodes := [NewNode,Nodes]</l>
<l>    endif</l>
<l>endwhile</l>
<l>Variables := sort(Variables)</l>
<c>* </c>
<c>* Open graphics window for variables output:</c>
<l>ShowValue := false</l>
<l>NumWindows := |Variables| / 65 + 1</l>
<l>WindowHandles := []</l>
<l>ImageHeight := 800</l>
<l>for Index := 0 to NumWindows - 1 by 1</l>
<l>    dev_open_window (0, Index * 400, 500, ImageHeight, 'black', CurrentWindowHandle)</l>
<l>    dev_set_color ('white')</l>
<l>    set_display_font (CurrentWindowHandle, 11, 'mono', 'true', 'false')</l>
<l>    WindowHandles := [WindowHandles,CurrentWindowHandle]</l>
<l>endfor</l>
<c>* </c>
<c>* Display the variables</c>
<l>count := 0</l>
<l>for i := 0 to |Variables| - 1 by 1</l>
<l>    if (i % 65 == 0)</l>
<l>        CurrentWindowHandle := WindowHandles[count]</l>
<l>        dev_set_window (CurrentWindowHandle)</l>
<l>        count := count + 1</l>
<l>    endif</l>
<l>    set_tposition (CurrentWindowHandle, (12 * (i - 65 * (count - 1))) + 2, 10)</l>
<l>    write_string (CurrentWindowHandle, Variables[i])</l>
<l>endfor</l>
<c>* </c>
<c>* Get the display_name and data_type for the first variable.</c>
<l>open_io_channel (IODeviceHandle, Variables[0], [], [], IOChannelHandle)</l>
<l>get_io_channel_param (IOChannelHandle, 'param_name', ParamValue)</l>
<l>get_io_channel_param (IOChannelHandle, 'io_channel_name', DisplayName)</l>
<l>get_io_channel_param (IOChannelHandle, 'access_rights', AccessRights)</l>
<c>* </c>
<c>* Close the connection to the channel</c>
<l>close_io_channel (IOChannelHandle)</l>
<c>* </c>
<c>* Close the connection to the device</c>
<l>close_io_device (IODeviceHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
