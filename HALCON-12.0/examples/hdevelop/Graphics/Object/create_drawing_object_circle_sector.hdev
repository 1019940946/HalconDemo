<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>*此示例演示如何使用类型的绘图对象</c>
<c>*用于交互式边缘检测应用的“圆弧”。</c>
<c>*交互地移动、调整大小或改变角度</c>
<c>*在绘图对象中，应用过滤器来检测边缘。</c>
<c>*在绘制对象包围的区域内。</c>
<c></c>
<c>*与其他绘图操作符相反，例如，拖拽圆，</c>
<c>*使用绘图对象不会阻塞整个应用程序。</c>
<c>*因此，用户可以与对象交互或进行更改。</c>
<c>*对程序没有结束交互第一。</c>
<c></c>
<c>* 初始化设置</c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>set_system ('flush_graphic', 'true')</l>
<l>dev_set_preferences ('graphics_window_context_menu', 'false')</l>
<l>dev_get_preferences ('suppress_handled_exceptions_dlg', SuppressExceptDlg)</l>
<l>dev_set_preferences ('suppress_handled_exceptions_dlg', 'true')</l>
<c>* Read image</c>
<l>read_image (Image, 'mreut')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>get_system ('operating_system', OS)</l>
<l>if (OS == 'Linux')</l>
<l>    open_window (100, 0, Width, Height, 0, 'visible', '', WindowHandle)</l>
<l>    set_part (WindowHandle, 0, 0, Height - 1, Width - 1)</l>
<l>    set_color (WindowHandle, 'green')</l>
<l>    disp_obj (Image, WindowHandle)</l>
<l>else</l>
<l>    dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Image)</l>
<l>endif</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* Display short description</c>
<l>Message := '这个例子展示了如何应用Sobel滤波器。'</l>
<l>Message[1] := '在类型的绘图对象的区域内'</l>
<l>Message[2] := '\'circle_arc\' 边缘检测e'</l>
<l>Message[3] := '交互移动、调整大小或改变'</l>
<l>Message[4] := '圆扇形角.'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>if (OS == 'Linux')</l>
<l>    Message := 'Click into the window to continue.'</l>
<l>    get_window_extents (WindowHandle, Row, Column, Width, Height)</l>
<l>    get_string_extents (WindowHandle, ' ' + Message + ' ', Ascent, Descent, TextWidth, TextHeight)</l>
<l>    disp_message (WindowHandle, Message, 'window', Height - TextHeight - 12, Width - TextWidth - 12, 'black', 'true')</l>
<l>    get_mbutton (WindowHandle, Row, Column, Button)</l>
<l>else</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endif</l>
<c>* </c>
<c>* Create a drawing object of type 'circle_arc' and set its color</c>
<c>*创建一个类型为“Curclix弧”的绘图对象并设置其颜色</c>
<l>create_drawing_object_circle_sector (250, 200, 100, 0, 3.14159, DrawID)</l>
<l>set_drawing_object_params (DrawID, 'color', 'yellow')</l>
<c>* </c>
<c>* 将绘图对象和图像附加到窗口</c>
<l>attach_drawing_object_to_window (WindowHandle, DrawID)</l>
<l>attach_background_to_window (Image, WindowHandle)</l>
<c>* </c>
<c>* 使用文本绘制对象显示简短描述</c>
<l>Message := '通过拖动移动\n调整大小或改变角度圆扇区的句柄和边框。\n单击鼠标右键退出交互。 '</l>
<l>get_font (WindowHandle, Font)</l>
<l>create_drawing_object_text (12, 20, Message, DrawIDMessage)</l>
<l>set_drawing_object_params (DrawIDMessage, ['color','font'], ['yellow',Font])</l>
<l>attach_drawing_object_to_window (WindowHandle, DrawIDMessage)</l>
<c>* </c>
<c>*使用绘图对象交互式地检测边缘</c>
<c>*</c>
<c>*在绘制对象的区域中应用Sobel筛选器</c>
<c>*提取边缘。圆圈扇区可以移动，调整大小，或者</c>
<c>*由用户交互更改。边缘检测</c>
<c>*在绘制对象时不断调整。</c>
<c>*通过单击鼠标右键结束用户交互。</c>
<l>Button := 0</l>
<l>while (Button != 4)</l>
<l>    try</l>
<l>        image_processing (Image, EdgeAmplitude, DrawID)</l>
<l>        display_results (EdgeAmplitude, WindowHandle)</l>
<c>        * 检查鼠标位置和按钮</c>
<l>        get_mposition (WindowHandle, Row, Column, Button)</l>
<l>    catch (Exception)</l>
<c>        * Keep waiting until the mouse is</c>
<c>        * positioned over the image</c>
<l>    endtry</l>
<l>endwhile</l>
<c>* </c>
<c>* Detach the drawing objects</c>
<l>detach_drawing_object_from_window (WindowHandle, DrawID)</l>
<l>detach_drawing_object_from_window (WindowHandle, DrawIDMessage)</l>
<l>detach_background_from_window (WindowHandle)</l>
<c>* </c>
<c>* Clear the drawing objects</c>
<l>clear_drawing_object (DrawID)</l>
<l>clear_drawing_object (DrawIDMessage)</l>
<l>if (OS == 'Linux')</l>
<l>    clear_window (WindowHandle)</l>
<l>    disp_obj (Image, WindowHandle)</l>
<l>    disp_message (WindowHandle, 'The drawing object has been cleared.', 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandle, 'Click into the window to to close it.', 'window', 50, 12, 'black', 'true')</l>
<l>    get_mbutton (WindowHandle, Row, Column, Button)</l>
<l>    close_window (WindowHandle)</l>
<l>else</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (Image)</l>
<l>    dev_set_preferences ('suppress_handled_exceptions_dlg', SuppressExceptDlg)</l>
<l>    disp_message (WindowHandle, 'The drawing object has been cleared.', 'window', 12, 12, 'black', 'true')</l>
<l>endif</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="image_processing">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="EdgeAmplitude" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="DrawID" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>*使用图标的区域表示</c>
<c>*用于边缘检测的绘制对象 </c>
<l>get_drawing_object_iconic (Region, DrawID)</l>
<l>reduce_domain (Image, Region, ImageReduced)</l>
<l>sobel_amp (ImageReduced, EdgeAmplitude, 'sum_abs', 3)</l>
<l>return ()</l>
</body>
<docu id="image_processing">
<parameters>
<parameter id="DrawID">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>draw_object</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="EdgeAmplitude">
<sem_type>image</sem_type>
</parameter>
<parameter id="Image">
<sem_type>image</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="display_results">
<interface>
<io>
<par name="EdgeAmplitude" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_system ('flush_graphic', 'false')</l>
<c>* it is necessary to clear the graphic stack, so that previous</c>
<c>* results do not show anymore</c>
<l>get_system ('operating_system', OS)</l>
<l>if (OS == 'Linux')</l>
<l>    clear_window (WindowHandle)</l>
<l>    disp_obj (EdgeAmplitude, WindowHandle)</l>
<l>else</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (EdgeAmplitude)</l>
<l>endif</l>
<l>set_system ('flush_graphic', 'true')</l>
<l>disp_cross (WindowHandle, -10, -10, 6, 0)</l>
<l>return ()</l>
</body>
<docu id="display_results">
<parameters>
<parameter id="EdgeAmplitude">
<sem_type>object</sem_type>
</parameter>
<parameter id="WindowHandle">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>window</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
</hdevelop>
