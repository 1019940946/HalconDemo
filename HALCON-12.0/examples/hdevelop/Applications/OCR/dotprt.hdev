<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* dotprt.hdev: Segmentation of a dot printing</c>
<c>* </c>
<l>dev_update_window ('off')</l>
<l>read_image (Needle, 'needle1')</l>
<l>dev_close_window ()</l>
<l>get_image_size (Needle, Width, Height)</l>
<l>dev_open_window (0, 0, 2 * Width, 2 * Height, 'black', WindowID)</l>
<l>set_display_font (WindowID, 16, 'mono', 'true', 'false')</l>
<l>dev_display (Needle)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<c>* *</c>
<l>Row1 := 50</l>
<l>Column1 := 90</l>
<l>Row2 := 250</l>
<l>Column2 := 370</l>
<l>Px := Column1 + (Column2 - Column1) / 2</l>
<l>Py := Row1 + (Row2 - Row1) / 2</l>
<l>gen_rectangle1 (Rectangle1, Row1, Column1, Row2, Column2)</l>
<c>* orientation correction</c>
<l>text_line_orientation (Needle, Needle, 35, -0.523599, 0.523599, OrientationAngle)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, -OrientationAngle, Px, Py, HomMat2DRotate)</l>
<l>affine_trans_image (Needle, Rotated, HomMat2DRotate, 'constant', 'false')</l>
<l>dev_display (Rotated)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<l>threshold (Rotated, RawSegmentation, 0, 105)</l>
<l>connection (RawSegmentation, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, MinSizeRegions, 'area', 'and', 6, 99999)</l>
<l>union1 (MinSizeRegions, RemovedNoise)</l>
<l>dev_display (Rotated)</l>
<l>dev_set_color ('green')</l>
<l>dev_set_draw ('fill')</l>
<l>dev_display (RemovedNoise)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<l>clip_region (RemovedNoise, RawSegmentation, 53, 75, 260, 356)</l>
<l>dev_display (Rotated)</l>
<l>dev_display (RawSegmentation)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<l>closing_circle (RawSegmentation, ClosedPatterns, 6)</l>
<l>opening_rectangle1 (ClosedPatterns, SplitPatterns, 1, 5)</l>
<l>connection (SplitPatterns, ConnPatterns)</l>
<l>select_shape (ConnPatterns, CharCandidates, 'area', 'and', 150, 5999)</l>
<l>shape_trans (CharCandidates, CharBlocks, 'rectangle1')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>dev_display (Rotated)</l>
<l>dev_display (CharBlocks)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<l>partition_rectangle (CharBlocks, CharCandidates, 25, 100)</l>
<l>intersection (CharCandidates, RawSegmentation, Characters)</l>
<l>closing_circle (Characters, IntermedCharacters, 2.5)</l>
<l>dev_set_colored (12)</l>
<l>dev_display (Rotated)</l>
<l>dev_set_draw ('fill')</l>
<l>dev_display (IntermedCharacters)</l>
<l>disp_continue_message (WindowID, 'black', 'true')</l>
<l>stop ()</l>
<l>gen_empty_obj (Characters)</l>
<l>count_obj (IntermedCharacters, NumIntermediate)</l>
<l>dev_display (Rotated)</l>
<l>for i := 1 to NumIntermediate by 1</l>
<l>    dev_set_color ('red')</l>
<l>    select_obj (IntermedCharacters, Char, i)</l>
<l>    dev_display (Char)</l>
<l>    connection (Char, CharParts)</l>
<l>    select_shape (CharParts, CharCandidates, 'area', 'and', 40, 99999)</l>
<l>    union1 (CharCandidates, Char)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Char)</l>
<l>*     disp_continue_message (WindowID, 'black', 'true')</l>
<l>*     stop ()</l>
<l>    concat_obj (Characters, Char, Characters)</l>
<l>endfor</l>
<l>select_shape (Characters, Heigh, 'height', 'and', 24, 50)</l>
<l>sort_region (Heigh, FinalCharacters, 'character', 'true', 'row')</l>
<l>dev_set_color ('red')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Rotated)</l>
<l>dev_display (FinalCharacters)</l>
<l>dev_set_color ('green')</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_shape ('rectangle1')</l>
<l>dev_display (FinalCharacters)</l>
<l>dev_set_shape ('original')</l>
<l>dev_set_line_width (1)</l>
<l>dev_set_draw ('fill')</l>
<l>read_ocr_class_mlp ('DotPrint', OCRHandle)</l>
<l>do_ocr_multi_class_mlp (FinalCharacters, Rotated, OCRHandle, Class, Confidence)</l>
<l>smallest_rectangle1 (FinalCharacters, Row11, Column1, Row2, Column21)</l>
<l>count_obj (FinalCharacters, NumberFinal)</l>
<l>for i := 1 to NumberFinal by 1</l>
<l>    disp_message (WindowID, Class[i - 1], 'image', Row2[i - 1], Column1[i - 1], 'green', 'false')</l>
<l>endfor</l>
<l>clear_ocr_class_mlp (OCRHandle)</l>
<l>dev_update_window ('on')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
