<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to use local deformable</c>
<c>* matching to find objects that are deformed.</c>
<c>* The deformations in this example are quite challenging,</c>
<c>* so that in this case a shape-based matching (even when</c>
<c>* using the parameter 'max_deformation') would not be robust</c>
<c>* enough to detect all objects.</c>
<c>* </c>
<c>* Please refer also to the example programs</c>
<c>* 'find_cocoa_packages_local_deformable.hdev' and</c>
<c>* 'find_cocoa_packages_max_deformation.hdev'</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>read_image (ModelImage, 'food/peanut_chocolate_candies_model')</l>
<l>dev_open_window_fit_image (ModelImage, 0, 0, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* Create and display the local deformable model</c>
<l>create_local_deformable_model (ModelImage, 0, rad(-115), rad(50), 'auto', 1, 1, 'auto', 1, 1, 'auto', 'none', 'use_polarity', 65, 25, [], [], ModelID)</l>
<l>get_deformable_model_contours (ModelContours, ModelID, 1)</l>
<l>area_center (ModelImage, Area, Row, Column)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_translate (HomMat2DIdentity, Row, Column, HomMat2DTranslate)</l>
<l>affine_trans_contour_xld (ModelContours, ContoursAffinTrans, HomMat2DTranslate)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (ModelImage)</l>
<l>dev_display (ContoursAffinTrans)</l>
<l>disp_message (WindowHandle, 'Model image and contours', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Main loop</c>
<l>Smoothness := 19</l>
<l>NumImages := 12</l>
<l>for Index := 1 to NumImages by 1</l>
<l>    read_image (Image, 'food/peanut_chocolate_candies_' + Index$'02')</l>
<c>    * Zoom the image for a speed-up</c>
<l>    dev_resize_window_fit_image (Image, 0, 0, -1, -1)</l>
<l>    dev_display (Image)</l>
<l>    disp_message (WindowHandle, 'Search ...', 'window', 12, 12, 'black', 'true')</l>
<l>    count_seconds (S1)</l>
<c>    * Find the model in the search image.</c>
<c>    * As result, the rectified image, the respective</c>
<c>    * vector field, and the found contours are queried.</c>
<l>    find_local_deformable_model (Image, ImageRectified, VectorField, DeformedContours, ModelID, rad(-120), rad(60), 1, 1, 1, 1, 0.3, 0, 0.7, 0, 0.1, ['vector_field','deformed_contours'], ['deformation_smoothness','expand_border','subpixel'], [Smoothness,0,0], Score, Row, Column)</l>
<l>    count_seconds (S2)</l>
<l>    Time := S2 - S1</l>
<c>    * Display results</c>
<l>    gen_warped_mesh (VectorField, WarpedMesh, Smoothness)</l>
<l>    dev_set_line_width (1)</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_display (WarpedMesh)</l>
<l>    Found[Index] := |Score|</l>
<l>    dev_set_line_width (2)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (DeformedContours)</l>
<l>    disp_message (WindowHandle, |Score| + ' matches found in ' + Time$'1.2f' + ' s', 'window', 12, 12, 'black', 'true')</l>
<l>    for J := 0 to |Score| - 1 by 1</l>
<l>        disp_message (WindowHandle, 'Score: ' + Score[J]$'.2f', 'image', 350, Column[J] - 80, 'black', 'true')</l>
<l>    endfor</l>
<l>    if (Index &lt; NumImages)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<c>* Clean up</c>
<l>clear_deformable_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="gen_warped_mesh">
<interface>
<io>
<par name="VectorField" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="WarpedMesh" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Step" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Generate a grid of the deformation from the VectorField</c>
<c>* The step width is given by the parameter Step.</c>
<c>* </c>
<l>gen_empty_obj (WarpedMesh)</l>
<l>count_obj (VectorField, Number)</l>
<l>for Index := 1 to Number by 1</l>
<l>    select_obj (VectorField, ObjectSelected, Index)</l>
<l>    vector_field_to_real (ObjectSelected, DRow, DColumn)</l>
<l>    get_image_size (VectorField, Width, Height)</l>
<c>    * Horizontal lines</c>
<l>    for ContR := 0.5 to Height[0] - 1 by Step</l>
<l>        Column := [0.5:Width[0] - 1]</l>
<l>        tuple_gen_const (Width[0] - 1, ContR, Row)</l>
<l>        get_grayval_interpolated (DRow, Row, Column, 'bilinear', GrayRow)</l>
<l>        get_grayval_interpolated (DColumn, Row, Column, 'bilinear', GrayColumn)</l>
<l>        gen_contour_polygon_xld (Contour, GrayRow, GrayColumn)</l>
<l>        concat_obj (WarpedMesh, Contour, WarpedMesh)</l>
<l>    endfor</l>
<c>    * Vertical lines</c>
<l>    for ContC := 0.5 to Width[0] - 1 by Step</l>
<l>        Row := [0.5:Height[0] - 1]</l>
<l>        tuple_gen_const (Height[0] - 1, ContC, Column)</l>
<l>        get_grayval_interpolated (DRow, Row, Column, 'bilinear', GrayRow)</l>
<l>        get_grayval_interpolated (DColumn, Row, Column, 'bilinear', GrayColumn)</l>
<l>        gen_contour_polygon_xld (Contour, GrayRow, GrayColumn)</l>
<l>        concat_obj (WarpedMesh, Contour, WarpedMesh)</l>
<l>    endfor</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="gen_warped_mesh">
<parameters>
<parameter id="Step"/>
<parameter id="VectorField"/>
<parameter id="WarpedMesh"/>
</parameters>
</docu>
</procedure>
</hdevelop>
