<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to recognize planar objects using HALCON's</c>
<c>* shape-based matching if the camera is not mounted perpendicular to the plane</c>
<c>* in which the objects lie.  To recognize the objects, the images are rectified, i.e.,</c>
<c>* the perspective distortions are removed from the images.  To do so, the camera</c>
<c>* is calibrated and the plane in which the objects lie is obtained from the external</c>
<c>* camera parameters of the image in which the calibration target lies on this plane</c>
<c>* Once this plane is known, the image of the model object can be rectified and</c>
<c>* hence the model can be generated in the world plane, i.e., without distortions.</c>
<c>* Similarly, the search images are also rectified, and hence the shape-based</c>
<c>* matching becomes invariant to perspective distortions.</c>
<l>dev_update_pc ('off')</l>
<l>dev_update_window ('off')</l>
<l>dev_update_var ('off')</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 646, 482, 'black', WindowHandle)</l>
<l>dev_set_part (0, 0, 481, 645)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<c>* Perform the camera calibration.</c>
<l>CalTabDescription := 'caltab_30mm.descr'</l>
<l>StartCamPar := [0.008,0,0.0000073,0.0000073,323,241,646,482]</l>
<c>* </c>
<c>* Initialize a calibration data model</c>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, 'area_scan_division', StartCamPar)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CalTabDescription)</l>
<l>NumImages := 15</l>
<l>for I := 1 to NumImages by 1</l>
<l>    read_image (Image, 'radius-gauges/calib-' + I$'02d')</l>
<l>    dev_display (Image)</l>
<l>    find_calib_object (Image, CalibDataID, 0, 0, I, [], [])</l>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, I)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Caltab)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, I, RCoord, CCoord, Index, Pose1)</l>
<l>    dev_set_color ('red')</l>
<l>    disp_circle (WindowHandle, RCoord, CCoord, gen_tuple_const(|RCoord|,1.5))</l>
<l>endfor</l>
<l>calibrate_cameras (CalibDataID, Error)</l>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params', CamParam)</l>
<c>* The pose of the calibration target in the first image defines a plane that is</c>
<c>* parallel to the plane in which the objects lie.  This pose can be used to see how</c>
<c>* much the camera is rotated with respect to this plane.</c>
<l>get_calib_data_observ_pose (CalibDataID, 0, 0, 1, PoseCalib)</l>
<l>clear_calib_data (CalibDataID)</l>
<c>* The pose of the calibration target in the first image defines a plane that is offset</c>
<c>* from the plane in which the objects lie by the thickness of the calibration target.</c>
<c>* Therefore, we need to shift the origin of the pose in the z direction by the</c>
<c>* thickness. Note that the thickness of the calibration target used for this</c>
<c>* example is 0.63 mm. If you adapt this example program to your application, it</c>
<c>* is necessary to determine the thickness of your specific calibration target and to</c>
<c>* use this value instead. Furthermore, we need to shift the origin so that the top left corner</c>
<c>* of the image lies approximately in the top left corner of the rectified image.</c>
<l>set_origin_pose (PoseCalib, -0.066, -0.048, 0.00063, Pose)</l>
<c>* We also need to define the pixel spacing in the rectified image.  In this case,</c>
<c>* we set it to 0.2mm (i.e., 0.0002m).</c>
<l>PixelDist := 0.0002</l>
<c>* We now can compute the mapping function to rectify the image because it does</c>
<c>* not change (the camera does not move with respect to the world plane).</c>
<l>gen_image_to_world_plane_map (Map, CamParam, Pose, 646, 482, 596, 448, PixelDist, 'bilinear')</l>
<c>* We also compute the transformation from the world coordinate system, i.e., the</c>
<c>* coordinate system of the plane, to the camera coordinate system.  This</c>
<c>* transformation is later used to visualize the recognized objects in the distorted</c>
<c>* (i.e., original, unrectified) images.</c>
<l>pose_to_hom_mat3d (Pose, HomMat3D)</l>
<c>* Now that we are able to rectify the images, we can create the shape model.</c>
<l>read_image (Image, 'radius-gauges/radius-gauges-00')</l>
<l>dev_display (Image)</l>
<c>* Display the pose of the world plane.</c>
<l>disp_message (WindowHandle, 'Rotation of the camera:', 'image', 350, 20, 'green', 'false')</l>
<l>disp_message (WindowHandle, 'x axis: ' + PoseCalib[3]$'7.3f' + '°', 'image', 380, 20, 'green', 'false')</l>
<l>disp_message (WindowHandle, 'y axis: ' + PoseCalib[4]$'7.3f' + '°', 'image', 410, 20, 'green', 'false')</l>
<l>disp_message (WindowHandle, 'z axis: ' + PoseCalib[5]$'7.3f' + '°', 'image', 440, 20, 'green', 'false')</l>
<l>disp_message (WindowHandle, 'Model image (generating shape model...)', 'image', 20, 20, 'green', 'false')</l>
<c>* We rectify the model image and create the shape model in the rectified image.</c>
<l>map_image (Image, Map, ImageRectified)</l>
<l>gen_rectangle1 (Rectangle, 120, 220, 340, 450)</l>
<l>area_center (Rectangle, Area, RowRef, ColumnRef)</l>
<l>reduce_domain (ImageRectified, Rectangle, ImageReduced)</l>
<l>create_shape_model (ImageReduced, 5, 0, rad(360), 'auto', 'none', 'use_polarity', 30, 5, ModelID)</l>
<c>* For visualization purposes, we also create a contour that corresponds to the</c>
<c>* outer boundary of the object.  This is done because the model contains a hole,</c>
<c>* and hence consists of multiple contours.  This allows us to visualize the</c>
<c>* recognized models in the original images in a simplified manner.</c>
<l>get_shape_model_contours (Model, ModelID, 1)</l>
<l>select_shape_xld (Model, ModelBorder, 'contlength', 'and', 200, 1000)</l>
<c>* Now we are going to visualize the model in the original image.  To do so, we</c>
<c>* read out the coordinates of the model points.  But since the model returned by</c>
<c>* get_shape_model_contours has its reference position at (0,0), we first need to</c>
<c>* move it to the reference position in the rectified image.</c>
<l>vector_angle_to_rigid (0, 0, 0, RowRef, ColumnRef, 0, HomMat2D)</l>
<l>affine_trans_contour_xld (ModelBorder, ModelBorderTrans, HomMat2D)</l>
<l>get_contour_xld (ModelBorderTrans, Ys, Xs)</l>
<c>* Since we have rectified the image, the pixel coordinates correspond to 0.2mm</c>
<c>* increments.  Since the projection operator expects coordinates in meters, we</c>
<c>* need to multiply them by the pixel distance.</c>
<l>X := Xs * PixelDist</l>
<l>Y := Ys * PixelDist</l>
<l>Z := gen_tuple_const(|X|,0.0)</l>
<c>* We now must transform the model points into the camera coordinate system.</c>
<l>affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<c>* Finally, we can project the points from the camera coordinate system to the</c>
<c>* image plane.</c>
<l>project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<c>* We now create a contour from the projected points.</c>
<l>gen_contour_polygon_xld (ModelWorld, R, C)</l>
<c>* For visualization purposes, we also will display an arrow from the reference</c>
<c>* point of the model.  The arrow is exactly 10mm long and oriented horizontally in</c>
<c>* the world coordinate system.  As with the model, the arrow will be displayed in</c>
<c>* the original image, where it will not be horizontal because of the perspective</c>
<c>* distortion.</c>
<l>X := [ColumnRef * PixelDist,ColumnRef * PixelDist + 1. / 100]</l>
<l>Y := [RowRef * PixelDist,RowRef * PixelDist]</l>
<l>Z := gen_tuple_const(|X|,0.0)</l>
<l>affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<l>project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<l>dev_set_color ('red')</l>
<l>dev_display (ModelWorld)</l>
<l>dev_set_color ('green')</l>
<l>disp_arrow (WindowHandle, R[0], C[0], R[1], C[1], 2)</l>
<c>* The final part of the program performs the object recognition.  Up to three</c>
<c>* objects will be visible in the images.  Note that these objects are not exactly</c>
<c>* identical.  The circular indentations and protrusions have different radii (5.5mm,</c>
<c>* 6mm, and 6.5mm).  Therefore, in addition to the occlusions of the objects, the</c>
<c>* shape-based matching must compensate for these (significant) variations in</c>
<c>* the objects' shape.  The model was actually created from the object with the</c>
<c>* 6mm radii.</c>
<l>disp_message (WindowHandle, ['Press left button to start','and stop the demo'], 'image', 50, 20, 'yellow', 'false')</l>
<l>get_mbutton (WindowHandle, Row1, Column1, Button1)</l>
<l>wait_seconds (0.5)</l>
<l>dev_set_color ('red')</l>
<l>Button := 0</l>
<l>ImgNo := 1</l>
<l>while (Button != 1)</l>
<l>    read_image (Image, 'radius-gauges/radius-gauges-' + ImgNo$'02d')</l>
<c>    * We will count the time to rectify the image and to find the objects.</c>
<l>    count_seconds (S1)</l>
<l>    map_image (Image, Map, ImageRectified)</l>
<l>    find_shape_model (ImageRectified, ModelID, 0, rad(360), 0.5, 0, 0.5, 'least_squares', 0, 0.6, Row, Column, Angle, Score)</l>
<l>    count_seconds (S2)</l>
<l>    dev_display (Image)</l>
<l>    Time := (S2 - S1) * 1000</l>
<l>    Num := |Score|</l>
<c>    * We will now project the contours of the found instances of the model back to</c>
<c>    * the perspectively distorted image plane.  The following code is identical to</c>
<c>    * the code above that displays the model in the perspectively distorted image.</c>
<l>    if (Num &gt; 0)</l>
<l>        for I := 0 to Num - 1 by 1</l>
<l>            vector_angle_to_rigid (0, 0, 0, Row[I], Column[I], Angle[I], HomMat2D)</l>
<l>            affine_trans_contour_xld (ModelBorder, ModelBorderTrans, HomMat2D)</l>
<l>            get_contour_xld (ModelBorderTrans, Ys, Xs)</l>
<l>            X := Xs * PixelDist</l>
<l>            Y := Ys * PixelDist</l>
<l>            Z := gen_tuple_const(|X|,0.0)</l>
<l>            affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<l>            project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<l>            gen_contour_polygon_xld (ModelWorld, R, C)</l>
<l>            X := [Column[I] * PixelDist,Column[I] * PixelDist + cos(Angle[I]) / 100]</l>
<l>            Y := [Row[I] * PixelDist,Row[I] * PixelDist - sin(Angle[I]) / 100]</l>
<l>            Z := gen_tuple_const(|X|,0.0)</l>
<l>            affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<l>            project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<l>            dev_set_color ('red')</l>
<l>            dev_display (ModelWorld)</l>
<l>            dev_set_color ('green')</l>
<l>            disp_arrow (WindowHandle, R[0], C[0], R[1], C[1], 2)</l>
<l>        endfor</l>
<l>        for I := 0 to Num - 1 by 1</l>
<l>            disp_message (WindowHandle, 'Pose: (' + (Column[I] * PixelDist * 1000)$'6.2f' + ',' + (Row[I] * PixelDist * 1000)$'6.2f' + ') [mm], ' + deg(Angle[I])$'6.2f' + '°', 'image', 380 + I * 30, 20, 'yellow', 'false')</l>
<l>        endfor</l>
<l>    endif</l>
<l>    disp_message (WindowHandle, Num$'1d' + ' objects found in ' + Time$'4.2f' + 'ms', 'image', 20, 20, 'yellow', 'false')</l>
<l>    ImgNo := ImgNo + 1</l>
<l>    if (ImgNo &gt; 20)</l>
<l>        ImgNo := 1</l>
<l>    endif</l>
<l>    dev_error_var (Error, 1)</l>
<l>    dev_set_check ('~give_error')</l>
<l>    get_mposition (WindowHandle, R, C, Button)</l>
<l>    dev_error_var (Error, 0)</l>
<l>    dev_set_check ('give_error')</l>
<l>    if (Error != H_MSG_TRUE)</l>
<l>        Button := 0</l>
<l>    endif</l>
<l>endwhile</l>
<l>clear_shape_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
