<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* This example shows how to use the component-based matching in order</c>
<c>* to locate a  pipe wrench that consists of two components. Because the relative</c>
<c>* movements of the components are complicated to describe manually, the</c>
<c>* relations are automatically trained by using four training images that</c>
<c>* show the extreme relative poses of the two components in order to cover</c>
<c>* all possible relative poses in a later run-time image. The example further</c>
<c>* shows how the obtained pose parameters of the components can be</c>
<c>* used to evaluate object specific features, e.g., the opening angle and</c>
<c>* the shift extent of the pliers.</c>
<l>dev_update_off ()</l>
<l>dev_set_draw ('margin')</l>
<l>read_image (ModelImage, 'pipe_wrench/pipe_wrench_model')</l>
<l>get_image_size (ModelImage, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* Define the initial components</c>
<l>gen_rectangle2 (InitialComponentRegions, 298, 363, 1.17, 162, 34)</l>
<l>gen_rectangle2 (Rectangle2, 212, 233, 0.62, 167, 29)</l>
<l>gen_rectangle2 (Rectangle3, 63, 444, -0.26, 50, 27)</l>
<l>gen_rectangle2 (Rectangle4, 120, 473, 0, 33, 20)</l>
<l>concat_obj (InitialComponentRegions, Rectangle2, InitialComponentRegions)</l>
<l>concat_obj (InitialComponentRegions, Rectangle3, InitialComponentRegions)</l>
<l>concat_obj (InitialComponentRegions, Rectangle4, InitialComponentRegions)</l>
<l>dev_set_colored (12)</l>
<l>dev_display (ModelImage)</l>
<l>dev_display (InitialComponentRegions)</l>
<l>dev_set_color ('blue')</l>
<l>disp_message (WindowHandle, 'Model image and', 'window', 20, 20, 'blue', 'false')</l>
<l>disp_message (WindowHandle, 'input regions describing', 'window', 40, 20, 'blue', 'false')</l>
<l>disp_message (WindowHandle, 'the initial components', 'window', 60, 20, 'blue', 'false')</l>
<l>disp_message (WindowHandle, 'Press mouse button to continue', 'window', 450, 20, 'blue', 'false')</l>
<l>get_mbutton (WindowHandle, Row1, Column1, Button1)</l>
<c>* Get the training images</c>
<l>gen_empty_obj (TrainingImages)</l>
<l>for I := 1 to 4 by 1</l>
<l>    read_image (TrainingImage, 'pipe_wrench/pipe_wrench_training_' + I)</l>
<l>    concat_obj (TrainingImages, TrainingImage, TrainingImages)</l>
<l>    dev_display (TrainingImage)</l>
<l>    disp_message (WindowHandle, 'Training image ' + I + ' of 4', 'window', 20, 20, 'blue', 'false')</l>
<l>    disp_message (WindowHandle, 'Press mouse button to continue', 'window', 450, 20, 'blue', 'false')</l>
<l>    get_mbutton (WindowHandle, Row2, Column2, Button2)</l>
<l>endfor</l>
<c>* The component-based matching uses the contours of the components</c>
<c>* as features for the matching. In order to make sure that only significant</c>
<c>* features are involved in the matching the parameters ContrastLow,</c>
<c>* ContrastHigh, and MinSize can be passed to the training. To inspect the</c>
<c>* effect of different values for these three parameters, and hence to find</c>
<c>* the optimum values for a certain application the following, two lines of</c>
<c>* code can be used:</c>
<l>* add_channels (InitialComponentRegions, ModelImage, ModelImageInitComp)</l>
<l>* gen_initial_components (ModelImageInitComp, InitialComponentEdges, 22, 60, 30, 'connection', [], [])</l>
<c>* Extract the model components and train the relations</c>
<c>* (This may take a few seconds!)</c>
<l>dev_display (ModelImage)</l>
<l>disp_message (WindowHandle, 'Train the model components...', 'window', 20, 20, 'blue', 'false')</l>
<l>disp_message (WindowHandle, '(This may take a few seconds)', 'window', 40, 20, 'blue', 'false')</l>
<c>* Due to perspective distortions of the 3d object pseudo movements of the</c>
<c>* initial components are introduced. Consequently, if the cluster threshold is</c>
<c>* set to a high value three model components are extracted. However, since</c>
<c>* the pliers consist of two components the cluster threshold is set to a lower</c>
<c>* value of 0.4, which is sufficient to obtain two model components. Nevertheless,</c>
<c>* the score values that must be expected for the components during the search</c>
<c>* is small due to the perspective distortions. Hence, the minimum score must be</c>
<c>* set to a small value in order to avoid missing matches.</c>
<l>train_model_components (ModelImage, InitialComponentRegions, TrainingImages, ModelComponents, 22, 60, 30, 0.65, -1, -1, rad(60), 'speed', 'rigidity', 0.2, 0.3, ComponentTrainingID)</l>
<l>dev_set_color ('blue')</l>
<l>dev_display (ModelImage)</l>
<l>disp_message (WindowHandle, 'Result of the training:', 'window', 20, 20, 'blue', 'false')</l>
<l>disp_message (WindowHandle, '  1) Final model components', 'window', 40, 20, 'blue', 'false')</l>
<l>dev_set_colored (12)</l>
<l>get_training_components (ModelComponents, ComponentTrainingID, 'model_components', 'model_image', 'false', RowRef, ColumnRef, AngleRef, ScoreRef)</l>
<l>dev_display (ModelComponents)</l>
<l>disp_message (WindowHandle, 'Press mouse button to continue', 'window', 450, 20, 'blue', 'false')</l>
<l>get_mbutton (WindowHandle, Row3, Column3, Button3)</l>
<l>count_obj (ModelComponents, NumComp)</l>
<l>for I := 0 to NumComp - 1 by 1</l>
<l>    dev_set_color ('blue')</l>
<l>    dev_display (ModelImage)</l>
<l>    disp_message (WindowHandle, 'Result of the training:', 'window', 20, 20, 'blue', 'false')</l>
<l>    disp_message (WindowHandle, '  1) Final model components', 'window', 40, 20, 'blue', 'false')</l>
<l>    disp_message (WindowHandle, '  2) Relations with respect to component ' + I, 'window', 60, 20, 'blue', 'false')</l>
<l>    dev_set_colored (12)</l>
<l>    get_component_relations (Relations, ComponentTrainingID, I, 'model_image', Row, Column, Phi, Length1, Length2, AngleStart, AngleExtent)</l>
<l>    dev_display (Relations)</l>
<l>    disp_message (WindowHandle, 'Press mouse button to continue', 'window', 450, 20, 'blue', 'false')</l>
<l>    get_mbutton (WindowHandle, Row4, Column4, Button4)</l>
<l>endfor</l>
<c>* Create the component model based on the training result.</c>
<l>dev_set_color ('blue')</l>
<l>dev_display (ModelImage)</l>
<l>disp_message (WindowHandle, 'Create the component model...', 'window', 20, 20, 'blue', 'false')</l>
<l>create_trained_component_model (ComponentTrainingID, rad(-90), rad(180), 10, 0.6, 4, 'auto', 'none', 'use_polarity', 'false', ComponentModelID, RootRanking)</l>
<l>get_component_model_tree (Tree, Relations, ComponentModelID, RootRanking, 'model_image', StartNode, EndNode, Row, Column, Phi, Length1, Length2, AngleStart, AngleExtent)</l>
<l>dev_display (ModelImage)</l>
<l>disp_message (WindowHandle, 'Component model', 'window', 20, 20, 'blue', 'false')</l>
<l>dev_set_colored (12)</l>
<l>dev_display (Tree)</l>
<l>dev_display (Relations)</l>
<l>disp_message (WindowHandle, 'Press mouse button to continue', 'window', 450, 20, 'blue', 'false')</l>
<l>get_mbutton (WindowHandle, Row5, Column5, Button5)</l>
<l>wait_seconds (0.5)</l>
<l>clear_training_components (ComponentTrainingID)</l>
<c>* Find the component model in a run-time image</c>
<l>ImgNo := 1</l>
<l>Button := 0</l>
<l>dev_set_line_width (2)</l>
<l>while (Button != 1)</l>
<l>    if (ImgNo &gt; 4)</l>
<l>        read_image (SearchImage, 'pipe_wrench/pipe_wrench_' + (ImgNo - 4))</l>
<l>    else</l>
<c>        * For illustration purposes the pipe wrench is also searched</c>
<c>        * in the training images.</c>
<l>        read_image (SearchImage, 'pipe_wrench/pipe_wrench_training_' + ImgNo)</l>
<l>    endif</l>
<l>    count_seconds (Seconds1)</l>
<l>    find_component_model (SearchImage, ComponentModelID, RootRanking, rad(-90), rad(180), 0, 0, 1, 'stop_search', 'prune_branch', 'none', 0.6, 'least_squares', 0, 0.7, ModelStart, ModelEnd, Score, RowComp, ColumnComp, AngleComp, ScoreComp, ModelComp)</l>
<l>    count_seconds (Seconds2)</l>
<l>    dev_display (SearchImage)</l>
<l>    NumFound := |ModelStart|</l>
<l>    Time := (Seconds2 - Seconds1) * 1000</l>
<l>    if (NumFound)</l>
<l>        dev_set_color ('blue')</l>
<l>        disp_message (WindowHandle, 'Object found in ' + Time$'4.2f' + ' ms', 'window', 20, 20, 'blue', 'false')</l>
<l>        get_found_component_model (FoundComponents, ComponentModelID, ModelStart, ModelEnd, RowComp, ColumnComp, AngleComp, ScoreComp, ModelComp, 0, 'false', RowCompInst, ColumnCompInst, AngleCompInst, ScoreCompInst)</l>
<l>        dev_set_colored (12)</l>
<l>        dev_display (FoundComponents)</l>
<l>        visualize_pipe_wrench_match (AngleCompInst, WindowHandle, RowCompInst, ColumnCompInst, RowRef, ColumnRef)</l>
<l>    endif</l>
<l>    disp_message (WindowHandle, 'Press mouse button to stop', 'window', 450, 20, 'blue', 'false')</l>
<l>    ImgNo := ImgNo + 1</l>
<l>    if (ImgNo &gt; 8)</l>
<l>        ImgNo := 1</l>
<l>    endif</l>
<l>    dev_error_var (Error, 1)</l>
<l>    dev_set_check ('~give_error')</l>
<l>    get_mposition (WindowHandle, R, C, Button)</l>
<l>    dev_error_var (Error, 0)</l>
<l>    dev_set_check ('give_error')</l>
<l>    if (Error != H_MSG_TRUE)</l>
<l>        Button := 0</l>
<l>    endif</l>
<l>*     stop ()</l>
<l>endwhile</l>
<l>clear_component_model (ComponentModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="visualize_pipe_wrench_match">
<interface>
<ic>
<par name="AngleCompInst" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="RowCompInst" base_type="ctrl" dimension="0"/>
<par name="ColumnCompInst" base_type="ctrl" dimension="0"/>
<par name="RowRef" base_type="ctrl" dimension="0"/>
<par name="ColumnRef" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Length := 250</l>
<l>PosCol := 550</l>
<l>PosRow := 220</l>
<l>ColCent := 420</l>
<l>RowCent := 108</l>
<c>* Display first component</c>
<l>alpha1 := rad(34.7) + AngleCompInst[1]</l>
<l>c1_1 := PosCol + Length / 3. * cos(alpha1)</l>
<l>r1_1 := PosRow - Length / 3. * sin(alpha1)</l>
<l>c1_2 := PosCol - 2 * Length / 3. * cos(alpha1)</l>
<l>r1_2 := PosRow + 2 * Length / 3. * sin(alpha1)</l>
<l>gen_contour_polygon_xld (Contour1, [r1_1,r1_2], [c1_1,c1_2])</l>
<l>dev_set_color ('green')</l>
<l>dev_display (Contour1)</l>
<c>* Display second component</c>
<l>alpha2 := rad(61.7) + AngleCompInst[0]</l>
<l>c2_1 := PosCol + Length / 3. * cos(alpha2)</l>
<l>r2_1 := PosRow - Length / 3. * sin(alpha2)</l>
<l>c2_2 := PosCol - 2 * Length / 3. * cos(alpha2)</l>
<l>r2_2 := PosRow + 2 * Length / 3. * sin(alpha2)</l>
<l>gen_contour_polygon_xld (Contour2, [r2_1,r2_2], [c2_1,c2_2])</l>
<l>dev_set_color ('red')</l>
<l>dev_display (Contour2)</l>
<c>* Display opening angle</c>
<l>dev_set_color ('blue')</l>
<l>gen_ellipse_contour_xld (ContEllipse, PosRow, PosCol, 0, 80, 80, alpha1 + 3.1416, alpha2 + 3.1416, 'positive', 1.5)</l>
<l>dev_display (ContEllipse)</l>
<l>AngleOpen := deg(alpha2 - alpha1)</l>
<l>set_tposition (WindowHandle, PosRow + 170, PosCol - 220)</l>
<l>write_string (WindowHandle, 'Opening angle: ' + AngleOpen$'7.2f' + '°')</l>
<c>* Display shift extent</c>
<l>r1 := RowCompInst[1]</l>
<l>c1 := ColumnCompInst[1]</l>
<l>a1 := AngleCompInst[1]</l>
<l>vector_angle_to_rigid (RowRef[1], ColumnRef[1], 0, r1, c1, a1, HomMat2D)</l>
<l>affine_trans_point_2d (HomMat2D, RowCent, ColCent, RowCent_s, ColCent_s)</l>
<l>gen_circle (Circle, RowCent_s, ColCent_s, 10)</l>
<l>dr := RowCent_s - RowCompInst[0]</l>
<l>dc := ColCent_s - ColumnCompInst[0]</l>
<l>distance := (sqrt(dr * dr + dc * dc) - 72.9) / 52.7</l>
<l>gen_rectangle2 (Rectangle, PosRow + 60 * (distance - 0.5) * sin(alpha2), PosCol - 60 * (distance - 0.5) * cos(alpha2), alpha2, 35, 10)</l>
<l>gen_circle (Circle, PosRow, PosCol, 5)</l>
<l>dev_display (Rectangle)</l>
<l>dev_display (Circle)</l>
<l>set_tposition (WindowHandle, PosRow + 190, PosCol - 220)</l>
<l>write_string (WindowHandle, 'Shift extent [0;1]: ' + distance$'2.1f')</l>
<l>return ()</l>
</body>
<docu id="visualize_pipe_wrench_match">
<short lang="en_US">Display a generalized graphical model of the found pliers</short>
<parameters>
<parameter id="AngleCompInst"/>
<parameter id="ColumnCompInst"/>
<parameter id="ColumnRef"/>
<parameter id="RowCompInst"/>
<parameter id="RowRef"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
