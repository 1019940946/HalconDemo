<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Pattern matching with adaptation to illumination changes</c>
<c>* - Rotational invariant</c>
<c>* - Rotation/translation to "normalize" the input image</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>* Open the virtual image acquisition device</c>
<l>open_framegrabber ('File', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'pendulum/pendulum', 'default', -1, 1, AcqHandle)</l>
<l>grab_image (Image, AcqHandle)</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, Width + 12, Width, Height, 'black', WindowRot)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowID)</l>
<l>dev_set_window (WindowID)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_window (WindowRot)</l>
<l>dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>set_display_font (WindowID, 14, 'mono', 'true', 'false')</l>
<l>dev_display (Image)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<c>* ------------------------</c>
<c>* Define template</c>
<c>* ------------------------</c>
<l>Length1 := 32.0</l>
<l>Length2 := 12.5</l>
<l>PhiTempl := -0.315</l>
<l>RowTempl := 112.5</l>
<l>ColumnTempl := 92.0</l>
<l>copy_obj (Image, ImageTempl, 1, 1)</l>
<l>gen_rectangle2 (Rectangle, RowTempl, ColumnTempl, PhiTempl, Length1, Length2)</l>
<l>reduce_domain (Image, Rectangle, ImageReduced)</l>
<l>create_template_rot (ImageReduced, 4, 0, rad(360), rad(1), 'sort', 'original', TemplateID)</l>
<l>intensity (ImageReduced, Image, TemplMean, Deviation)</l>
<l>RowRot := Height / 2</l>
<l>ColumnRot := Width / 2</l>
<c>* ------------------------------------------</c>
<c>* Visualize normalized input image</c>
<c>* ------------------------------------------</c>
<l>hom_mat2d_translate (HomMat2DIdentity, RowRot - RowTempl, ColumnRot - ColumnTempl, HomMat2DTranslate)</l>
<l>hom_mat2d_rotate (HomMat2DTranslate, -PhiTempl, RowRot, ColumnRot, HomMat2DRotate)</l>
<l>affine_trans_image (ImageTempl, ImageAffinTrans, HomMat2DRotate, 'constant', 'false')</l>
<l>full_domain (ImageAffinTrans, ImageFull)</l>
<l>dev_set_window (WindowRot)</l>
<l>dev_display (ImageFull)</l>
<l>dev_set_window (WindowID)</l>
<l>dev_display (ImageTempl)</l>
<l>disp_message (WindowID, ['Run the template matching','(click in graphics window','to start and stop)'], 'image', -1, -1, 'black', 'true')</l>
<l>Button := 0</l>
<l>while (Button != 1)</l>
<l>    get_mbutton (WindowID, dummy, dummy, Button)</l>
<l>endwhile</l>
<l>dev_clear_window ()</l>
<l>wait_seconds (.5)</l>
<c>* ------------------------</c>
<c>* Pattern matching</c>
<c>* ------------------------</c>
<l>Button := 0</l>
<l>Exp := 1</l>
<l>while (Button != 1)</l>
<l>    grab_image (Image, AcqHandle)</l>
<l>    count_seconds (Seconds1)</l>
<l>    best_match_rot_mg (Image, TemplateID, 0, rad(360), 30, 'true', 4, Row, Column, Angle, ErrMatch)</l>
<l>    if (ErrMatch &lt; 255)</l>
<l>        gen_rectangle2 (Rectangle, Row, Column, PhiTempl + Angle, Length1, Length2)</l>
<l>        reduce_domain (Image, Rectangle, ImageReduced)</l>
<l>        intensity (ImageReduced, Image, Mean, Deviation)</l>
<l>        set_offset_template (TemplateID, Mean - TemplMean)</l>
<c>        * Compensate for rotation and translation</c>
<l>        hom_mat2d_translate (HomMat2DIdentity, RowRot - Row, ColumnRot - Column, HomMat2DTranslate)</l>
<l>        hom_mat2d_rotate (HomMat2DTranslate, -Angle, RowRot, ColumnRot, HomMat2DRotate)</l>
<l>        affine_trans_image (Image, ImageAffinTrans, HomMat2DRotate, 'constant', 'false')</l>
<l>        count_seconds (Seconds2)</l>
<l>        Time := 1000 * (Seconds2 - Seconds1)</l>
<l>        full_domain (ImageAffinTrans, ImageFull)</l>
<l>        dev_set_window (WindowRot)</l>
<l>        dev_display (ImageFull)</l>
<l>        dev_set_window (WindowID)</l>
<l>        dev_display (Image)</l>
<l>        disp_message (WindowID, Time$'4.2f' + ' ms', 'image', -1, -1, 'black', 'true')</l>
<l>        dev_set_color ('green')</l>
<l>        dev_display (Rectangle)</l>
<l>    else</l>
<l>        dev_display (Image)</l>
<l>    endif</l>
<c>    * --------------------------</c>
<c>    * Exit with mouse click</c>
<c>    * --------------------------</c>
<l>    dev_error_var (Error, 1)</l>
<l>    dev_set_check ('~give_error')</l>
<l>    get_mposition (WindowID, R, C, Button)</l>
<l>    dev_error_var (Error, 0)</l>
<l>    dev_set_check ('give_error')</l>
<l>    if (Error != H_MSG_TRUE)</l>
<l>        Button := 0</l>
<l>    endif</l>
<l>    wait_seconds (min2(Time * 1000,0.04))</l>
<l>endwhile</l>
<l>clear_template (TemplateID)</l>
<l>close_framegrabber (AcqHandle)</l>
<l>dev_update_on ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
