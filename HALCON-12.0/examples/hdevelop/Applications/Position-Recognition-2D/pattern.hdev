<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Online pattern matching</c>
<c>* *****************************************************************</c>
<c>* This example shows how to perform online pattern matching on</c>
<c>* images acquired by an image acquisition device.</c>
<c>* If the variable 'Online' is set to 'true' the images are acquired</c>
<c>* by the image acquisition device specified in open_framegrabber().</c>
<c>* Otherwise a virtual image acquisition device is used to read an</c>
<c>* image sequence.</c>
<c>* </c>
<c>* </c>
<l>dev_close_window ()</l>
<l>dev_update_off ()</l>
<c>* </c>
<c>* Open an image acquisition device</c>
<c>* -----------------------------------------------------------------</c>
<c>* If Online is set to 'true' the specified image acquisition device</c>
<c>* is opened. Otherwise a virtual image acquisition device is opened.</c>
<l>Online := false</l>
<l>if (Online)</l>
<l>    open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'default', 0, 0, AcqHandle)</l>
<l>else</l>
<l>    open_framegrabber ('File', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'card/card', '', 1, 2, AcqHandle)</l>
<l>endif</l>
<c>* </c>
<c>* Grab and display an image</c>
<l>grab_image (Image, AcqHandle)</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_display (Image)</l>
<c>* </c>
<c>* Set display settings</c>
<l>set_display_font (WindowHandle, 11, 'mono', 'true', 'false')</l>
<l>dev_set_color ('green')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<c>* </c>
<c>* Set up</c>
<l>if (Online)</l>
<l>    for Index := 0 to 100 by 1</l>
<l>        grab_image (Image, AcqHandle)</l>
<l>        dev_display (Image)</l>
<l>    endfor</l>
<l>endif</l>
<c>* </c>
<c>* Define a template for the pattern matching</c>
<c>* --------------------------------------------------------</c>
<c>* Define a pattern for the matching which is then further</c>
<c>* preprocessed for the template matching.</c>
<c>* For Online = true, a pattern is generated by drawing a rectangle.</c>
<c>* For Online = false, a default pattern is loaded.</c>
<l>if (Online)</l>
<c>    * </c>
<c>    * Generate a pattern</c>
<l>    draw_rectangle1 (WindowHandle, Row1, Column1, Row2, Column2)</l>
<l>    gen_rectangle1 (Rectangle, Row1, Column1, Row2, Column2)</l>
<l>    dev_display (Rectangle)</l>
<l>    reduce_domain (Image, Rectangle, ImageReduced)</l>
<l>    create_template (ImageReduced, 5, 4, 'sort', 'original', TemplateID)</l>
<l>else</l>
<c>    * </c>
<c>    * Load a default pattern</c>
<l>    Row1 := 164.5</l>
<l>    Row2 := 196.5</l>
<l>    Column1 := 152.5</l>
<l>    Column2 := 229.5</l>
<l>    gen_rectangle1 (Rectangle, Row1, Column1, Row2, Column2)</l>
<l>    dev_display (Rectangle)</l>
<l>    reduce_domain (Image, Rectangle, ImageReduced)</l>
<l>    create_template (ImageReduced, 5, 4, 'sort', 'original', TemplateID)</l>
<l>endif</l>
<l>disp_message (WindowHandle, 'Template for pattern matching', 'window', 10, 10, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Determine the half of template width and height</c>
<l>TemplateHeight2 := (Row2 - Row1 + 1) / 2</l>
<l>TemplateWidth2 := (Column2 - Column1 + 1) / 2</l>
<c>* </c>
<c>* Pattern matching</c>
<c>* ---------------------------------------------------------</c>
<c>* Grab an image and search for all matches of the template</c>
<c>* in the image. Then determine the best match and display</c>
<c>* the found template.</c>
<l>for Index := 0 to 80 by 1</l>
<c>    * </c>
<c>    * Grab and display an image for the matching</c>
<l>    if (Online)</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>    else</l>
<l>        grab_image (Image, AcqHandle)</l>
<l>    endif</l>
<l>    dev_display (Image)</l>
<c>    * </c>
<c>    * Search all matches of the template in the image and</c>
<c>    * return all points showing an error smaller than 40</c>
<l>    fast_match_mg (Image, Matches, TemplateID, 40, 3)</l>
<c>    * Determine the area and the center of the matching points</c>
<l>    area_center (Matches, Area, Row, Column)</l>
<l>    if (Area &gt; 0)</l>
<l>        dilation_circle (Matches, MergedMatches, 3.5)</l>
<l>        connection (MergedMatches, ConnMatches)</l>
<l>        add_channels (ConnMatches, Image, ImageMatches)</l>
<c>        * </c>
<c>        * Search the best match of the template and display</c>
<c>        * the found template</c>
<l>        best_match (ImageMatches, TemplateID, 25, 'true', Row, Column, Error)</l>
<l>        NumMatches := |Row|</l>
<l>        for I := 0 to NumMatches - 1 by 1</l>
<l>            if (Error[I] &lt; 255)</l>
<l>                disp_message (WindowHandle, 'Template found', 'window', 10, 10, 'black', 'true')</l>
<l>                disp_rectangle1 (WindowHandle, Row[I] - TemplateHeight2, Column[I] - TemplateWidth2, Row[I] + TemplateHeight2, Column[I] + TemplateWidth2)</l>
<l>            endif</l>
<l>        endfor</l>
<l>    endif</l>
<l>endfor</l>
<l>clear_template (TemplateID)</l>
<l>close_framegrabber (AcqHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
