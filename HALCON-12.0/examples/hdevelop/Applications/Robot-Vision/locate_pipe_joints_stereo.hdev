<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* Reconstruct the three-dimensional surface of a pile of pipe</c>
<c>* joints by using a multi-view stereo setup with four similar</c>
<c>* cameras and detect the position of each joint by using</c>
<c>* surface-based 3D matching</c>
<c>* </c>
<c>* </c>
<c>* *****</c>
<c>* Initializations:</c>
<c>* *****</c>
<c>* </c>
<l>dev_close_window ()</l>
<l>dev_update_off ()</l>
<l>dev_get_preferences ('suppress_handled_exceptions_dlg', PreferenceValue)</l>
<l>dev_set_preferences ('suppress_handled_exceptions_dlg', 'true')</l>
<l>ImagePath := '3d_machine_vision/multi_view/'</l>
<l>ImagePrefix := 'multi_view_pipe_joints'</l>
<l>read_image (Image, ImagePath + ImagePrefix + '_cam_0_01')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>dev_set_draw ('margin')</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* *****</c>
<c>* Part 1: Read the parameters of the multi-view stereo setup</c>
<c>* *****</c>
<c>* Read the camera setup model from file and get the parameters</c>
<c>* and the poses of the cameras</c>
<l>try</l>
<l>    read_camera_setup_model ('../../Calibration/Multi-View/four_camera_setup_model.csm', CameraSetupModelID)</l>
<l>catch (Exception)</l>
<l>    if (Exception[0] == 5200)</l>
<l>        init_camera_setup (CameraSetupModelID)</l>
<l>    else</l>
<l>        throw (Exception)</l>
<l>    endif</l>
<l>endtry</l>
<c>* </c>
<l>get_camera_setup_param (CameraSetupModelID, 'general', 'num_cameras', NumCameras)</l>
<l>get_camera_setup_param (CameraSetupModelID, 0, 'pose', Pose0)</l>
<l>get_camera_setup_param (CameraSetupModelID, 1, 'pose', Pose1)</l>
<l>get_camera_setup_param (CameraSetupModelID, 2, 'pose', Pose2)</l>
<l>get_camera_setup_param (CameraSetupModelID, 3, 'pose', Pose3)</l>
<l>get_camera_setup_param (CameraSetupModelID, 0, 'params', CamParam0)</l>
<l>get_camera_setup_param (CameraSetupModelID, 1, 'params', CamParam1)</l>
<l>get_camera_setup_param (CameraSetupModelID, 2, 'params', CamParam2)</l>
<l>get_camera_setup_param (CameraSetupModelID, 3, 'params', CamParam3)</l>
<c>* </c>
<c>* Create a multi-view stereo model, initialize it, and clear</c>
<c>* the camera setup, which is no longer required</c>
<l>create_stereo_model (CameraSetupModelID, 'surface_pairwise', [], [], StereoModelID)</l>
<l>clear_camera_setup_model (CameraSetupModelID)</l>
<c>* -&gt; Subsampling X, Y, Z</c>
<l>set_stereo_model_param (StereoModelID, 'sub_sampling_step', 3)</l>
<c>* -&gt; Interpolation aliasing by binocular image rectification</c>
<l>set_stereo_model_param (StereoModelID, 'rectif_interpolation', 'bilinear')</l>
<l>set_stereo_model_param (StereoModelID, 'rectif_sub_sampling', 1.2)</l>
<c>* -&gt; Binocular disparity parameters</c>
<l>set_stereo_model_param (StereoModelID, 'binocular_method', 'ncc')</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_num_levels', 1)</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_mask_width', 19)</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_mask_height', 19)</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_texture_thresh', 0)</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_score_thresh', 0.4)</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_filter', 'left_right_check')</l>
<l>set_stereo_model_param (StereoModelID, 'binocular_sub_disparity', 'interpolation')</l>
<c>* -&gt; Define bounding box and camera pairs</c>
<l>set_stereo_model_param (StereoModelID, 'bounding_box', [-0.2,-0.07,-0.075,0.2,0.07,-0.004])</l>
<l>set_stereo_model_image_pairs (StereoModelID, [0,2], [1,3])</l>
<c>* </c>
<c>* *****</c>
<c>* Part 2: Create a surface model of the pipe fittings to be matched</c>
<c>* *****</c>
<l>read_object_model_3d ('pipe_joint', 'm', [], [], PipeJointOM3DID, Status)</l>
<l>create_surface_model (PipeJointOM3DID, 0.03, [], [], PipeJointSMID)</l>
<c>* </c>
<c>* The next line is required in order to use the option</c>
<c>* 'hidden_surface_removal' in the operator</c>
<c>* project_object_model_3d (see below).</c>
<l>prepare_object_model_3d (PipeJointOM3DID, 'shape_based_matching_3d', 'true', [], [])</l>
<c>* </c>
<c>* *****</c>
<c>* Part 3: Reconstruct the surface of the pile of pipe fittings</c>
<c>*         and detect the position of up to MaxNumParts by using</c>
<c>*         surface-based 3D matching</c>
<c>* *****</c>
<l>NumMatches := 3</l>
<l>MinScore := .3</l>
<l>Params := ['num_matches','pose_ref_scoring_dist_rel','scene_normal_computation']</l>
<l>Values := [NumMatches,0.02,'mls']</l>
<l>Instructions[0] := 'Rotate: Left button'</l>
<l>Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>Instructions[2] := 'Move:   Ctrl  + left button'</l>
<c>* </c>
<l>pose_invert (Pose0, WorldPose0)</l>
<c>* </c>
<l>gen_empty_obj (EmptyObject)</l>
<l>NumImages := 15</l>
<l>for Index := 1 to NumImages by 1</l>
<c>    * </c>
<c>    * Read and display the images</c>
<l>    read_multi_view_stereo_images (Images, ImagePath, ImagePrefix, Index, NumCameras)</l>
<c>    * </c>
<c>    * Reconstruct the 3D scene (the pile of pipe fittings)</c>
<l>    Message := 'Performing the reconstruction...'</l>
<l>    display_multi_view_stereo_images (Images, WindowHandle)</l>
<l>    disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    count_seconds (T0)</l>
<l>    reconstruct_surface_stereo (Images, StereoModelID, PipeJointPileOM3DID)</l>
<l>    count_seconds (T1)</l>
<l>    ReconsTime := T1 - T0</l>
<c>    * </c>
<l>    PoseIn := [0.0,0.0,0.5,-30,0,180,0]</l>
<l>    if (Index == 1)</l>
<l>        visualize_object_model_3d (WindowHandle, PipeJointPileOM3DID, CamParam0, PoseIn, ['color','point_size'], ['yellow',1], 'Reconstructed scene in ' + ReconsTime$'.3' + ' s', [], Instructions, PoseOut)</l>
<l>    endif</l>
<c>    * </c>
<c>    * Perform surface-based 3D matching</c>
<l>    Message := 'Search ' + NumMatches + ' best parts with surface based matching...'</l>
<l>    disp_message (WindowHandle, Message, 'window', 36, 12, 'black', 'true')</l>
<l>    count_seconds (T2)</l>
<l>    find_surface_model (PipeJointSMID, PipeJointPileOM3DID, 0.03, 0.05, MinScore, 'false', Params, Values, Poses, Scores, SurfaceMatchingResultID)</l>
<l>    count_seconds (T3)</l>
<l>    MatchingDiff := T3 - T2</l>
<c>    * </c>
<c>    * Display the results</c>
<l>    set_system ('flush_graphic', 'false')</l>
<l>    select_obj (Images, Img, 1)</l>
<l>    dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>    dev_display (Img)</l>
<l>*     count_seconds (T4)</l>
<l>    for MatchIndex := 0 to |Scores| - 1 by 1</l>
<l>        PoseObjInWorld := Poses[MatchIndex * 7:(MatchIndex * 7) + 6]</l>
<l>        pose_invert (PoseObjInWorld, PoseWorldInObj)</l>
<l>        pose_compose (PoseWorldInObj, Pose0, PoseCamInObj)</l>
<l>        pose_invert (PoseCamInObj, ObjPoseInCam0)</l>
<c>        * Display the coordinate system of the part</c>
<l>        dev_set_colored (3)</l>
<l>        dev_set_line_width (3)</l>
<l>        disp_3d_coord_system (WindowHandle, CamParam0, ObjPoseInCam0, 0.03)</l>
<c>        * Display the faces of the part</c>
<l>        rigid_trans_object_model_3d (PipeJointOM3DID, PoseObjInWorld, ObjectModel3DRigidTrans)</l>
<l>        project_object_model_3d (ModelContours, ObjectModel3DRigidTrans, CamParam0, WorldPose0, ['data','hidden_surface_removal'], ['faces','true'])</l>
<l>        dev_set_line_width (2)</l>
<l>        dev_set_color ('green')</l>
<l>        dev_display (ModelContours)</l>
<c>        * </c>
<l>        clear_object_model_3d (ObjectModel3DRigidTrans)</l>
<l>    endfor</l>
<l>    set_system ('flush_graphic', 'true')</l>
<l>*     count_seconds (T5)</l>
<l>*     DispTime := T5 - T4</l>
<c>    * </c>
<l>    Message := 'Reconstruction: ' + ReconsTime$'.2f' + ' s'</l>
<l>    Message[1] := 'Found ' + |Scores| + ' pipe joint(s) in ' + MatchingDiff$'.2f' + ' s'</l>
<l>*     Message[2] := 'Visualization: ' + DispTime$'.1f' + ' s'</l>
<l>    disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandle, 'Camera 0', 'window', Height - 36, 12, 'white', 'false')</l>
<l>    if (Index &lt; NumImages)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<c>    * </c>
<c>    * clear the 3D object model</c>
<l>    clear_object_model_3d (PipeJointPileOM3DID)</l>
<l>    copy_obj (Images, OldImage, 1, 1)</l>
<l>endfor</l>
<c>* </c>
<c>* Clear the stereo model and the surface model</c>
<l>clear_stereo_model (StereoModelID)</l>
<l>clear_surface_model (PipeJointSMID)</l>
<l>clear_object_model_3d (PipeJointOM3DID)</l>
<l>dev_set_preferences ('suppress_handled_exceptions_dlg', PreferenceValue)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="read_multi_view_stereo_images">
<interface>
<oo>
<par name="Images" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ImagePath" base_type="ctrl" dimension="0"/>
<par name="ImagePrefix" base_type="ctrl" dimension="0"/>
<par name="SceneIndex" base_type="ctrl" dimension="0"/>
<par name="NumCamera" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Read the images of the multi-view stereo setup</c>
<c>* </c>
<l>read_image (Images, ImagePath + ImagePrefix + '_cam_0_' + SceneIndex$'.02')</l>
<l>for Index := 1 to NumCamera - 1 by 1</l>
<l>    read_image (Img, ImagePath + ImagePrefix + '_cam_' + Index + '_' + SceneIndex$'.02')</l>
<l>    concat_obj (Images, Img, Images)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="read_multi_view_stereo_images">
<parameters>
<parameter id="ImagePath"/>
<parameter id="ImagePrefix"/>
<parameter id="Images"/>
<parameter id="NumCamera"/>
<parameter id="SceneIndex"/>
</parameters>
</docu>
</procedure>
<procedure name="display_multi_view_stereo_images">
<interface>
<io>
<par name="Images" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Display the images of a multi-view stereo setup</c>
<c>* consisting of four cameras</c>
<c>* </c>
<l>dev_set_window (WindowHandle)</l>
<c>* </c>
<l>count_obj (Images, NumImages)</l>
<l>if (NumImages != 4)</l>
<l>    disp_message (WindowHandle, 'Wrong number of images provided!', 'window', 12, 12, 'black', 'true')</l>
<l>    stop ()</l>
<l>endif</l>
<c>* </c>
<l>NumCols := 2</l>
<l>select_obj (Images, Img, 1)</l>
<l>get_image_size (Img, Width, Height)</l>
<l>tile_images (Images, TiledImage, NumCols, 'horizontal')</l>
<l>dev_set_part (0, 0, (2 * Height) - 1, (2 * Width) - 1)</l>
<l>dev_display (TiledImage)</l>
<c>* </c>
<l>for Index := 0 to NumImages - 1 by 1</l>
<l>    RowIdx := (Index / NumCols) + 1</l>
<l>    ColIdx := Index % NumCols</l>
<l>    disp_message (WindowHandle, 'Camera ' + Index, 'image', (RowIdx * Height) - 72, (ColIdx * Width) + 12, 'white', 'false')</l>
<l>endfor</l>
<l>return ()</l>
<c>* </c>
</body>
<docu id="display_multi_view_stereo_images">
<parameters>
<parameter id="Images"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="init_camera_setup">
<interface>
<oc>
<par name="CameraSetupModelID" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Define the internal and external camera parameters</c>
<l>CamParam0 := [0.00850373,4008.61,-2.95892e+008,2.37315e+013,0.139749,-0.00367983,5.99965e-006,6e-006,362.715,236.769,752,480]</l>
<l>CamParam1 := [0.00854019,3445.26,-1.18075e+008,6.40715e+012,-0.0527818,-0.192439,5.99894e-006,6e-006,406.13,254.15,752,480]</l>
<l>CamParam2 := [0.00852569,3938.44,-2.75967e+008,2.27295e+013,0.231091,0.193667,6.00001e-006,6e-006,367.159,242.477,752,480]</l>
<l>CamParam3 := [0.00853794,3793.19,-3.49193e+008,3.9611e+013,0.0264028,0.147156,6.00169e-006,6e-006,397.066,224.671,752,480]</l>
<c>* </c>
<l>Pose0 := [0.0496073,0.0280127,-0.431281,3.5466,354.117,179.758,0]</l>
<l>Pose1 := [0.0495484,-0.0297644,-0.429654,355.333,354.014,359.147,0]</l>
<l>Pose2 := [-0.0411315,-0.0294687,-0.427325,355.519,4.45356,359.876,0]</l>
<l>Pose3 := [-0.0414501,0.0288074,-0.429167,2.94179,4.59538,179.173,0]</l>
<c>* </c>
<c>* Create a camera setup model and set its parameters</c>
<l>create_camera_setup_model (4, CameraSetupModelID)</l>
<c>* </c>
<l>set_camera_setup_cam_param (CameraSetupModelID, 0, 'area_scan_polynomial', CamParam0, Pose0)</l>
<l>set_camera_setup_cam_param (CameraSetupModelID, 1, 'area_scan_polynomial', CamParam1, Pose1)</l>
<l>set_camera_setup_cam_param (CameraSetupModelID, 2, 'area_scan_polynomial', CamParam2, Pose2)</l>
<l>set_camera_setup_cam_param (CameraSetupModelID, 3, 'area_scan_polynomial', CamParam3, Pose3)</l>
<l>return ()</l>
</body>
<docu id="init_camera_setup">
<parameters>
<parameter id="CameraSetupModelID"/>
</parameters>
</docu>
</procedure>
</hdevelop>
