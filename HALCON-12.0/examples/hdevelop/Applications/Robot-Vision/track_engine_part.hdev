<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>* This example shows how to efficiently perform a tracking task using</c>
<c>* perspective deformable matching. The basic idea is to speed up the</c>
<c>* search by using the pose that was determined in a previous image to</c>
<c>* restrict the search space in the next image. In case that the</c>
<c>* algorithm looses track of the object, the search is applied</c>
<c>* again, but this time in the full search domain.</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_get_preferences ('suppress_handled_exceptions_dlg', PreferenceValue)</l>
<l>dev_close_window ()</l>
<l>read_image (Image, 'automotive/engine_part_001')</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>dev_set_line_width (3)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_display (Image)</l>
<c>* </c>
<c>* Search parameters</c>
<l>AngleExtent := 90</l>
<l>AngleExtentTracking := 20</l>
<l>MinScore := 0.4</l>
<l>MinScoreTracking := 0.5</l>
<l>TrackingRadius := 80</l>
<l>ScaleROffset := 0.1</l>
<l>ScaleCOffset := 0.0</l>
<l>Metric := 'use_polarity'</l>
<l>CamParam := [12.0 / 1000,0.0,(4.65 / 1000000) * 2,(4.65 / 1000000) * 2,320,256,640,512]</l>
<c>* </c>
<l>read_region (Region, 'automotive/engine_part_model_region')</l>
<l>area_center (Region, Area, Row, Column)</l>
<l>reduce_domain (Image, Region, ImageReduced)</l>
<l>create_planar_uncalib_deformable_model (ImageReduced, 'auto', rad(-AngleExtent / 2.0), rad(AngleExtent), 'auto', 1, 1 + ScaleROffset, 'auto', 1, 1 + ScaleCOffset, 'auto', 'none', Metric, 'auto', 'auto', [], [], ModelID)</l>
<l>set_deformable_model_origin (ModelID, -Row, -Column)</l>
<l>get_deformable_model_contours (Contours, ModelID, 1)</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('green')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Contours)</l>
<l>disp_message (WindowHandle, 'Model created', 'window', 12, 12, 'black', 'true')</l>
<l>gen_circle (Circle, Row, Column, TrackingRadius)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<l>Score := []</l>
<l>select_obj (Contours, ObjectSelected, 1)</l>
<l>get_contour_xld (ObjectSelected, RowOrig, ColOrig)</l>
<l>NotFound := []</l>
<l>TrackingFailed := []</l>
<l>NumImages := 100</l>
<l>for Index := 1 to NumImages by 1</l>
<l>    wait_seconds (0.05)</l>
<l>    TrackingTime := 0</l>
<l>    read_image (Image, 'automotive/engine_part_' + Index$'03')</l>
<c>    * Either it is the first image, and one needs to perform full search,</c>
<c>    * or else the algorithm lost track of the object, and needs to start</c>
<c>    * all over again</c>
<l>    dev_set_preferences ('suppress_handled_exceptions_dlg', 'true')</l>
<l>    if (|Score| &gt; 0)</l>
<c>        * Keep track of the object: project the image with the pose that the object had</c>
<c>        * in the previous image. The assumption is that the pose does not change much</c>
<c>        * from image to image (see parameter AngleExtentTracking). Update the pose after</c>
<c>        * successful search</c>
<l>        try</l>
<l>            count_seconds (S1)</l>
<l>            hom_mat2d_invert (HomMat2D, HomMat2DInvert)</l>
<l>            projective_trans_image (Image, TransImage, HomMat2DInvert, 'bilinear', 'false', 'false')</l>
<l>            reduce_domain (TransImage, Circle, ImageReduced)</l>
<l>            find_planar_uncalib_deformable_model (TransImage, ModelID, rad(-AngleExtentTracking / 2), rad(AngleExtentTracking), 1, 1, 1, 1, MinScoreTracking, 1, 1, 0, 0.9, [], [], HomMat2DTrack, Score)</l>
<l>            count_seconds (S2)</l>
<l>            dev_set_color ('green')</l>
<l>            hom_mat2d_compose (HomMat2D, HomMat2DTrack, HomMat2D)</l>
<l>            projective_trans_contour_xld (Contours, ContoursProjTrans, HomMat2D)</l>
<l>            projective_trans_pixel (HomMat2D, [Row - 1,Row - 1,Row + 1,Row + 1], [Column - 2,Column + 1,Column + 1,Column - 1], RowTrans, ColTrans)</l>
<l>            vector_to_pose ([-2,1,1,-1], [-1,-1,1,1], [], RowTrans, ColTrans, CamParam, 'planar_analytic', 'error', Pose, Quality)</l>
<l>            pose_to_hom_mat3d (Pose, HomMat3D)</l>
<l>        catch (Exception)</l>
<l>            TrackingTime := S2 - S1</l>
<l>            TrackingFailed := [TrackingFailed,Index]</l>
<l>        endtry</l>
<l>    endif</l>
<l>    if (|Score| == 0)</l>
<c>        * Still no object found. Try full search.</c>
<l>        try</l>
<l>            count_seconds (S1)</l>
<l>            find_planar_uncalib_deformable_model (Image, ModelID, rad(-AngleExtent / 2.0), rad(AngleExtent), 1, 1 + ScaleROffset, 1, 1 + ScaleCOffset, MinScore, 1, 1, 0, 0.9, [], [], HomMat2D, Score)</l>
<l>            count_seconds (S2)</l>
<l>            projective_trans_contour_xld (Contours, ContoursProjTrans, HomMat2D)</l>
<l>            projective_trans_pixel (HomMat2D, [Row - 1,Row - 1,Row + 1,Row + 1], [Column - 2,Column + 1,Column + 1,Column - 1], RowTrans, ColTrans)</l>
<l>            vector_to_pose ([-2,1,1,-1], [-1,-1,1,1], [], RowTrans, ColTrans, CamParam, 'planar_analytic', 'error', Pose, Quality)</l>
<l>            dev_set_color ('green')</l>
<l>        catch (Exception)</l>
<l>            set_system ('flush_graphic', 'true')</l>
<l>            dev_display (Image)</l>
<l>            NotFound := [NotFound,Index]</l>
<l>            continue</l>
<l>        endtry</l>
<l>    endif</l>
<l>    dev_set_preferences ('suppress_handled_exceptions_dlg', PreferenceValue)</l>
<l>    dev_display (Image)</l>
<l>    dev_display (ContoursProjTrans)</l>
<l>    disp_message (WindowHandle, 'Model found in ' + ((TrackingTime + S2 - S1) * 1000)$'.3' + ' ms', 'window', 12, 12, 'white', 'false')</l>
<l>    set_system ('flush_graphic', 'true')</l>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, CamParam, Pose, 100)</l>
<l>endfor</l>
<c>* </c>
<l>clear_deformable_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
