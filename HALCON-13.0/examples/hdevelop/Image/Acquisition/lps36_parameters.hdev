<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Example for the usage of the LPS36 interface</c>
<c>* (query current parameter settings)</c>
<c>* </c>
<c>* Adapt the following setting</c>
<l>IP := '192.168.60.3'</l>
<c>* </c>
<c>* </c>
<l>get_system ('do_low_error', LowErrorFlag)</l>
<l>if (LowErrorFlag == 'true')</l>
<l>    set_system ('do_low_error', 'false')</l>
<l>endif</l>
<c>* </c>
<l>info_framegrabber ('LPS36', 'info_boards', InfoBoardsInfo, InfoBoardsValues)</l>
<l>info_framegrabber ('LPS36', 'defaults', DefaultsInfo, DefaultsValues)</l>
<l>info_framegrabber ('LPS36', 'general', GeneralInfo, GeneralValues)</l>
<l>info_framegrabber ('LPS36', 'parameters', ParametersInfo, ParametersValues)</l>
<l>info_framegrabber ('LPS36', 'revision', RevisionInfo, RevisionValues)</l>
<c>* </c>
<l>info_framegrabber ('LPS36', 'bits_per_channel', BitsPerChannelInfo, BitsPerChannelValues)</l>
<l>info_framegrabber ('LPS36', 'camera_type', CameraTypesInfo, CameraTypesValues)</l>
<l>info_framegrabber ('LPS36', 'color_space', ColorSpaceInfo, ColorSpaceValues)</l>
<l>info_framegrabber ('LPS36', 'device', DeviceInfo, DeviceValues)</l>
<l>info_framegrabber ('LPS36', 'external_trigger', ExternalTriggerInfo, ExternalTriggerValues)</l>
<l>info_framegrabber ('LPS36', 'port', PortInfo, PortValues)</l>
<c>* </c>
<l as_id="image_aquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">open_framegrabber ('LPS36', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', IP, -1, -1, AcqHandle)</l>
<c>* </c>
<c>* query all available parameter names and sort them:</c>
<l>tuple_sort (ParametersValues, ParameterInfoValues)</l>
<c>* </c>
<c>* open graphics window for parameter output:</c>
<l>dev_close_window ()</l>
<l>ImageHeight := 12 * |ParameterInfoValues| + 20</l>
<l>dev_open_window (0, 0, 400, 12 + ImageHeight / 2, 'black', WindowHandle)</l>
<l>dev_set_part (0, 0, (12 + ImageHeight / 2) - 1, 399)</l>
<c>* </c>
<c>* query all current parameter values:</c>
<l>dev_set_check ('~give_error')</l>
<l>dev_error_var (HalconError, 1)</l>
<l>for i := 0 to |ParameterInfoValues| - 1 by 1</l>
<l>    dev_set_color ('white')</l>
<l>    set_tposition (WindowHandle, (12 * i) + 2, 10)</l>
<l>    write_string (WindowHandle, ParameterInfoValues[i] + ': ')</l>
<l>    get_framegrabber_param (AcqHandle, ParameterInfoValues[i], ParameterValue)</l>
<l>    ShowValue := true</l>
<l>    if (strlen(ParameterInfoValues[i]) &gt; 2)</l>
<l>        if (ParameterInfoValues[i]{0:2} == 'do_')</l>
<l>            write_string (WindowHandle, '&lt;action parameter&gt;')</l>
<l>            ShowValue := false</l>
<l>        endif</l>
<l>    endif</l>
<l>    if ((ShowValue == true) and (HalconError == H_MSG_TRUE))</l>
<l>        dev_set_color ('green')</l>
<l>        if (|ParameterValue| &gt; 1)</l>
<l>            for j := 0 to |ParameterValue| - 2 by 1</l>
<l>                write_string (WindowHandle, ParameterValue[j] + ',')</l>
<l>            endfor</l>
<l>            write_string (WindowHandle, ParameterValue[j + 1])</l>
<l>        else</l>
<l>            if (|ParameterValue| == 1)</l>
<l>                write_string (WindowHandle, ParameterValue)</l>
<l>            else</l>
<l>                dev_set_color ('red')</l>
<l>                write_string (WindowHandle, '&lt;not supported&gt;')</l>
<l>            endif</l>
<l>        endif</l>
<l>    else</l>
<l>        if (ShowValue == true)</l>
<l>            dev_set_color ('red')</l>
<l>            write_string (WindowHandle, '&lt;not supported&gt;')</l>
<l>        endif</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<l>set_system ('do_low_error', LowErrorFlag)</l>
<c>* </c>
<l>close_framegrabber (AcqHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
