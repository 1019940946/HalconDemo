<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Example to demonstrate the possibilities of the HALCON NxLib interface.</c>
<c>* First, the user has to spefify the target he wants to observe. If done,</c>
<c>* the 3D Object Model will be displayed.</c>
<c>* </c>
<l>info_framegrabber ('Ensenso-NxLib', 'revision', Information, BoardInfo)</l>
<c>* </c>
<c>* Open the first device.</c>
<l>open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '', 0, -1, AcqHandle)</l>
<c>* </c>
<c>* Set the tree items returned when calling 'grab_data'</c>
<l>set_framegrabber_param (AcqHandle, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])</l>
<c>* </c>
<c>* ************************************************</c>
<c>* Window Setup</c>
<c>* ************************************************</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>dev_close_window ()</l>
<l>grab_data (Images, Region, Contours, AcqHandle, Data)</l>
<l>select_obj (Images, XYZImage, 3)</l>
<l>dev_open_window_fit_image (XYZImage, 0, 0, -1, -1, WindowHandle2D)</l>
<l>access_channel (XYZImage, ImageDepth, 3)</l>
<l>dev_open_window_fit_image (ImageDepth, 0, 640 + 5, -1, -1, WindowHandle3D)</l>
<c>* </c>
<c>* Mode: 0=Wait for model segmentation, 1=Matching</c>
<c>* </c>
<l>Mode := 0</l>
<c>* ************************************************</c>
<c>* Camera / Sensor setup</c>
<c>* ************************************************</c>
<l>OldButton := 0</l>
<l>count_seconds (LastSnapshot)</l>
<l>while (true)</l>
<l>    grab_data (Images, Region, Contours, AcqHandle, Data)</l>
<c>    * </c>
<l>    select_obj (Images, SensorImage, 1)</l>
<l>    access_channel (SensorImage, X, 1)</l>
<c>    * </c>
<l>    select_obj (Images, XYZImage, 3)</l>
<l>    access_channel (XYZImage, X, 1)</l>
<l>    access_channel (XYZImage, Y, 2)</l>
<l>    access_channel (XYZImage, Z, 3)</l>
<l>    threshold (Z, Region, 1, 1e90)</l>
<c>    * </c>
<l>    reduce_domain (X, Region, Xr)</l>
<l>    reduce_domain (Y, Region, Yr)</l>
<l>    reduce_domain (Z, Region, Zr)</l>
<l>    reduce_domain (ImageDepth, Region, Image3D)</l>
<c>    * </c>
<l>    get_image_size (Zr, Width, Height)</l>
<c>    * </c>
<l>    PerfomNewCalibration := false</l>
<l>    if (PerfomNewCalibration)</l>
<l>        get_region_points (Zr, Rows, Columns)</l>
<l>        get_grayval (X, Rows, Columns, Gx)</l>
<l>        get_grayval (Y, Rows, Columns, Gy)</l>
<l>        get_grayval (Z, Rows, Columns, Gz)</l>
<l>        camera_calibration (Gx, Gy, Gz, Rows, Columns, CameraParam, NFinalPose, 'all', CameraParam, NFinalPose, Errors)</l>
<l>    else</l>
<l>        gen_cam_par_area_scan_division (0.00131841, 0.053708, 1e-006, 1e-006, 206.205, 249.606, 752, 480, CameraParam)</l>
<l>        NFinalPose := [5.30794e-007,1.0314e-006,1.85819e-005,7.83872e-007,360.0,2.91871e-008,0]</l>
<l>    endif</l>
<c>    * </c>
<c>    * </c>
<l>    if (Mode == 0)</l>
<l>        dev_set_window (WindowHandle2D)</l>
<l>        dev_display (Z)</l>
<l>        disp_message (WindowHandle2D, 'RGB/IR Image', 'window', 12, 12, 'black', 'true')</l>
<c>        * </c>
<l>        dev_set_window (WindowHandle3D)</l>
<l>        dev_display (Z)</l>
<l>        disp_message (WindowHandle3D, 'Z Image', 'window', 12, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandle3D, 'Click here to segment your object', 'window', 12 + 24, 12, 'black', 'true')</l>
<c>        * </c>
<l>        try</l>
<l>            get_mposition (WindowHandle3D, Row, Column, Button)</l>
<l>            if (Button != OldButton)</l>
<c>                * Start segmenting</c>
<l>                segment_object (X, Y, Z, Region, WindowHandle3D)</l>
<c>                * </c>
<l>                dev_clear_window ()</l>
<l>                dev_display (Z)</l>
<l>                dev_display (Region)</l>
<l>                disp_message (WindowHandle3D, 'Creating surface model, please wait...', 'window', 12, 12, 'black', 'true')</l>
<l>                reduce_domain (X, Region, Xmodel)</l>
<l>                reduce_domain (Y, Region, Ymodel)</l>
<l>                reduce_domain (Z, Region, Zmodel)</l>
<c>                * </c>
<l>                xyz_to_object_model_3d (Xmodel, Ymodel, Zmodel, OM3DModel)</l>
<l>                create_surface_model (OM3DModel, 0.03, [], [], SurfaceModelID)</l>
<l>                clear_object_model_3d (OM3DModel)</l>
<c>                * </c>
<c>                * Create a mesh for display</c>
<l>                Factor := 0.15</l>
<c>                * Mask remaining data, otherwise zoom_image_factor produces artefacts</c>
<l>                complement (Region, RegionComplement)</l>
<l>                overpaint_region (Zmodel, RegionComplement, 0, 'fill')</l>
<c>                * </c>
<l>                zoom_image_factor (Xmodel, Xdisp, Factor, Factor, 'none')</l>
<l>                zoom_image_factor (Ymodel, Ydisp, Factor, Factor, 'none')</l>
<l>                zoom_image_factor (Zmodel, Zdisp, Factor, Factor, 'none')</l>
<l>                threshold (Zdisp, RGood, 0.0001, 400)</l>
<l>                reduce_domain (Xdisp, RGood, Xdisp)</l>
<l>                xyz_to_object_model_3d (Xdisp, Ydisp, Zdisp, OM3DDisplay)</l>
<l>                prepare_object_model_3d (OM3DDisplay, 'segmentation', 'true', [], [])</l>
<c>                * </c>
<l>                Mode := 1</l>
<l>            endif</l>
<l>        catch (Exception)</l>
<l>*             stop ()</l>
<l>        endtry</l>
<l>    else</l>
<c>        * Mode=1: Matching</c>
<l>        threshold (Zr, RClose, 300, 400)</l>
<l>        reduce_domain (Xr, RClose, Xclose)</l>
<l>        xyz_to_object_model_3d (Xclose, Yr, Zr, OM3DScene)</l>
<l>        find_surface_model (SurfaceModelID, OM3DScene, 0.05, 0.2, 0.2, 'false', [], [], Pose, Score, SurfaceMatchingResultID)</l>
<c>        * </c>
<c>        * Display</c>
<l>        dev_set_window (WindowHandle2D)</l>
<l>        dev_display (SensorImage)</l>
<l>        disp_message (WindowHandle2D, 'RGB/IR Image', 'window', 12, 12, 'black', 'true')</l>
<c>        * </c>
<l>        dev_set_window (WindowHandle3D)</l>
<l>        dev_display (Z)</l>
<l>        disp_message (WindowHandle3D, 'Z Image', 'window', 12, 12, 'black', 'true')</l>
<c>        * </c>
<l>        for ResultIdx := 0 to |Score| - 1 by 1</l>
<l>            CurrPose := Pose[ResultIdx * 7:ResultIdx * 7 + 6]</l>
<c>            * </c>
<c>            * Show the model with the region</c>
<l>            project_object_model_3d (ModelContours, OM3DDisplay, CameraParam, CurrPose, [], [])</l>
<l>            dev_set_window (WindowHandle3D)</l>
<l>            if (Score[ResultIdx] &gt; 0.5)</l>
<l>                dev_set_color ('green')</l>
<l>            else</l>
<l>                dev_set_color ('yellow')</l>
<l>            endif</l>
<l>            dev_display (ModelContours)</l>
<c>            * </c>
<c>            * Show the model in sensor image</c>
<l>            dev_set_window (WindowHandle2D)</l>
<l>            if (Score[ResultIdx] &gt; 0.5)</l>
<l>                dev_set_color ('green')</l>
<l>            else</l>
<l>                dev_set_color ('yellow')</l>
<l>            endif</l>
<l>            dev_display (ModelContours)</l>
<c>            * </c>
<l>        endfor</l>
<l>        clear_object_model_3d (OM3DScene)</l>
<l>    endif</l>
<l>endwhile</l>
<c>* </c>
<l>stop ()</l>
<l>close_framegrabber (AcqHandle)</l>
<l>clear_object_model_3d (OM3DDisplay)</l>
<l>clear_surface_model (SurfaceModelID)</l>
<c>* </c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="segment_object">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Region" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>dev_set_window (WindowHandle)</l>
<l>dev_set_preferences ('graphics_window_context_menu', 'false')</l>
<c>* </c>
<l>get_image_size (Z, Width, Height)</l>
<l>dev_open_window (0, Width + 5, Width, Height + 24 * 3, 'black', WindowHandle2)</l>
<l>dev_open_window (0, 0, Width, Height + 24 * 3, 'black', WindowHandleBuffer)</l>
<l>dev_set_part (0, 0, Height + 24 * 3, Width)</l>
<l>dev_set_line_width (2)</l>
<c>* </c>
<l>threshold (Z, Region, 0.001, 99999)</l>
<c>* </c>
<c>* Set initial parameters</c>
<l>min_max_gray (X, X, 0, MinX, MaxX, RangeX)</l>
<l>min_max_gray (Y, Y, 0, MinY, MaxY, RangeY)</l>
<l>min_max_gray (Region, Z, 0, MinZ, MaxZ, RangeZ)</l>
<l>min_max_gray (Z, Z, 0, MinZAll, MaxZAll, RangeZAll)</l>
<l>AllMin := min([MinX,MinY,MinZ])</l>
<l>AllMax := max([MaxX,MaxY,MaxZ])</l>
<l>ScaleX := Width * 1.0 / RangeX</l>
<l>ScaleY := Height * 1.0 / RangeY</l>
<l>ScaleZ := (Width + Height) * 1.0 / RangeZ</l>
<c>* </c>
<l>Border := 0.1</l>
<l>TXMin := MinX + RangeX * Border</l>
<l>TXMax := MinX + RangeX * (1 - Border)</l>
<l>TYMin := MinY + RangeY * Border</l>
<l>TYMax := MinY + RangeY * (1 - Border)</l>
<l>TZMin := MinZ + RangeZ * Border</l>
<l>TZMax := MinZ + RangeZ * (1 - Border)</l>
<c>* </c>
<l>LastButton := 0</l>
<c>* 0=Wait, 1=Drag</c>
<l>Mode := 0</l>
<c>* </c>
<l>dev_update_off ()</l>
<l>while (1)</l>
<c>    * Update screen</c>
<c>    * Color the scene according to the selected regions</c>
<c>    * Gray = Unselected</c>
<c>    * Red = Selected</c>
<c>    * Other = Partially selected</c>
<l>    dev_set_window (WindowHandleBuffer)</l>
<c>    * </c>
<l>    threshold (X, RegionX, TXMin, TXMax)</l>
<l>    threshold (Y, RegionY, TYMin, TYMax)</l>
<l>    threshold (Z, RegionZ, TZMin, TZMax)</l>
<l>    complement (RegionX, RegionComplementX)</l>
<l>    complement (RegionY, RegionComplementY)</l>
<l>    complement (RegionZ, RegionComplementZ)</l>
<c>    * </c>
<l>    intersection (RegionX, RegionY, RXY)</l>
<l>    intersection (RXY, RegionComplementZ, RXY)</l>
<l>    intersection (RegionX, RegionZ, RXZ)</l>
<l>    intersection (RXZ, RegionComplementY, RXZ)</l>
<l>    intersection (RegionY, RegionZ, RYZ)</l>
<l>    intersection (RYZ, RegionComplementX, RYZ)</l>
<c>    * </c>
<l>    intersection (RegionX, RegionY, RXYZ)</l>
<l>    intersection (RXYZ, RegionZ, RXYZ)</l>
<c>    * </c>
<l>    intersection (RegionX, RegionComplementY, RX)</l>
<l>    intersection (RX, RegionComplementZ, RX)</l>
<l>    intersection (RegionY, RegionComplementX, RY)</l>
<l>    intersection (RY, RegionComplementZ, RY)</l>
<l>    intersection (RegionZ, RegionComplementX, RZ)</l>
<l>    intersection (RZ, RegionComplementY, RZ)</l>
<c>    * </c>
<l>    intersection (RegionComplementX, RegionComplementY, Rnone)</l>
<l>    intersection (Rnone, RegionComplementZ, Rnone)</l>
<c>    * </c>
<c>    * Coloring</c>
<l>    scale_image_range (Z, Zs, MinZAll, MaxZAll)</l>
<l>    convert_image_type (Zs, Zb, 'byte')</l>
<l>    copy_image (Zb, Empty)</l>
<l>    overpaint_region (Empty, Empty, 0, 'fill')</l>
<l>    compose3 (Empty, Empty, Empty, FinalImage)</l>
<c>    * </c>
<l>    H := 0.3</l>
<l>    make_rgb (Zb, Rnone, FinalImage, FinalImage, H, H, H)</l>
<l>    make_rgb (Zb, RX, FinalImage, FinalImage, 0, 0, H)</l>
<l>    make_rgb (Zb, RY, FinalImage, FinalImage, 0, H, 0)</l>
<l>    make_rgb (Zb, RZ, FinalImage, FinalImage, 0, H, H)</l>
<l>    make_rgb (Zb, RXY, FinalImage, FinalImage, H, 0, H)</l>
<l>    make_rgb (Zb, RXZ, FinalImage, FinalImage, H, H, 0)</l>
<l>    make_rgb (Zb, RYZ, FinalImage, FinalImage, H, H, H)</l>
<l>    make_rgb (Zb, RXYZ, FinalImage, FinalImage, 5, 0, 0)</l>
<c>    * </c>
<l>    dev_clear_window ()</l>
<l>    dev_display (FinalImage)</l>
<c>    * </c>
<l>    disp_message (WindowHandleBuffer, 'Y', 'window', Height + 24, 12, 'red', 'false')</l>
<l>    disp_message (WindowHandleBuffer, 'Z', 'window', Height + 24 * 2, 12, 'red', 'false')</l>
<c>    * </c>
<l>    StartCol := 36</l>
<l>    EndCol := Width - 24</l>
<l>    TotalWidth := EndCol - StartCol</l>
<c>    * </c>
<l>    disp_message (WindowHandleBuffer, 'X', 'window', Height, 12, 'red', 'false')</l>
<l>    YPosX := Height + 6</l>
<l>    disp_line (WindowHandleBuffer, YPosX, 36, YPosX, Width - 24)</l>
<l>    PX0 := (TXMin - MinX) * TotalWidth / RangeX + StartCol</l>
<l>    PX1 := (TXMax - MinX) * TotalWidth / RangeX + StartCol</l>
<l>    disp_line (WindowHandleBuffer, YPosX - 6, PX0, YPosX + 6, PX0)</l>
<l>    disp_line (WindowHandleBuffer, YPosX - 6, PX1, YPosX + 6, PX1)</l>
<c>    * </c>
<l>    disp_message (WindowHandleBuffer, 'Y', 'window', Height + 24, 12, 'green', 'false')</l>
<l>    YPosY := Height + 6 + 24</l>
<l>    disp_line (WindowHandleBuffer, YPosY, 36, YPosY, Width - 24)</l>
<l>    PY0 := (TYMin - MinY) * TotalWidth / RangeY + StartCol</l>
<l>    PY1 := (TYMax - MinY) * TotalWidth / RangeY + StartCol</l>
<l>    disp_line (WindowHandleBuffer, YPosY - 6, PY0, YPosY + 6, PY0)</l>
<l>    disp_line (WindowHandleBuffer, YPosY - 6, PY1, YPosY + 6, PY1)</l>
<c>    * </c>
<l>    disp_message (WindowHandleBuffer, 'Z', 'window', Height + 24 * 2, 12, 'blue', 'false')</l>
<l>    YPosZ := Height + 6 + 24 * 2</l>
<l>    disp_line (WindowHandleBuffer, YPosZ, 36, YPosZ, Width - 24)</l>
<l>    PZ0 := (TZMin - MinZ) * TotalWidth / RangeZ + StartCol</l>
<l>    PZ1 := (TZMax - MinZ) * TotalWidth / RangeZ + StartCol</l>
<l>    disp_line (WindowHandleBuffer, YPosZ - 6, PZ0, YPosZ + 6, PZ0)</l>
<l>    disp_line (WindowHandleBuffer, YPosZ - 6, PZ1, YPosZ + 6, PZ1)</l>
<c>    * </c>
<l>    if (0 == Mode)</l>
<l>        disp_message (WindowHandleBuffer, 'Segment your object from the scene by thresholding in X, Y and Z', 'window', 12, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandleBuffer, 'Make sure that the background is excluded', 'window', 12 + 24, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandleBuffer, 'Grab a line with the left mouse button to change thresholds', 'window', 12 + 24 * 2, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandleBuffer, 'Center-click on a point to automatically include it', 'window', 12 + 24 * 3, 12, 'black', 'true')</l>
<l>        disp_message (WindowHandleBuffer, 'Right-Click to finish', 'window', 12 + 24 * 4, 12, 'black', 'true')</l>
<l>    else</l>
<l>        disp_message (WindowHandleBuffer, 'Move mouse to change threshold, release to finish', 'window', 12, 12, 'black', 'true')</l>
<l>    endif</l>
<c>    * </c>
<l>    copy_rectangle (WindowHandleBuffer, WindowHandle2, 0, 0, Height + 24 * 3 - 1, Width - 1, 0, 0)</l>
<c>    * </c>
<c>    * Check for user input</c>
<l>    if (0 == Mode)</l>
<l>        try</l>
<l>            get_mposition (WindowHandle2, Row1, Column1, Button1)</l>
<l>            if (Button1 != LastButton and Button1 == 1)</l>
<c>                * Find closest</c>
<l>                DistancesY := [abs(Row1 - YPosX),abs(Row1 - YPosY),abs(Row1 - YPosZ)]</l>
<l>                DistancesX := [abs(Column1 - PX0),abs(Column1 - PX1),abs(Column1 - PY0),abs(Column1 - PY1),abs(Column1 - PZ0),abs(Column1 - PZ1)]</l>
<l>                tuple_sort_index (DistancesY, Indices)</l>
<l>                if (DistancesY[Indices[0]] &lt; 24)</l>
<l>                    Closest := Indices[0]</l>
<c>                    * Find closest slider</c>
<l>                    tuple_sort_index (DistancesX[Closest * 2:Closest * 2 + 1], Indices1)</l>
<l>                    Closest := Closest * 2 + Indices1[0]</l>
<l>                    Start := Column1</l>
<l>                    LastButton := Button1</l>
<l>                    Mode := 1</l>
<l>                endif</l>
<l>            elseif (Button1 != LastButton and Button1 == 4)</l>
<l>                intersection (RegionX, RegionY, Region)</l>
<l>                intersection (Region, RegionZ, Region)</l>
<l>*                 dev_set_preferences ('graphics_window_context_menu', 'true')</l>
<l>                dev_close_window ()</l>
<l>                dev_set_window (WindowHandle2)</l>
<l>                dev_close_window ()</l>
<l>                return ()</l>
<l>            elseif (Button1 != LastButton and Button1 == 2)</l>
<c>                * Get XYZ of selected point</c>
<l>                get_grayval (X, Row1, Column1, vx)</l>
<l>                TXMin := min([TXMin,vx])</l>
<l>                TXMax := max([TXMax,vx])</l>
<l>                get_grayval (Y, Row1, Column1, vy)</l>
<l>                TYMin := min([TYMin,vy])</l>
<l>                TYMax := max([TYMax,vy])</l>
<l>                get_grayval (Z, Row1, Column1, vz)</l>
<l>                TZMin := min([TZMin,vz])</l>
<l>                TZMax := max([TZMax,vz])</l>
<l>            endif</l>
<l>        catch (Exception1)</l>
<l>        endtry</l>
<l>    else</l>
<c>        * Track</c>
<l>        try</l>
<l>            get_mposition (WindowHandle2, Row1, Column1, Button1)</l>
<l>            if (Button1 == LastButton)</l>
<l>                RelPosition := (Column1 - StartCol) * 1.0 / TotalWidth</l>
<l>                RelPosition := max([min([RelPosition,1]),0])</l>
<l>                if (0 == Closest)</l>
<l>                    TXMin := MinX + RelPosition * RangeX</l>
<l>                    TXMin := max([TXMin,MinX])</l>
<l>                    TXMax := max([TXMin,TXMax])</l>
<l>                elseif (1 == Closest)</l>
<l>                    TXMax := MinX + RelPosition * RangeX</l>
<l>                    TXMax := min([TXMax,MaxX])</l>
<l>                    TXMin := min([TXMin,TXMax])</l>
<l>                elseif (2 == Closest)</l>
<l>                    TYMin := MinY + RelPosition * RangeY</l>
<l>                    TYMin := max([TYMin,MinY])</l>
<l>                    TYMax := max([TYMin,TYMax])</l>
<l>                elseif (3 == Closest)</l>
<l>                    TYMax := MinY + RelPosition * RangeY</l>
<l>                    TYMax := min([TYMax,MaxY])</l>
<l>                    TYMin := min([TYMin,TYMax])</l>
<l>                elseif (4 == Closest)</l>
<l>                    TZMin := MinZ + RelPosition * RangeZ</l>
<l>                    TZMin := max([TZMin,MinZ])</l>
<l>                    TZMax := max([TZMin,TZMax])</l>
<l>                elseif (5 == Closest)</l>
<l>                    TZMax := MinZ + RelPosition * RangeZ</l>
<l>                    TZMax := min([TZMax,MaxZ])</l>
<l>                    TZMin := min([TZMin,TZMax])</l>
<l>                else</l>
<c>                    * Internal error</c>
<l>                    stop ()</l>
<l>                endif</l>
<l>            else</l>
<c>                * Stop tracking</c>
<l>                Mode := 0</l>
<l>                LastButton := Button1</l>
<l>            endif</l>
<l>        catch (Exception2)</l>
<l>        endtry</l>
<l>    endif</l>
<l>endwhile</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="segment_object">
<parameters>
<parameter id="Region"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="make_rgb">
<interface>
<io>
<par name="Zb" base_type="iconic" dimension="0"/>
<par name="Region" base_type="iconic" dimension="0"/>
<par name="OldColorImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ColorImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="R" base_type="ctrl" dimension="0"/>
<par name="G" base_type="ctrl" dimension="0"/>
<par name="B" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>copy_image (Zb, Dup)</l>
<l>complement (Region, RegionComplement)</l>
<l>overpaint_region (Dup, RegionComplement, 0, 'fill')</l>
<c>* </c>
<l>scale_image (Dup, IR, R, 0)</l>
<l>scale_image (Dup, IG, G, 0)</l>
<l>scale_image (Dup, IB, B, 0)</l>
<c>* </c>
<l>compose3 (IR, IG, IB, TempColorImage)</l>
<l>add_image (TempColorImage, OldColorImage, ColorImage, 1, 0)</l>
<l>return ()</l>
</body>
<docu id="make_rgb">
<parameters>
<parameter id="B"/>
<parameter id="ColorImage"/>
<parameter id="G"/>
<parameter id="OldColorImage"/>
<parameter id="R"/>
<parameter id="Region"/>
<parameter id="Zb"/>
</parameters>
</docu>
</procedure>
</hdevelop>
