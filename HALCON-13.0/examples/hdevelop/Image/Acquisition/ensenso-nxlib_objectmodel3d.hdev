<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Example for the usage of the Ensenso-NxLib Image Acquisition Interface</c>
<c>* </c>
<c>* This example shows how to acquire data from the sensor and use</c>
<c>* it to generate a HALCON ObjectModel3D which will then be</c>
<c>* visualized.</c>
<c>* </c>
<c>* Note: the object 3D model is represented with the HALCON</c>
<c>*       camera 3D coordinate system in meters</c>
<c>* </c>
<l>dev_update_window ('off')</l>
<c>* </c>
<c>* Connect to the first Ensenso-NxLib device</c>
<l>open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '', 0, -1, AcqHandle)</l>
<c>* </c>
<c>* Get image dimensions</c>
<l>get_framegrabber_param (AcqHandle, 'image_width', Width)</l>
<l>get_framegrabber_param (AcqHandle, 'image_height', Height)</l>
<c>* </c>
<l>Width := Width / 2</l>
<l>Height := Height / 2</l>
<c>* </c>
<l>while (true)</l>
<c>    * Prepare graphics windows using image dimensions</c>
<l>    dev_close_window ()</l>
<l>    dev_open_window (0, 0, Width, Height, 'black', WindowID1)</l>
<l>    dev_open_window (0, Width + 10, Width, Height, 'black', WindowID2)</l>
<l>    dev_open_window (0, Width * 2 + 20, Width, Height, 'black', WindowID3)</l>
<c>    * </c>
<c>    * Use grab_data[_async] to acquire all images</c>
<l>    grab_data (ImageData, Region, Contours, AcqHandle, Data)</l>
<l>    count_obj (ImageData, NumImageData)</l>
<c>    * </c>
<l>    select_obj (ImageData, XYZImage, 1)</l>
<c>    * </c>
<l>    access_channel (XYZImage, X, 1)</l>
<l>    access_channel (XYZImage, Y, 2)</l>
<l>    access_channel (XYZImage, Z, 3)</l>
<l>    threshold (Z, Region, 1, 1e90)</l>
<c>    * </c>
<l>    reduce_domain (X, Region, ImageX)</l>
<l>    reduce_domain (Y, Region, ImageY)</l>
<l>    reduce_domain (Z, Region, ImageZ)</l>
<c>    * </c>
<c>    * Extract the images:</c>
<c>    * </c>
<c>    *  1. Calibrated x image as float</c>
<c>    * Set HALCON camera 3D coordinate system (Xh,Yh,Zh) = (Xs*0.001,Ys*0.001,Z*0.001s)</c>
<l>    scale_image (ImageX, ImageX, 0.001, 0)</l>
<l>    dev_set_window (WindowID1)</l>
<l>    dev_set_lut ('rainbow')</l>
<l>    dev_display (ImageX)</l>
<l>    disp_message (WindowID1, 'Calibrated X image (float)', 'window', 10, 10, 'black', 'true')</l>
<c>    * </c>
<c>    * 2. Calibrated y image as float</c>
<c>    * Set HALCON camera 3D coordinate system (Xh,Yh,Zh) = (Xs*0.001,Ys*0.001,Zs*0.001)</c>
<l>    scale_image (ImageY, ImageY, 0.001, 0)</l>
<l>    dev_set_window (WindowID2)</l>
<l>    dev_set_lut ('rainbow')</l>
<l>    dev_display (ImageY)</l>
<l>    disp_message (WindowID2, 'Calibrated Y image (float)', 'window', 10, 10, 'black', 'true')</l>
<c>    * </c>
<c>    * 3. Calibrated z image as float</c>
<c>    * Set HALCON camera 3D coordinate system (Xh,Yh,Zh) = (Xs*0.001,Ys*0.001,Zs*0.001)</c>
<l>    scale_image (ImageZ, ImageZ, 0.001, 0)</l>
<l>    dev_set_window (WindowID3)</l>
<l>    dev_set_lut ('rainbow')</l>
<l>    dev_display (ImageZ)</l>
<l>    disp_message (WindowID3, 'Calibrated Z image (float)', 'window', 10, 10, 'black', 'true')</l>
<c>    * </c>
<l>    stop ()</l>
<l>    dev_close_window ()</l>
<l>    dev_close_window ()</l>
<l>    dev_close_window ()</l>
<c>    * </c>
<c>    * Generate an ObjectModel3D and visualize it, press button</c>
<c>    * to continue</c>
<l>    xyz_to_object_model_3d (ImageX, ImageY, ImageZ, ObjectModel3D)</l>
<l>    dev_open_window (0, 0, 800, 600, 'black', WindowID)</l>
<l>    dev_set_lut ('default')</l>
<l>    set_display_font (WindowID, 16, 'mono', 'true', 'false')</l>
<l>    get_object_model_3d_params (ObjectModel3D, 'num_points', NumPoints)</l>
<l>    if (NumPoints &gt; 0)</l>
<l>        VisPose := []</l>
<l>        Instructions[0] := 'Rotate: Left button'</l>
<l>        Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>        Instructions[2] := 'Move:   Ctrl  + left button'</l>
<l>        visualize_object_model_3d (WindowID, ObjectModel3D, [], VisPose, ['color_attrib','lut'], ['coord_z','rainbow'], 'ObjectModel3D', [], Instructions, PoseOut)</l>
<l>    else</l>
<l>        disp_message (WindowID, 'No 3D points in the 3D object model!', 'window', 250, 200, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<c>    * Clear the ObjectModel3D for the next loop</c>
<l>    clear_object_model_3d (ObjectModel3D)</l>
<c>    * </c>
<l>endwhile</l>
<c>* </c>
<l>close_framegrabber (AcqHandle)</l>
<l>dev_update_window ('on')</l>
<c>* </c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
