<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Example for grabbing images from a IDS uEye camera</c>
<c>* (image cropping)</c>
<c>* </c>
<c>* </c>
<l>info_framegrabber ('uEye', 'revision', RevInfo, RevInfoValues)</l>
<l>info_framegrabber ('uEye', 'info_boards', BoardInfo, BoardInfoValues)</l>
<c>* </c>
<c>* open uEye camera with full image part</c>
<l>open_framegrabber ('uEye', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', 'default', -1, -1, AcqHandle)</l>
<l>get_framegrabber_param (AcqHandle, 'sensor_size', SensorSize)</l>
<l>get_framegrabber_param (AcqHandle, ['image_width','image_height'], ImageSize)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, ImageSize[0], ImageSize[1], 'black', WindowHandle)</l>
<l>grab_image (Image, AcqHandle)</l>
<l>grab_image (Image, AcqHandle)</l>
<l>get_framegrabber_param (AcqHandle, 'exposure', Exposure)</l>
<l>close_framegrabber (AcqHandle)</l>
<c>* </c>
<c>* open uEye camera with varying image part</c>
<c>* (via open_framegrabbber)</c>
<l>for UpperLeftRow := 0 to SensorSize[1] / 2 by 64</l>
<l>    for UpperLeftColumn := 0 to SensorSize[0] / 2 by 64</l>
<l>        open_framegrabber ('uEye', 1, 1, (SensorSize[0] / 2) + ((SensorSize[0] / 2) % 16), (SensorSize[1] / 2) + ((SensorSize[1] / 2) % 16), UpperLeftRow, UpperLeftColumn, 'default', -1, 'default', -1, 'false', 'default', 'default', -1, -1, AcqHandle)</l>
<l>        get_framegrabber_param (AcqHandle, 'roi', CurrentROI)</l>
<l>        get_framegrabber_param (AcqHandle, ['image_width','image_height'], ImageSize)</l>
<l>        get_framegrabber_param (AcqHandle, ['start_row','start_column'], UpperLeftCorner)</l>
<c>        * adjust exposure time</c>
<l>        get_framegrabber_param (AcqHandle, 'exposure_range', ExposureRange)</l>
<l>        NewExposure := min([ExposureRange[1],Exposure])</l>
<l>        set_framegrabber_param (AcqHandle, 'exposure', NewExposure)</l>
<l>        dev_open_window (UpperLeftRow, UpperLeftColumn, ImageSize[0], ImageSize[1], 'black', WindowHandle)</l>
<l>        grab_image (Image, AcqHandle)</l>
<l>        dev_display (Image)</l>
<l>        wait_seconds (0.5)</l>
<l>        dev_close_window ()</l>
<l>        close_framegrabber (AcqHandle)</l>
<l>    endfor</l>
<l>endfor</l>
<c>* </c>
<c>* open uEye camera with varying image part</c>
<c>* (via set_framegrabber_param)</c>
<l>open_framegrabber ('uEye', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', 'default', -1, -1, AcqHandle)</l>
<l>get_framegrabber_param (AcqHandle, 'sensor_size', SensorSize)</l>
<l>for UpperLeftRow := 0 to SensorSize[1] / 2 by 64</l>
<l>    for UpperLeftColumn := 0 to SensorSize[0] / 2 by 64</l>
<l>        set_framegrabber_param (AcqHandle, 'roi', [UpperLeftRow,UpperLeftColumn,UpperLeftRow + SensorSize[1] / 2 - 1,UpperLeftColumn + SensorSize[0] / 2 - 1])</l>
<l>        get_framegrabber_param (AcqHandle, 'roi', CurrentROI)</l>
<l>        get_framegrabber_param (AcqHandle, ['image_width','image_height'], ImageSize)</l>
<c>        * adjust exposure time</c>
<l>        get_framegrabber_param (AcqHandle, 'exposure_range', ExposureRange)</l>
<l>        NewExposure := min([ExposureRange[1],Exposure])</l>
<l>        set_framegrabber_param (AcqHandle, 'exposure', NewExposure)</l>
<l>        dev_open_window (UpperLeftRow, UpperLeftColumn, ImageSize[0], ImageSize[1], 'black', WindowHandle)</l>
<l>        grab_image (Image, AcqHandle)</l>
<l>*         grab_image_async (Image, AcqHandle, -1)</l>
<l>        dev_display (Image)</l>
<l>        wait_seconds (0.5)</l>
<l>        dev_close_window ()</l>
<l>    endfor</l>
<l>endfor</l>
<c>* </c>
<l>close_framegrabber (AcqHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
