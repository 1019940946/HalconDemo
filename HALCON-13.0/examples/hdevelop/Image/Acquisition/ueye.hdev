<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Example for grabbing images from a IDS uEye camera</c>
<c>* (performance evaluation)</c>
<c>* </c>
<c>* </c>
<c>* open first uEye camera</c>
<l>open_framegrabber ('uEye', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'default', 'default', -1, -1, AcqHandle)</l>
<c>* </c>
<l>get_framegrabber_param (AcqHandle, 'revision', Revision)</l>
<l>get_framegrabber_param (AcqHandle, ['image_width','image_height'], ImageSize)</l>
<c>* </c>
<c>* adjust frame_rate / exposure / pixel_clock</c>
<l>get_framegrabber_param (AcqHandle, 'frame_rate_range', FrameRateRange)</l>
<l>set_framegrabber_param (AcqHandle, 'frame_rate', FrameRateRange[1])</l>
<l>get_framegrabber_param (AcqHandle, 'frame_rate', FrameRate)</l>
<l>* set_framegrabber_param (AcqHandle, 'exposure', 10.0)</l>
<l>get_framegrabber_param (AcqHandle, 'exposure', Exposure)</l>
<l>get_framegrabber_param (AcqHandle, 'frame_rate', FrameRate)</l>
<l>get_framegrabber_param (AcqHandle, 'pixel_clock', PixelClock)</l>
<c>* </c>
<l>* set_framegrabber_param (AcqHandle, 'volatile', 'enable')</l>
<c>* </c>
<l>GrabAsync := true</l>
<l>NumImages := 20</l>
<c>* </c>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, ImageSize[0], ImageSize[1], 'black', WindowID)</l>
<l>grab_image (Image, AcqHandle)</l>
<l>dev_display (Image)</l>
<c>* </c>
<l>dev_update_window ('off')</l>
<l>dev_update_pc ('off')</l>
<l>dev_update_var ('off')</l>
<c>* </c>
<l>count_seconds (Seconds1)</l>
<l>for i := 1 to NumImages by 1</l>
<l>    if (GrabAsync)</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>    else</l>
<l>        grab_image (Image, AcqHandle)</l>
<l>    endif</l>
<l>endfor</l>
<l>count_seconds (Seconds2)</l>
<l>for i := 1 to NumImages by 1</l>
<l>    access_channel (Image, ImageChannel1, 1)</l>
<l>    sobel_amp (ImageChannel1, EdgeAmplitude, 'sum_abs', 3)</l>
<l>endfor</l>
<l>count_seconds (Seconds3)</l>
<l>for i := 1 to NumImages by 1</l>
<l>    if (GrabAsync)</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>    else</l>
<l>        grab_image (Image, AcqHandle)</l>
<l>    endif</l>
<l>    access_channel (Image, ImageChannel1, 1)</l>
<l>    sobel_amp (ImageChannel1, EdgeAmplitude, 'sum_abs', 3)</l>
<l>endfor</l>
<l>count_seconds (Seconds4)</l>
<c>* </c>
<l>dev_update_window ('on')</l>
<l>dev_update_pc ('on')</l>
<l>dev_update_var ('on')</l>
<l>TimeGrab := (Seconds2 - Seconds1) / NumImages</l>
<l>TimeSobel := (Seconds3 - Seconds2) / NumImages</l>
<l>TimeAll := (Seconds4 - Seconds3) / NumImages</l>
<l>Overhead := TimeAll - TimeSobel</l>
<l>stop ()</l>
<c>* </c>
<l>while (1)</l>
<l>    if (GrabAsync)</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>    else</l>
<l>        grab_image (Image, AcqHandle)</l>
<l>    endif</l>
<l>endwhile</l>
<l>stop ()</l>
<c>* </c>
<l>close_framegrabber (AcqHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
