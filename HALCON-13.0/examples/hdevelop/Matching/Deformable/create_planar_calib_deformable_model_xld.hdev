<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows the creation of a planar calibrated</c>
<c>* deformable model from a dxf file.</c>
<c>* </c>
<c>* First, a planar calibrated deformable model is created from a</c>
<c>* dxf file. The dxf file has no polarity information, hence the</c>
<c>* metric 'ignore_local_polarity' is used. Note that the model</c>
<c>* must be provided in world coordinates.</c>
<c>* Then, an instance of the model is found in a search image.</c>
<c>* With this image and the corresponding location of the model</c>
<c>* contour, the operator set_planar_calib_deformable_model_metric</c>
<c>* extracts the missing polarity information. This polarity</c>
<c>* information allows to use the metric 'use_polarity', which is</c>
<c>* more discriminative than 'ignore_local_polarity'. Finally, the</c>
<c>* new model is located in search images.</c>
<c>* </c>
<c>* Read the image of a metal part.</c>
<l>read_image (Image, 'metal-parts/bracket_tilted_01.png')</l>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_image (Image, 0, 0, 640, 480, WindowHandle)</l>
<l>set_display_font (WindowHandle, 18, 'mono', 'true', 'false')</l>
<l>dev_set_color ('lime green')</l>
<l>dev_set_line_width (1)</l>
<l>gen_cam_par_area_scan_division (0.0131933, -1039.78, 8.3e-006, 8.3e-006, 313.191, 253.978, 640, 480, CamParam)</l>
<l>ReferencePose := [0.0185843,-0.015084,0.372976,359.872,0.989562,359.381,0]</l>
<l>dev_display (Image)</l>
<l>dev_set_colored (3)</l>
<l>disp_3d_coord_system (WindowHandle, CamParam, ReferencePose, 0.05)</l>
<c>* </c>
<c>* Read the dxf model of a metal part. Note that the scaling of</c>
<c>* the original dxf model is one mm for one pixel. The operator</c>
<c>* create_planar_calib_deformable_model_xld assumes that the</c>
<c>* dxf model is provided in world coordinates, i.e., that</c>
<c>* one pixel corresponds to one meter. Hence, the model must</c>
<c>* be scaled accordingly.</c>
<l>disp_message (WindowHandle, 'Prepare and create the Model', 'window', 12, 84, 'lime green', 'false')</l>
<l>get_system ('example_dir', HalconExamples)</l>
<l>read_contour_xld_dxf (Contours, HalconExamples + '/hdevelop/Applications/Object-Recognition-2D/metal-part-01.dxf', [], [], DxfStatus)</l>
<l>dev_set_color ('cyan')</l>
<l>dev_display (Contours)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_scale (HomMat2DIdentity, 0.001, 0.001, 0.5, 0.5, HomMat2DScale)</l>
<l>affine_trans_contour_xld (Contours, ContoursTrans, HomMat2DScale)</l>
<l>pose_to_hom_mat3d (ReferencePose, HomMat3D)</l>
<l>gen_empty_obj (FoundContour)</l>
<l>count_obj (ContoursTrans, NumberContour)</l>
<l>for I := 1 to NumberContour by 1</l>
<l>    select_obj (ContoursTrans, ObjectSelected, I)</l>
<l>    get_contour_xld (ObjectSelected, Y, X)</l>
<l>    Z := gen_tuple_const(|X|,0.0)</l>
<c>    * Transform the metric model into world coordinates.</c>
<l>    affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<c>    * Project the 3D points of the model, which are available</c>
<c>    * as world coordinates, into the image coordinate system.</c>
<l>    project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<l>    gen_contour_polygon_xld (ModelWorld, R, C)</l>
<l>    concat_obj (FoundContour, ModelWorld, FoundContour)</l>
<l>endfor</l>
<l>dev_set_color ('cyan')</l>
<l>dev_display (FoundContour)</l>
<c>* </c>
<c>* Create the planar calibrated deformable model from the XLD</c>
<c>* contour. For that, the model contours in world coordinates,</c>
<c>* the camera parameters, and the reference pose of the object</c>
<c>* are needed. The reference pose can, e.g., be estimated using</c>
<c>* a calibration plate.</c>
<l>create_planar_calib_deformable_model_xld (ContoursTrans, CamParam, ReferencePose, 'auto', [], [], 'auto', 0.9, [], 'auto', 0.9, [], 'auto', 'none', 'ignore_local_polarity', 5, [], [], ModelID)</l>
<c>* Query the model contours from the model. Note that in contrast</c>
<c>* to the uncalibrated case, the model contours are returned in</c>
<c>* world coordinates.</c>
<l>get_deformable_model_contours (ModelContours, ModelID, 1)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Try to find the metal parts in the search images.</c>
<l>for I := 1 to 9 by 1</l>
<l>    read_image (Image, 'metal-parts/bracket_tilted_' + I$'.02')</l>
<l>    dev_display (Image)</l>
<l>    count_seconds (Seconds1)</l>
<l>    find_planar_calib_deformable_model (Image, ModelID, -0.39, 6.29, 1.0, 1.0, 1, 1, 0.8, 1, 1, 0, 0.9, [], [], Pose, CovPose, Score)</l>
<l>    count_seconds (Seconds2)</l>
<l>    for J := 0 to |Score| - 1 by 1</l>
<c>        * Select the respective match.</c>
<l>        tuple_select_range (Pose, J * 7, ((J + 1) * 7) - 1, PoseSelected)</l>
<c>        * Derive the transformation matrix for the detected</c>
<c>        * model from its 3D pose.</c>
<l>        pose_to_hom_mat3d (PoseSelected, HomMat3D)</l>
<l>        gen_empty_obj (FoundContour)</l>
<l>        count_obj (ModelContours, NumberContour)</l>
<l>        for K := 1 to NumberContour by 1</l>
<l>            select_obj (ModelContours, ObjectSelected, K)</l>
<l>            get_contour_xld (ObjectSelected, Y, X)</l>
<l>            Z := gen_tuple_const(|X|,0.0)</l>
<c>            * Transform the metric model into world coordinates.</c>
<l>            affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<c>            * Project the 3D points of the model, which are</c>
<c>            * available as world coordinates, into the image</c>
<c>            * coordinate system.</c>
<l>            project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<l>            gen_contour_polygon_xld (ModelWorld, R, C)</l>
<l>            concat_obj (FoundContour, ModelWorld, FoundContour)</l>
<l>        endfor</l>
<c>        * </c>
<c>        * Display results</c>
<l>        disp_message (WindowHandle, 'Object found \n X: ' + PoseSelected[0]$'.4f' + ' m\n Y: ' + PoseSelected[1]$'.4f' + ' m\n Z: ' + PoseSelected[2]$'.4f' + ' m', 'window', 48, 12, 'black', 'true')</l>
<l>        dev_set_color ('cyan')</l>
<l>        dev_display (FoundContour)</l>
<l>        dev_set_colored (3)</l>
<l>        disp_3d_coord_system (WindowHandle, CamParam, PoseSelected, 0.05)</l>
<l>    endfor</l>
<l>    disp_message (WindowHandle, |Score| + ' Matches found in ' + ((Seconds2 - Seconds1) * 1000.0)$'.1f' + ' ms', 'window', 12, 12, 'lime green', 'false')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* Extract the polarity information of the model using the</c>
<c>* image and the respective pose of the last match.</c>
<l>dev_display (Image)</l>
<l>dev_set_color ('cyan')</l>
<l>dev_display (FoundContour)</l>
<l>disp_message (WindowHandle, 'Use polarity of an image to update the model', 'window', 12, 12, 'lime green', 'false')</l>
<l>set_planar_calib_deformable_model_metric (Image, ModelID, PoseSelected, 'use_polarity')</l>
<c>* Note that the model contours are not affected by the changes,</c>
<c>* i.e., ModelContoursMetric corresponds to ModelContours</c>
<l>get_deformable_model_contours (ModelContoursMetric, ModelID, 1)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* Locate the metal parts in the search images using the adapted</c>
<c>* polarity setting.</c>
<l>for I := 1 to 9 by 1</l>
<l>    read_image (Image, 'metal-parts/bracket_tilted_' + I$'.02')</l>
<l>    dev_display (Image)</l>
<l>    count_seconds (Seconds1)</l>
<l>    find_planar_calib_deformable_model (Image, ModelID, -0.39, 6.29, 1.0, 1.0, 1, 1, 0.7, 1, 1, 0, 0.9, [], [], Pose, CovPose, Score)</l>
<l>    count_seconds (Seconds2)</l>
<l>    for J := 0 to |Score| - 1 by 1</l>
<c>        * Select the respective match.</c>
<l>        tuple_select_range (Pose, J * 7, ((J + 1) * 7) - 1, PoseSelected)</l>
<c>        * Derive the transformation matrix for the detected</c>
<c>        * model from its 3D pose.</c>
<l>        pose_to_hom_mat3d (PoseSelected, HomMat3D)</l>
<l>        gen_empty_obj (FoundContour)</l>
<l>        count_obj (ModelContoursMetric, NumberContour)</l>
<l>        for K := 1 to NumberContour by 1</l>
<l>            select_obj (ModelContoursMetric, ObjectSelected, K)</l>
<l>            get_contour_xld (ObjectSelected, Y, X)</l>
<l>            Z := gen_tuple_const(|X|,0.0)</l>
<c>            * Transform the metric model into world coordinates.</c>
<l>            affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<c>            * Project the 3D points of the model, which are</c>
<c>            * available as world coordinates, into the image</c>
<c>            * coordinate system.</c>
<l>            project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<l>            gen_contour_polygon_xld (ModelWorld, R, C)</l>
<l>            concat_obj (FoundContour, ModelWorld, FoundContour)</l>
<l>        endfor</l>
<c>        * </c>
<c>        * Display results</c>
<l>        disp_message (WindowHandle, 'Object found \n X: ' + PoseSelected[0]$'.4f' + ' m\n Y: ' + PoseSelected[1]$'.4f' + ' m\n Z: ' + PoseSelected[2]$'.4f' + ' m', 'window', 48, 12, 'black', 'true')</l>
<l>        dev_set_color ('cyan')</l>
<l>        dev_display (FoundContour)</l>
<l>        dev_set_colored (3)</l>
<l>        disp_3d_coord_system (WindowHandle, CamParam, PoseSelected, 0.05)</l>
<l>    endfor</l>
<l>    disp_message (WindowHandle, |Score| + ' Matches found in ' + ((Seconds2 - Seconds1) * 1000.0)$'.1f' + ' ms', 'window', 12, 12, 'lime green', 'false')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* The origin (reference point) of the model can be changed in</c>
<c>* the world coordinate system, although this is in most cases</c>
<c>* not recommended, because it might lead to a less accurate</c>
<c>* matching result.</c>
<l>dev_clear_window ()</l>
<l>dev_set_color ('cyan')</l>
<l>disp_message (WindowHandle, 'Change the origin of the model', 'window', 12, 12, 'lime green', 'false')</l>
<l>set_deformable_model_origin (ModelID, 0.010, 0.0425)</l>
<c>* The model contours are affected by the new reference point</c>
<l>get_deformable_model_contours (ModelContoursNewOrigin, ModelID, 1)</l>
<l>dev_display (ModelContoursNewOrigin)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* Locate the metal parts in the search images using the changed</c>
<c>* reference point.</c>
<l>for I := 1 to 9 by 1</l>
<l>    read_image (Image, 'metal-parts/bracket_tilted_' + I$'.02')</l>
<l>    dev_display (Image)</l>
<l>    count_seconds (Seconds1)</l>
<l>    find_planar_calib_deformable_model (Image, ModelID, -0.39, 6.29, 1.0, 1.0, 1, 1, 0.7, 1, 1, 0, 0.9, [], [], Pose, CovPose, Score)</l>
<l>    count_seconds (Seconds2)</l>
<l>    for J := 0 to |Score| - 1 by 1</l>
<c>        * Select the respective match.</c>
<l>        tuple_select_range (Pose, J * 7, ((J + 1) * 7) - 1, PoseSelected)</l>
<l>        pose_to_hom_mat3d (PoseSelected, HomMat3D)</l>
<c>        * Derive the transformation matrix for the detected</c>
<c>        * model from its 3D pose.</c>
<l>        gen_empty_obj (FoundContour)</l>
<l>        count_obj (ModelContoursNewOrigin, NumberContour)</l>
<l>        for K := 1 to NumberContour by 1</l>
<l>            select_obj (ModelContoursNewOrigin, ObjectSelected, K)</l>
<l>            get_contour_xld (ObjectSelected, Y, X)</l>
<l>            Z := gen_tuple_const(|X|,0.0)</l>
<c>            * Transform the metric model into world coordinates.</c>
<l>            affine_trans_point_3d (HomMat3D, X, Y, Z, Xc, Yc, Zc)</l>
<c>            * Project the 3D points of the model, which are</c>
<c>            * available as world coordinates, into the image</c>
<c>            * coordinate system.</c>
<l>            project_3d_point (Xc, Yc, Zc, CamParam, R, C)</l>
<l>            gen_contour_polygon_xld (ModelWorld, R, C)</l>
<l>            concat_obj (FoundContour, ModelWorld, FoundContour)</l>
<l>        endfor</l>
<c>        * </c>
<c>        * Display results</c>
<l>        disp_message (WindowHandle, 'Object found \n X: ' + PoseSelected[0]$'.4f' + ' m\n Y: ' + PoseSelected[1]$'.4f' + ' m\n Z: ' + PoseSelected[2]$'.4f' + ' m', 'window', 48, 12, 'black', 'true')</l>
<l>        dev_set_color ('cyan')</l>
<l>        dev_display (FoundContour)</l>
<l>        dev_set_colored (3)</l>
<l>        disp_3d_coord_system (WindowHandle, CamParam, PoseSelected, 0.05)</l>
<l>    endfor</l>
<l>    disp_message (WindowHandle, |Score| + ' Matches found in ' + ((Seconds2 - Seconds1) * 1000.0)$'.1f' + ' ms', 'window', 12, 12, 'lime green', 'false')</l>
<l>    if (I &lt; 9)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<l>clear_deformable_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
