<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* This example shows how find_text can be used to find and read</c>
<c>* text. Furthermore, the most important parameters are explained</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>* Initialize window handle</c>
<l>dev_open_window_fit_size (0, 0, 960, 768, 700, 700, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* Read OCR classifier and create the text model</c>
<l>read_ocr_class_mlp ('Industrial_Rej', OCRHandle)</l>
<c>* </c>
<c>* Initialize display variables</c>
<c>* </c>
<l>disp_message (WindowHandle, 'This example shows how find_text can be used to \nfind and read text. Furthermore, the most \nimportant parameters are explained.', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<l>dev_clear_window ()</l>
<l>disp_message (WindowHandle, 'Essentially, the only thing that needs to be \ndone before calling find_text is to create \na text model with create_text_model_reader \nwith mode set to \'auto\'.\n \nThe resulting segmentation can then be obtained \nby calling the operators get_text_result and \nget_text_object.', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* An OCR Classifier based on a multilayer perceptron (MLP) is required</c>
<l>create_text_model_reader ('auto', OCRHandle, TextModel)</l>
<l>clear_ocr_class_mlp (OCRHandle)</l>
<c>* </c>
<l>read_image (Image, 'ocr/medication_package_02_right')</l>
<c>* </c>
<c>* Without setting further parameters, find_text will find and read all</c>
<c>* text within the input image</c>
<l>find_text (Image, TextModel, TextResult)</l>
<c>* </c>
<c>* The segmented regions can be obtained by calling get_text_object</c>
<l>get_text_object (TextLines, TextResult, 'all_lines')</l>
<c>* </c>
<l>dev_set_colored (12)</l>
<l>dev_display (Image)</l>
<l>dev_display (TextLines)</l>
<l>disp_message (WindowHandle, 'Find_text extracts all text within the input image,\nregardless of the character size. \nPer default, light and dark text is extracted.', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>clear_text_result (TextResult)</l>
<l>stop ()</l>
<c>* </c>
<c>* It is possible to restrict the segmentation to text of a certain polarity</c>
<c>* using the set_text_model_param operator</c>
<l>set_text_model_param (TextModel, 'polarity', 'dark_on_light')</l>
<c>* </c>
<l>find_text (Image, TextModel, TextResult)</l>
<c>* </c>
<l>get_text_object (TextLines, TextResult, 'all_lines')</l>
<l>dev_set_colored (12)</l>
<l>dev_display (Image)</l>
<l>dev_display (TextLines)</l>
<l>disp_message (WindowHandle, 'It is possible to restrict the text segmentation \naccording to the polarity of the text. \n \nFor example, restricting the polarity to dark text \non a light background ignores all light text.', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>clear_text_result (TextResult)</l>
<c>* </c>
<c>* Furthermore, it is possible to restrict the segmentation to text attributes</c>
<c>* such as the character height, width or stroke width</c>
<l>set_text_model_param (TextModel, 'polarity', 'dark_on_light')</l>
<l>set_text_model_param (TextModel, 'min_char_height', 20)</l>
<c>* </c>
<l>find_text (Image, TextModel, TextResult)</l>
<c>* </c>
<l>get_text_object (TextLines, TextResult, 'all_lines')</l>
<l>dev_set_colored (12)</l>
<l>dev_display (Image)</l>
<l>dev_display (TextLines)</l>
<l>disp_message (WindowHandle, 'Furthermore, it is possible to restrict the segmentation \nto text attributes such as the character height, \nwidth or stroke width.\n \nFor example, setting the minimal characters height \nto 20px ignores all characters with a smaller height.', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>dev_display (TextLines)</l>
<l>stop ()</l>
<l>clear_text_result (TextResult)</l>
<c>* </c>
<c>* When searching for specific text structures, it is possible to</c>
<c>* set the corresponding structure with set_text_model_param</c>
<l>set_text_model_param (TextModel, 'polarity', 'dark_on_light')</l>
<l>set_text_model_param (TextModel, 'min_char_height', 20)</l>
<c>* The separators which are added to the 'text_line_separators'</c>
<c>* need to be valid characters within the used classifier. Otherwise</c>
<c>* they are ignored.</c>
<l>set_text_model_param (TextModel, 'text_line_separators', '/')</l>
<l>set_text_model_param (TextModel, 'text_line_structure', '2 4')</l>
<c>* </c>
<l>find_text (Image, TextModel, TextResult)</l>
<c>* </c>
<l>get_text_object (TextLines, TextResult, 'all_lines')</l>
<l>dev_set_colored (12)</l>
<l>dev_display (Image)</l>
<l>dev_display (TextLines)</l>
<l>disp_message (WindowHandle, 'When searching for specific text structures, it can \nbe helpful to set the corresponding text_line_structure \nwith set_text_model_param. \n \nFor example, when searching for a date of the form MM/YYYY,\nit is possible to add \'/\' to the text_line_separators and \nset the text_line_structure to \'2 4\'.', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* It is possible to directly retain the classification results for</c>
<c>* each of the segmented characters with the get_text_result operator</c>
<c>* </c>
<l>dev_set_colored (12)</l>
<l>dev_display (Image)</l>
<l>dev_display (TextLines)</l>
<c>* </c>
<c>* Display the single characters</c>
<l>smallest_rectangle1 (TextLines, Row1, Column1, Row2, Column2)</l>
<l>get_text_result (TextResult, 'class', SingleCharacters)</l>
<l>tuple_sum (SingleCharacters, TextLineCharacters)</l>
<l>dev_set_color ('dark green')</l>
<l>for CharacterIndex := 0 to |SingleCharacters| - 1 by 1</l>
<l>    set_tposition (WindowHandle, Row2[CharacterIndex] + 10, Column1[CharacterIndex])</l>
<l>    write_string (WindowHandle, SingleCharacters[CharacterIndex])</l>
<l>endfor</l>
<l>disp_message (WindowHandle, 'It is possible to directly retain the classification \nresults for each of the segmented characters \nwith the get_text_result operator. \n \nExtracted Text: ' + TextLineCharacters, 'window', 12, 12, 'black', 'true')</l>
<l>stop ()</l>
<l>clear_text_result (TextResult)</l>
<l>clear_text_model (TextModel)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
