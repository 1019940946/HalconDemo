<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program compares the training and recognition times of the</c>
<c>* SVM and MLP OCR classifiers.  First, a moderately large training set of more</c>
<c>* than 5000 samples is created by adding synthetic distortions like shifts,</c>
<c>* rotations, and changes in stroke width to the characters.  The shifts are</c>
<c>* included to simulate segmentation errors.  The OCR features themselves</c>
<c>* are, of course, shift-invariant if there are no segmentation errors.  Then, an</c>
<c>* SVM classifier is trained and a second SVM classifier is obtained by reducing</c>
<c>* the first SVM classifier.  Finally, an MLP classifier is trained.  You will see that</c>
<c>* the training of the SVM and MLP classifiers are roughly identical on current</c>
<c>* multi-core computers.  Finally, the program creates test characters by distorting</c>
<c>* the original training characters and by adding structured noise to them.</c>
<c>* You will see that the SVM classifiers are able to cope with these particular</c>
<c>* kinds of distortions better than the MLP classifier.  Note that the chosen</c>
<c>* distortions do not necessarily reflect distortions that occur in real applications.</c>
<c>* You will also see that the classification times are better for the MLP classifier.</c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 500, 500, 'black', WindowHandle)</l>
<l>dev_set_color ('green')</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>get_tmp_dir (TmpDir)</l>
<l>TrainFile := TmpDir + '/letters.trf'</l>
<l>TrainFileBig := TmpDir + '/letters_big.trf'</l>
<c>* Create the original training samples and store them in a train file.</c>
<l>dev_clear_window ()</l>
<l>dev_set_part (0, 0, 499, 499)</l>
<l>disp_message (WindowHandle, 'Creating initial samples... ', 'window', 12, 12, 'green', 'false')</l>
<l>gen_initial_trainfile (TrainFile)</l>
<c>* Now modify the original training samples to create a larger training set.</c>
<l>disp_message (WindowHandle, 'Creating modified samples... ', 'window', 42, 12, 'green', 'false')</l>
<l>read_ocr_trainf_names (TrainFile, CharClasses, CharCount)</l>
<l>read_ocr_trainf (Characters, TrainFile, CharClassesSingle)</l>
<l>dev_set_check ('~give_error')</l>
<l>delete_file (TrainFileBig)</l>
<l>dev_set_check ('give_error')</l>
<l>count_obj (Characters, NumChars)</l>
<l>for J := 0 to NumChars - 1 by 1</l>
<l>    select_obj (Characters, Char, J + 1)</l>
<l>    Class := CharClassesSingle[J]</l>
<l>    full_domain (Char, CharFull)</l>
<l>    get_image_size (CharFull, Width, Height)</l>
<l>    dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>    append_ocr_trainf (CharFull, CharFull, Class, TrainFileBig)</l>
<l>    append_ocr_translated (CharFull, 1, 1, TrainFileBig, Class)</l>
<l>    append_ocr_translated (CharFull, 1, 0, TrainFileBig, Class)</l>
<l>    append_ocr_translated (CharFull, 1, -1, TrainFileBig, Class)</l>
<l>    append_ocr_translated (CharFull, 0, -1, TrainFileBig, Class)</l>
<l>    append_ocr_translated (CharFull, -1, -1, TrainFileBig, Class)</l>
<l>    append_ocr_translated (CharFull, -1, 0, TrainFileBig, Class)</l>
<l>    append_ocr_translated (CharFull, -1, 1, TrainFileBig, Class)</l>
<l>    append_ocr_translated (CharFull, 0, 1, TrainFileBig, Class)</l>
<l>    append_ocr_rotated (CharFull, 3, TrainFileBig, Class)</l>
<l>    append_ocr_rotated (CharFull, -3, TrainFileBig, Class)</l>
<l>    append_ocr_rotated (CharFull, 5, TrainFileBig, Class)</l>
<l>    append_ocr_rotated (CharFull, -5, TrainFileBig, Class)</l>
<l>    append_ocr_rotated (CharFull, 8, TrainFileBig, Class)</l>
<l>    append_ocr_rotated (CharFull, -8, TrainFileBig, Class)</l>
<l>    append_ocr_erosion (CharFull, 1.2, TrainFileBig, Class)</l>
<l>    append_ocr_erosion (CharFull, 1.5, TrainFileBig, Class)</l>
<l>    append_ocr_dilated (CharFull, 1.2, TrainFileBig, Class)</l>
<l>    append_ocr_dilated (CharFull, 1.5, TrainFileBig, Class)</l>
<l>endfor</l>
<c>* Train the SVM and MLP classifiers.</c>
<c>* Note: For simplicity, the classification is performed on the raw gray values</c>
<c>* without segmenting the characters.  In a real application, the characters</c>
<c>* would, of course, have to be segmented.  In this case, region features would</c>
<c>* also be used for the classification.</c>
<l>dev_clear_window ()</l>
<l>dev_set_part (0, 0, 499, 499)</l>
<l>disp_message (WindowHandle, 'Training SVM... ', 'window', 20, 20, 'green', 'false')</l>
<l>create_ocr_class_svm (8, 10, 'constant', 'pixel_invar', CharClasses, 'rbf', 0.01, 0.01, 'one-versus-all', 'normalization', 10, OCRHandleSVM)</l>
<l>count_seconds (S1)</l>
<l>trainf_ocr_class_svm (OCRHandleSVM, TrainFileBig, 0.001, 'default')</l>
<l>count_seconds (S2)</l>
<l>disp_message (WindowHandle, 'Training SVM... ' + (S2 - S1)$'5.2f' + 's', 'window', 20, 20, 'green', 'false')</l>
<l>get_support_vector_num_ocr_class_svm (OCRHandleSVM, NumSupportVectors, NumSVPerSVM)</l>
<l>disp_message (WindowHandle, 'Reducing SVM... ', 'window', 50, 20, 'green', 'false')</l>
<l>count_seconds (S1)</l>
<c>* Note that the MaxError parameter is set to an artificially large value in this</c>
<c>* example.  In a real application, this parameter would have to be determined</c>
<c>* based on the error rate on an independent test data set.</c>
<l>reduce_ocr_class_svm (OCRHandleSVM, 'bottom_up', 2, 0.1, OCRHandleSVMR)</l>
<l>count_seconds (S2)</l>
<l>disp_message (WindowHandle, 'Reducing SVM... ' + (S2 - S1)$'5.2f' + 's', 'window', 50, 20, 'green', 'false')</l>
<l>get_support_vector_num_ocr_class_svm (OCRHandleSVMR, NumSupportVectorsR, NumSVPerSVMR)</l>
<l>disp_message (WindowHandle, 'Training MLP... ', 'window', 80, 20, 'green', 'false')</l>
<l>create_ocr_class_mlp (8, 10, 'constant', 'pixel_invar', CharClasses, 50, 'none', 10, 42, OCRHandleMLP)</l>
<l>count_seconds (S1)</l>
<l>trainf_ocr_class_mlp (OCRHandleMLP, TrainFileBig, 200, 1, 0.01, Error, ErrorLog)</l>
<l>count_seconds (S2)</l>
<l>disp_message (WindowHandle, 'Training MLP... ' + (S2 - S1)$'5.2f' + 's', 'window', 80, 20, 'green', 'false')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* Now introduce heavy distortions into the characters and determine the error</c>
<c>* rates and classification times.</c>
<l>NumDistort := 10</l>
<l>ErrorsSVM := 0</l>
<l>ErrorsSVMR := 0</l>
<l>ErrorsMLP := 0</l>
<l>TimeSVM := 0</l>
<l>TimeSVMR := 0</l>
<l>TimeMLP := 0</l>
<l>for J := 0 to NumChars - 1 by 1</l>
<l>    select_obj (Characters, Char, J + 1)</l>
<l>    Class := CharClassesSingle[J]</l>
<l>    full_domain (Char, CharFull)</l>
<l>    get_image_size (CharFull, Width, Height)</l>
<l>    Num := max([J * NumDistort,1])</l>
<l>    gen_empty_obj (Chars)</l>
<l>    for K := 1 to NumDistort by 1</l>
<l>        gen_distorted_character (CharFull, CharDistort)</l>
<l>        concat_obj (Chars, CharDistort, Chars)</l>
<l>        dev_set_part (0, 0, Height - 1, Width - 1)</l>
<l>        dev_display (CharDistort)</l>
<l>        dev_set_part (0, 0, 499, 499)</l>
<l>        disp_message (WindowHandle, 'SVM:      Time: ' + (TimeSVM / Num * 1000)$'4.2f' + 'ms, Errors: ' + (real(ErrorsSVM) / Num * 100)$'5.3f' + '%', 'window', 20, 20, 'black', 'true')</l>
<l>        disp_message (WindowHandle, 'Red. SVM: Time: ' + (TimeSVMR / Num * 1000)$'4.2f' + 'ms, Errors: ' + (real(ErrorsSVMR) / Num * 100)$'5.3f' + '%', 'window', 50, 20, 'black', 'true')</l>
<l>        disp_message (WindowHandle, 'MLP:      Time: ' + (TimeMLP / Num * 1000)$'4.2f' + 'ms, Errors: ' + (real(ErrorsMLP) / Num * 100)$'5.3f' + '%', 'window', 80, 20, 'black', 'true')</l>
<l>        wait_seconds (0.02)</l>
<l>    endfor</l>
<l>    count_seconds (S1)</l>
<l>    for K := 1 to NumDistort by 1</l>
<l>        select_obj (Chars, CharDistort, K)</l>
<l>        do_ocr_single_class_svm (CharDistort, CharDistort, OCRHandleSVM, 1, ClassRes)</l>
<l>        if (ClassRes != Class)</l>
<l>            ErrorsSVM := ErrorsSVM + 1</l>
<l>        endif</l>
<l>    endfor</l>
<l>    count_seconds (S2)</l>
<l>    TimeSVM := TimeSVM + S2 - S1</l>
<l>    count_seconds (S1)</l>
<l>    for K := 1 to NumDistort by 1</l>
<l>        select_obj (Chars, CharDistort, K)</l>
<l>        do_ocr_single_class_svm (CharDistort, CharDistort, OCRHandleSVMR, 1, ClassRes)</l>
<l>        if (ClassRes != Class)</l>
<l>            ErrorsSVMR := ErrorsSVMR + 1</l>
<l>        endif</l>
<l>    endfor</l>
<l>    count_seconds (S2)</l>
<l>    TimeSVMR := TimeSVMR + S2 - S1</l>
<l>    count_seconds (S1)</l>
<l>    for K := 1 to NumDistort by 1</l>
<l>        select_obj (Chars, CharDistort, K)</l>
<l>        do_ocr_single_class_mlp (CharDistort, CharDistort, OCRHandleMLP, 1, ClassRes, Confidence)</l>
<l>        if (ClassRes != Class)</l>
<l>            ErrorsMLP := ErrorsMLP + 1</l>
<l>        endif</l>
<l>    endfor</l>
<l>    count_seconds (S2)</l>
<l>    TimeMLP := TimeMLP + S2 - S1</l>
<l>endfor</l>
<l>dev_clear_window ()</l>
<l>dev_set_part (0, 0, 499, 499)</l>
<l>Num := NumChars * NumDistort</l>
<l>disp_message (WindowHandle, 'SVM:      Time: ' + (TimeSVM / Num * 1000)$'4.2f' + 'ms, Errors: ' + (real(ErrorsSVM) / Num * 100)$'5.3f' + '%', 'window', 20, 20, 'green', 'false')</l>
<l>disp_message (WindowHandle, 'Red. SVM: Time: ' + (TimeSVMR / Num * 1000)$'4.2f' + 'ms, Errors: ' + (real(ErrorsSVMR) / Num * 100)$'5.3f' + '%', 'window', 50, 20, 'green', 'false')</l>
<l>disp_message (WindowHandle, 'MLP:      Time: ' + (TimeMLP / Num * 1000)$'4.2f' + 'ms, Errors: ' + (real(ErrorsMLP) / Num * 100)$'5.3f' + '%', 'window', 80, 20, 'green', 'false')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>clear_ocr_class_svm (OCRHandleSVM)</l>
<l>clear_ocr_class_svm (OCRHandleSVMR)</l>
<l>clear_ocr_class_mlp (OCRHandleMLP)</l>
<l>dev_set_check ('~give_error')</l>
<l>delete_file (TrainFile)</l>
<l>delete_file (TrainFileBig)</l>
<l>dev_set_check ('give_error')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="append_ocr_translated">
<interface>
<io>
<par name="Character" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Column" base_type="ctrl" dimension="0"/>
<par name="FileName" base_type="ctrl" dimension="0"/>
<par name="Class" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_translate (HomMat2DIdentity, Row, Column, HomMat2DTranslate)</l>
<l>affine_trans_image (Character, CharacterTrans, HomMat2DTranslate, 'constant', 'false')</l>
<l>expand_domain_gray (CharacterTrans, CharacterExpanded, 1)</l>
<l>* dev_display (CharacterExpanded)</l>
<l>append_ocr_trainf (CharacterExpanded, CharacterExpanded, Class, FileName)</l>
<l>return ()</l>
</body>
<docu id="append_ocr_translated">
<parameters>
<parameter id="Character"/>
<parameter id="Class"/>
<parameter id="Column"/>
<parameter id="FileName"/>
<parameter id="Row"/>
</parameters>
</docu>
</procedure>
<procedure name="append_ocr_rotated">
<interface>
<io>
<par name="Character" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rot" base_type="ctrl" dimension="0"/>
<par name="TrainFile" base_type="ctrl" dimension="0"/>
<par name="Class" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>rotate_image (Character, CharacterRotated, Rot, 'weighted')</l>
<l>expand_domain_gray (CharacterRotated, CharacterExpanded, 2)</l>
<l>* dev_display (CharacterExpanded)</l>
<l>append_ocr_trainf (CharacterExpanded, CharacterExpanded, Class, TrainFile)</l>
<l>return ()</l>
</body>
<docu id="append_ocr_rotated">
<parameters>
<parameter id="Character"/>
<parameter id="Class"/>
<parameter id="Rot"/>
<parameter id="TrainFile"/>
</parameters>
</docu>
</procedure>
<procedure name="append_ocr_dilated">
<interface>
<io>
<par name="Character" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="MaskSize" base_type="ctrl" dimension="0"/>
<par name="TrainFile" base_type="ctrl" dimension="0"/>
<par name="Class" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>gray_dilation_shape (Character, CharacterDilated, MaskSize, MaskSize, 'rhombus')</l>
<l>* dev_display (CharacterDilated)</l>
<l>append_ocr_trainf (CharacterDilated, CharacterDilated, Class, TrainFile)</l>
<l>return ()</l>
</body>
<docu id="append_ocr_dilated">
<parameters>
<parameter id="Character"/>
<parameter id="Class"/>
<parameter id="MaskSize"/>
<parameter id="TrainFile"/>
</parameters>
</docu>
</procedure>
<procedure name="append_ocr_erosion">
<interface>
<io>
<par name="Character" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="MaskSize" base_type="ctrl" dimension="0"/>
<par name="TrainFile" base_type="ctrl" dimension="0"/>
<par name="Class" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>gray_erosion_shape (Character, CharacterEroded, MaskSize, MaskSize, 'rhombus')</l>
<l>* dev_display (CharacterEroded)</l>
<l>append_ocr_trainf (CharacterEroded, CharacterEroded, Class, TrainFile)</l>
<l>return ()</l>
</body>
<docu id="append_ocr_erosion">
<parameters>
<parameter id="Character"/>
<parameter id="Class"/>
<parameter id="MaskSize"/>
<parameter id="TrainFile"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_distorted_character">
<interface>
<io>
<par name="Char" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="CharDistort" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>get_image_size (Char, Width, Height)</l>
<l>EroDil := rand(1) * 4 - 2</l>
<l>if (EroDil &lt; 0)</l>
<l>    gray_erosion_shape (Char, CharEroDil, 1 - EroDil, 1 - EroDil, 'rhombus')</l>
<l>else</l>
<l>    gray_dilation_shape (Char, CharEroDil, 1 + EroDil, 1 + EroDil, 'rhombus')</l>
<l>endif</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, rad(rand(1) * 20 - 10), Height / 2, Width / 2, HomMat2DRotate)</l>
<l>hom_mat2d_translate (HomMat2DRotate, rand(1) * 2 - 1, rand(1) * 2 - 1, HomMat2DTranslate)</l>
<l>affine_trans_image (CharEroDil, CharTrans, HomMat2DTranslate, 'constant', 'false')</l>
<l>expand_domain_gray (CharTrans, CharExpanded, 2)</l>
<l>gen_image_proto (CharExpanded, ImageBlank, 128)</l>
<l>add_noise_white (ImageBlank, ImageNoise, 60)</l>
<l>smooth_image (ImageNoise, ImageSmooth, 'gauss', 1)</l>
<l>scale_image (ImageSmooth, ImageScaled, 3, -256)</l>
<l>add_image (CharExpanded, ImageScaled, CharDistort, 1, -128)</l>
<l>return ()</l>
</body>
<docu id="gen_distorted_character">
<parameters>
<parameter id="Char"/>
<parameter id="CharDistort"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_initial_trainfile">
<interface>
<ic>
<par name="TrainFileName" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>read_image (Image, 'letters')</l>
<c>* Segment the image.</c>
<l>binary_threshold (Image, Region, 'max_separability', 'dark', UsedThreshold)</l>
<c>* Connect the i's and j's with their dots.</c>
<l>dilation_circle (Region, RegionDilation, 3.5)</l>
<c>* Compute the correct connected components.</c>
<l>connection (RegionDilation, ConnectedRegions)</l>
<c>* Reduce each connected component (character) to its original shape.</c>
<l>intersection (ConnectedRegions, Region, RegionIntersection)</l>
<c>* Sort the characters line-by-line.</c>
<l>sort_region (RegionIntersection, Characters, 'character', 'true', 'row')</l>
<c>* Compute the true class of each character.</c>
<l>count_obj (Characters, Number)</l>
<l>Classes := []</l>
<l>for J := 0 to 25 by 1</l>
<l>    Classes := [Classes,gen_tuple_const(20,chr(ord('a') + J))]</l>
<l>endfor</l>
<l>Classes := [Classes,gen_tuple_const(20,'.')]</l>
<c>* Construct the necessary training file from the segmented characters.</c>
<l>write_ocr_trainf (Characters, Image, Classes, TrainFileName)</l>
<l>return ()</l>
</body>
<docu id="gen_initial_trainfile">
<parameters>
<parameter id="TrainFileName"/>
</parameters>
</docu>
</procedure>
<procedure name="get_tmp_dir">
<interface>
<oc>
<par name="LocalTemp" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>tuple_environment ('TEMP', LocalTemp)</l>
<l>if (LocalTemp == '')</l>
<l>    tuple_environment ('TMP', LocalTemp)</l>
<l>    if (LocalTemp == '')</l>
<l>        file_exists ('/tmp', FileExists)</l>
<l>        if (FileExists)</l>
<l>            LocalTemp := '/tmp'</l>
<l>        else</l>
<l>            LocalTemp := './'</l>
<l>        endif</l>
<l>    endif</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="get_tmp_dir">
<parameters>
<parameter id="LocalTemp"/>
</parameters>
</docu>
</procedure>
</hdevelop>
