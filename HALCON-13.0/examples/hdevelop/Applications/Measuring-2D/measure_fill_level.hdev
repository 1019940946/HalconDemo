<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* In this example a fill level check for the</c>
<c>* pharmaceutical industry is demonstrated. The task is</c>
<c>* to check for the fill level of each single nose drop ampoule.</c>
<c>* To do so, we first locate each ampoule head by applying</c>
<c>* shape-based matching, then we find the fill level</c>
<c>* by measuring the gray level change using a 1D Measuring.</c>
<c>* </c>
<c>* </c>
<l>dev_close_window ()</l>
<l>dev_update_off ()</l>
<l>read_image (Image, 'ampoules/ampoules_01')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_draw ('margin')</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* Create a model for the ampoule head to align the measure handle</c>
<l>gen_rectangle1 (Rectangle, 230, 280, 317, 330)</l>
<l>reduce_domain (Image, Rectangle, ImageModel)</l>
<l>create_shape_model (ImageModel, 'auto', 0, 0, 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelID)</l>
<c>* </c>
<c>* Initialize the measure handle</c>
<l>gen_measure_rectangle2 (0, 0, rad(90), 75, 20, Width, Height, 'bilinear', MeasureHandle)</l>
<l>Tolerance := 15</l>
<c>* </c>
<c>* Determine the fill level</c>
<l>NumImages := 8</l>
<l>for Index := 1 to NumImages by 1</l>
<l>    read_image (Image, 'ampoules/ampoules_' + Index$'.2d')</l>
<l>    ColumnEdges := []</l>
<l>    FillLevelHeight := []</l>
<c>    * </c>
<l>    find_shape_model (Image, ModelID, 0, 0, 0.7, 0, 0.1, 'least_squares', 0, 0.9, Row, Column, Angle, Score)</l>
<l>    MeanRow := mean(Row)</l>
<l>    RefLevel := MeanRow - 160</l>
<c>    * Display tolerance area</c>
<l>    dev_display (Image)</l>
<l>    dev_set_line_width (1)</l>
<l>    dev_set_color ('white')</l>
<l>    gen_rectangle2 (AcceptLevel, RefLevel, mean(Column), 0, 30 + (max(Column) - min(Column)) / 2, Tolerance)</l>
<l>    dev_display (AcceptLevel)</l>
<l>    dev_set_line_width (2)</l>
<c>    * </c>
<c>    *  Determine fill level of each ampoule</c>
<l>    Errors := 0</l>
<l>    for Idx := 0 to |Score| - 1 by 1</l>
<l>        translate_measure (MeasureHandle, MeanRow - 135, Column[Idx])</l>
<c>        * Search for the topmost edge</c>
<l>        measure_pos (Image, MeasureHandle, 2, 7, 'all', 'first', RowEdge, ColumnEdge, Amplitude, Distance)</l>
<l>        FillLevelHeight := [FillLevelHeight,RowEdge]</l>
<l>        ColumnEdges := [ColumnEdges,ColumnEdge]</l>
<l>        gen_cross_contour_xld (Cross, RowEdge, ColumnEdge, 15, 0)</l>
<l>        gen_rectangle2 (FillLevel, RowEdge, ColumnEdge, 0, 28, 20)</l>
<l>        if (abs(FillLevelHeight[Idx] - RefLevel) &gt;= Tolerance)</l>
<l>            gen_rectangle2 (ChamberSingle, MeanRow - 133, Column[Idx], 0, 35, 90)</l>
<l>            gen_cross_contour_xld (Cross, FillLevelHeight[Idx], ColumnEdges[Idx], 15, 0)</l>
<l>            gen_rectangle2 (FillLevel, FillLevelHeight[Idx], ColumnEdges[Idx], 0, 28, 20)</l>
<l>            Errors := Errors + 1</l>
<l>            dev_set_color ('red')</l>
<l>            dev_display (ChamberSingle)</l>
<l>            disp_message (WindowHandle, 'NG', 'image', FillLevelHeight[Idx] - 50, ColumnEdges[Idx] - 10, 'red', 'false')</l>
<l>        else</l>
<l>            disp_message (WindowHandle, 'OK', 'image', FillLevelHeight[Idx] - 50, ColumnEdges[Idx] - 10, 'green', 'false')</l>
<l>            dev_set_color ('green')</l>
<l>        endif</l>
<l>        dev_display (FillLevel)</l>
<l>        dev_display (Cross)</l>
<l>    endfor</l>
<c>    * </c>
<c>    * Check, whether the fill level is within the allowed range - does not deviate too much</c>
<c>    * from average fill level</c>
<c>    * </c>
<c>    * Display statistics</c>
<l>    if (Errors &gt; 0)</l>
<l>        disp_message (WindowHandle, Errors + ' BAD', 'window', 10, 12, 'red', 'true')</l>
<l>    else</l>
<l>        disp_message (WindowHandle, 'All OK', 'window', 10, 12, 'forest green', 'true')</l>
<l>    endif</l>
<l>    if (Index &lt; NumImages)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<l>close_measure (MeasureHandle)</l>
<l>clear_shape_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
