<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* This example shows the usage of the HALCON operators</c>
<c>* tuple_find, tuple_find_first and tuple_find_last.</c>
<c>* </c>
<c>* Please check the variable window for results.</c>
<c>* </c>
<c>* </c>
<l>dev_close_window ()</l>
<l>dev_update_off ()</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>Message := 'This example shows the operators tuple_find,'</l>
<l>Message[1] := 'tuple_find_first and tuple_find_last.'</l>
<l>Message[2] := 'Please'</l>
<l>Message[3] := ' - step through the program,'</l>
<l>Message[4] := ' - read the comments,'</l>
<l>Message[5] := ' - and check the variable view.'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<l>Tuple := [1,2,1,3,1,3,2,5,4,1,8,6]</l>
<c>* </c>
<c>* The following lines show</c>
<c>* a) the HDevelop language syntax (find etc.)</c>
<c>* b) the HALCON operator syntax (tuple_find etc.)</c>
<c>* Both modes return the same results,</c>
<c>* while a) is slightly faster.</c>
<c>* </c>
<c>* </c>
<c>* Find a single element</c>
<c>* </c>
<l>ToFind := 1</l>
<c>* </c>
<c>* find</c>
<l>IndicesFindA := find(Tuple,ToFind)</l>
<l>tuple_find (Tuple, ToFind, IndicesFindB)</l>
<c>* </c>
<c>* find_first</c>
<l>IndicesFindFirstA := find_first(Tuple,ToFind)</l>
<l>tuple_find_first (Tuple, ToFind, IndicesFindFirstB)</l>
<c>* </c>
<c>* find_last</c>
<l>IndicesFindLastA := find_last(Tuple,ToFind)</l>
<l>tuple_find_last (Tuple, ToFind, IndicesFindLastB)</l>
<c>* </c>
<c>* </c>
<c>* An alternative to find a single element</c>
<c>* is to use tuple_equal_elem together with</c>
<c>* tuple_select_mask</c>
<l>SelectMaskA := select_mask([0:|Tuple| - 1],Tuple [==] ToFind)</l>
<l>tuple_equal_elem (Tuple, ToFind, EqualB)</l>
<l>tuple_select_mask ([0:|Tuple| - 1], EqualB, SelectMaskB)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* Find a sub-tuple</c>
<c>* </c>
<l>ToFind2 := [1,3]</l>
<c>* </c>
<c>* find</c>
<l>IndicesFindSubA := find(Tuple,ToFind2)</l>
<l>tuple_find (Tuple, ToFind2, IndicesFindSubB)</l>
<c>* </c>
<c>* find_first</c>
<l>IndicesFindFirstSubA := find_first(Tuple,ToFind2)</l>
<l>tuple_find_first (Tuple, ToFind2, IndicesFindFirstSubB)</l>
<c>* </c>
<c>* find_last</c>
<l>IndicesFindLastSubA := find_last(Tuple,ToFind2)</l>
<l>tuple_find_last (Tuple, ToFind2, IndicesFindLastSubB)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* For an element that is not present the tuple_find</c>
<c>* operators return -1</c>
<c>* </c>
<l>NotFoundA := find(Tuple,9)</l>
<l>tuple_find (Tuple, 9, NotFoundB)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
