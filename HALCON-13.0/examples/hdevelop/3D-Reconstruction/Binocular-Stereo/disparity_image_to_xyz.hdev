<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* This example describes how to use the operator</c>
<c>* 'disparity_image_to_xyz'.</c>
<c>* The usage of the operator is shown on two images</c>
<c>* of a board obtained from a stereo setup of two cameras</c>
<c>* (left: 'camera1', right: 'camera2'). In the first step</c>
<c>* both images are rectified and the disparity image of</c>
<c>* the rectified image pair is determined. Then the operator</c>
<c>* 'disparity_image_to_xyz' calculates the coordinates of</c>
<c>* all pixels within the disparity image.</c>
<c>* Afterwards the 3D points can be rotated in the 3D space for</c>
<c>* visualization purposes.</c>
<c>* </c>
<c>* </c>
<c>* Initialize settings</c>
<l>dev_close_window ()</l>
<l>dev_update_off ()</l>
<l>dev_set_preferences ('graphics_window_context_menu', 'false')</l>
<l>dev_set_preferences ('suppress_handled_exceptions_dlg', 'true')</l>
<c>* </c>
<c>* Define the left and right stereo image</c>
<l>ImagePath := 'stereo/board/'</l>
<l>Image1 := ImagePath + '/board_l_01'</l>
<l>Image2 := ImagePath + '/board_r_01'</l>
<c>* </c>
<c>* Define the camera parameters</c>
<l>gen_cam_par_area_scan_division (0.0131205, -665.85466, 1.4803422e-005, 1.48e-005, 155.90117, 126.703971, 320, 240, CamParamL)</l>
<l>gen_cam_par_area_scan_division (0.0131712, -728.9579, 1.4799849e-005, 1.48e-005, 163.265701, 119.310684, 320, 240, CamParamR)</l>
<l>RelPose := [0.15350044,-0.003732778,0.04481715,0.1736607,319.8612,359.8945,0]</l>
<c>* </c>
<c>* Generate a disparity image</c>
<c>* ******************************************</c>
<c>* </c>
<c>* Generate the rectification maps</c>
<l>gen_binocular_rectification_map (MapL, MapR, CamParamL, CamParamR, RelPose, 1, 'geometric', 'bilinear', RectCamParL, RectCamParR, CamPoseRectL, CamPoseRectR, RectLPosRectR)</l>
<c>* </c>
<c>* Read and rectify the stereo image pair</c>
<l>read_image (ImageL, Image1)</l>
<l>read_image (ImageR, Image2)</l>
<l>map_image (ImageL, MapL, ImageRectifiedL)</l>
<l>map_image (ImageR, MapR, ImageRectifiedR)</l>
<c>* </c>
<c>* Display the left rectified image</c>
<l>get_image_size (ImageRectifiedL, WidthL, HeightL)</l>
<l>dev_open_window (0, 0, WidthL, HeightL, 'white', WindowHandle1)</l>
<l>set_display_font (WindowHandle1, 11, 'mono', 'true', 'false')</l>
<l>dev_display (ImageRectifiedL)</l>
<l>disp_message (WindowHandle1, 'Left rectified image', 'window', 10, 10, 'black', 'true')</l>
<c>* </c>
<c>* Display the right recitified image</c>
<l>dev_open_window (0, WidthL + 10, WidthL, HeightL, 'white', WindowHandle2)</l>
<l>set_display_font (WindowHandle2, 11, 'mono', 'true', 'false')</l>
<l>dev_display (ImageRectifiedL)</l>
<l>disp_message (WindowHandle2, 'Right rectified image', 'window', 10, 10, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle2, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Determine the disparity image.</c>
<l>binocular_disparity (ImageRectifiedL, ImageRectifiedR, DisparityImage, Score, 'ncc', 17, 17, 5, 10, 40, 1, 0.1, 'left_right_check', 'none')</l>
<c>* </c>
<c>* Fill the gaps in the disparity image</c>
<l>get_domain (DisparityImage, RegionInpainting)</l>
<l>complement (RegionInpainting, RegionInpainting)</l>
<l>full_domain (DisparityImage, DisparityImage)</l>
<l>harmonic_interpolation (DisparityImage, RegionInpainting, DisparityImage, 0.001)</l>
<c>* </c>
<c>* Display the disparity image</c>
<l>dev_set_window (WindowHandle1)</l>
<l>dev_display (DisparityImage)</l>
<l>disp_message (WindowHandle1, 'Disparity image', 'window', 10, 10, 'black', 'true')</l>
<c>* </c>
<c>* Compute the 3D coordinates</c>
<c>* *******************************************</c>
<c>* </c>
<c>* Transform the disparity image into images X, Y and Z.</c>
<c>* The gray values in X, Y and Z represent the x, y, and z</c>
<c>* coordinates of the pixels (Row, Column).</c>
<l>disparity_image_to_xyz (DisparityImage, X, Y, Z, RectCamParL, RectCamParR, RectLPosRectR)</l>
<c>* </c>
<c>* Visualize the 3D points in the 3D space</c>
<c>* *******************************************</c>
<c>* </c>
<c>* Scale Z (for better visualization)</c>
<l>scale_image (Z, Z, 2, 0)</l>
<c>* </c>
<c>* Reduce impact of inaccuracies in visualization</c>
<l>threshold (Z, Regions, 0.415, 0.5)</l>
<l>reduce_domain (Z, Regions, ZThresholded)</l>
<c>* </c>
<c>* Add the gray values to the point cloud.</c>
<l>xyz_attrib_to_object_model_3d (X, Y, ZThresholded, ImageRectifiedL, '&amp;gray', ObjectModel3D)</l>
<c>* </c>
<c>* Visualize the result</c>
<l>prepare_object_model_3d (ObjectModel3D, 'segmentation', 'true', 'max_area_holes', 100)</l>
<l>create_pose (-0.025, -0.37, 1.7, 300, 12, 180, 'Rp+T', 'gba', 'point', Pose)</l>
<l>visualize_object_model_3d (WindowHandle2, ObjectModel3D, [], Pose, 'color_attrib', '&amp;gray', [], [], [], PoseOut)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
