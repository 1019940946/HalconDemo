<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to read ECC200 symbols</c>
<c>* with heavily disturbed finder pattern. In this example,</c>
<c>* one or more sides of the finder pattern are deformed.</c>
<c>* Therefore some example images that contain ECC200 symbols</c>
<c>* with similar disturbances are used to train a data code model</c>
<c>* which is then used to find the data codes.</c>
<c>* </c>
<c>* Note that alternatively, you can also set the parameter</c>
<c>* 'finder_pattern_tolerance' to 'high' with the operator</c>
<c>* set_data_code_2d_param or create_data_code_2d_model.</c>
<c>* </c>
<c>* Initialize image path and visual settings</c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>ImageFiles := 'datacode/ecc200/ecc200_damaged_finder_pattern_'</l>
<l>ImageFilesTrain := 'datacode/ecc200/ecc200_damaged_finder_pattern_training_'</l>
<l>ImageNum := 19</l>
<l>ImageTrainNum := 5</l>
<l>read_image (Image, ImageFiles + '01')</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('green')</l>
<c>* </c>
<c>* Display short description</c>
<l>Message := 'This program demonstrates how to find and decode'</l>
<l>Message[1] := 'ECC200 symbols that have a heavily disturbed finder pattern.'</l>
<l>Message[2] := 'To read these symbols successfully, some example images'</l>
<l>Message[3] := 'that contain ECC200 symbols with similar disturbances'</l>
<l>Message[4] := 'are used to train the data code reader.'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Step 1: Create a 2d data code model</c>
<c>* ----------------------------------------------------</c>
<c>* Create a 2d data code model of the 2d data code class</c>
<c>* 'Data Matrix ECC 200'.</c>
<l>create_data_code_2d_model ('Data Matrix ECC 200', [], [], DataCodeHandle)</l>
<c>* </c>
<c>* Step 2: Train the model</c>
<c>* -------------------------------------------------------</c>
<c>* Train the model on some images containing ECC 200 symbols</c>
<c>* with disturbed finder pattern</c>
<l>for Index := 1 to ImageTrainNum by 1</l>
<l>    read_image (Image, ImageFilesTrain + Index$'.2d')</l>
<c>    * </c>
<c>    * Find and decode the data codes</c>
<l>    find_data_code_2d (Image, SymbolXLDs, DataCodeHandle, 'train', 'all', ResultHandles, DecodedDataStrings)</l>
<c>    * </c>
<c>    * Display results</c>
<l>    dev_display (Image)</l>
<l>    dev_display (SymbolXLDs)</l>
<l>    TitleMessage := 'Train on image ' + Index + ' of ' + ImageTrainNum</l>
<l>    display_found_data_codes (SymbolXLDs, WindowHandle, DecodedDataStrings, TitleMessage, [], 'forest green', 'black')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* Display message about the next step</c>
<l>dev_clear_window ()</l>
<l>Message := 'The trained data code model is now used to find the data codes'</l>
<l>Message[1] := 'in a sequence of images with similar disturbances.'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Step 3: Read the data codes</c>
<c>* -------------------------------------------------------</c>
<c>* Search and read the data codes with the trained model</c>
<c>* in each image and display the decoded string for each</c>
<c>* found data code</c>
<l>for Index := 1 to ImageNum by 1</l>
<l>    read_image (Image, ImageFiles + Index$'.2d')</l>
<l>    dev_display (Image)</l>
<c>    * </c>
<c>    * Find and decode the data codes and measure the runtime</c>
<l>    count_seconds (T1)</l>
<l>    find_data_code_2d (Image, SymbolXLDs, DataCodeHandle, [], [], ResultHandles, DecodedDataStrings)</l>
<l>    count_seconds (T2)</l>
<l>    Time := (T2 - T1) * 1000.0</l>
<c>    * </c>
<c>    * Display the results</c>
<l>    TitleMessage := 'Image ' + Index + ' of ' + ImageNum</l>
<l>    ResultMessage := 'Data code found in ' + Time$'.1f' + ' ms'</l>
<l>    display_found_data_codes (SymbolXLDs, WindowHandle, DecodedDataStrings, TitleMessage, ResultMessage, 'forest green', 'black')</l>
<c>    * </c>
<c>    * If no data codes are found</c>
<l>    if (|ResultHandles| == 0)</l>
<l>        disp_message (WindowHandle, 'No Symbol found (in ' + Time$'.1f' + ' ms )', 'window', 12, 12, 'black', 'true')</l>
<l>    endif</l>
<c>    * </c>
<c>    * Deactivate the following lines to run the program without breaks</c>
<l>    if (Index &lt; ImageNum)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<c>* Clear the data code model</c>
<l>clear_data_code_2d_model (DataCodeHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="display_found_data_codes">
<interface>
<io>
<par name="SymbolXLDs" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="DecodedDataStrings" base_type="ctrl" dimension="0"/>
<par name="TitleMessage" base_type="ctrl" dimension="0"/>
<par name="ResultMessage" base_type="ctrl" dimension="0"/>
<par name="ColorDecodedStrings" base_type="ctrl" dimension="0"/>
<par name="ColorResult" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure displays the results of the search for</c>
<c>* 2d data codes. The data strings are displayed accordingly</c>
<c>* to their length so that the whole string is visible.</c>
<c>* If the data strings are too long only the first 50 chars</c>
<c>* are displayed.</c>
<c>* </c>
<c>* Input parameters are the XLD contours of the decoded</c>
<c>* data symbols, the decoded data strings, the windowhandle,</c>
<c>* a title message, a result message, the color of the decoded</c>
<c>* strings and the color of the result message.</c>
<c>* </c>
<c>* Display the result of the search for each found data code</c>
<l>for J := 0 to |DecodedDataStrings| - 1 by 1</l>
<c>    * </c>
<c>    * Display the XLD contour</c>
<l>    select_obj (SymbolXLDs, SymbolXLD, J + 1)</l>
<l>    get_contour_xld (SymbolXLD, Row, Column)</l>
<l>    dev_display (SymbolXLD)</l>
<c>    * </c>
<c>    * Display messages</c>
<c>    * ------------------</c>
<c>    * Determine the length of the dislayed decoded data string</c>
<l>    get_window_extents (WindowHandle, Row1, Column1, Width, Height)</l>
<l>    get_string_extents (WindowHandle, DecodedDataStrings[J], Ascent, Descent, TWidth, THeight)</l>
<l>    if (TWidth &gt; Width)</l>
<l>        DecodedDataStrings[J] := DecodedDataStrings[J]{0:50} + '...'</l>
<l>        get_string_extents (WindowHandle, DecodedDataStrings[J], Ascent, Descent, TWidth, THeight)</l>
<l>    endif</l>
<c>    * </c>
<c>    * Split the decoded string in new lines for better readability</c>
<l>    tuple_regexp_replace (DecodedDataStrings[J], ['[\\r\\f,^#;]','replace_all'], '\n', DecodedData)</l>
<l>    tuple_split (DecodedData, '\n', DecodedDataSubstrings)</l>
<c>    * </c>
<c>    * Determine the position of the displayed decoded data string</c>
<l>    if (max(Row) &gt; 420 and min(Row) &lt; 40)</l>
<l>        TPosRow := max(Row) - 30</l>
<l>    elseif (max(Row) &gt; 420)</l>
<l>        TPosRow := min(Row) - 20</l>
<l>    elseif (min(Row) &lt; 100)</l>
<l>        TPosRow := max(Row) - 20</l>
<l>    else</l>
<l>        TPosRow := max(Row) - 30</l>
<l>    endif</l>
<l>    TPosColumn := max([min([mean(Column) - TWidth / 2,Width - 32 - TWidth]),12])</l>
<l>    disp_message (WindowHandle, DecodedDataStrings[J], 'image', TPosRow, TPosColumn, ColorDecodedStrings, 'true')</l>
<l>endfor</l>
<c>* </c>
<c>* Display the title message and result message</c>
<l>disp_message (WindowHandle, TitleMessage, 'window', 12, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle, ResultMessage, 'window', 40, 12, ColorResult, 'true')</l>
<l>return ()</l>
</body>
<docu id="display_found_data_codes">
<parameters>
<parameter id="ColorDecodedStrings"/>
<parameter id="ColorResult"/>
<parameter id="DecodedDataStrings"/>
<parameter id="ResultMessage"/>
<parameter id="SymbolXLDs"/>
<parameter id="TitleMessage"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
