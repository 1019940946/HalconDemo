<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to find and decode ECC200 symbols</c>
<c>* that have a very small module size.</c>
<c>* </c>
<c>* To read these symbols successfully, the parameter</c>
<c>* 'small_modules_robustness', which is set to 'low' by default, must</c>
<c>* be set to 'high'. Additionally, the parameter 'module_size_min'</c>
<c>* has to be set to the minimum expected module size, in this case</c>
<c>* to the value 1.</c>
<c>* In order to show the influence of the parameter 'small_modules_robustness'</c>
<c>* on the data code reader, the operator find_data_code_2d is called</c>
<c>* twice with different settings of the regarding parameter.</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>read_image (Image, 'datacode/ecc200/ecc200_cpu_001')</l>
<l>ZoomFactorStart := 0.8</l>
<l>zoom_image_factor (Image, ImageZoomed, ZoomFactorStart, ZoomFactorStart, 'constant')</l>
<l>dev_open_window_fit_image (ImageZoomed, 0, 0, -1, -1, WindowHandle1)</l>
<c>* </c>
<c>* Open a second window with in the same size as the first window</c>
<l>get_window_extents (WindowHandle1, Row, Column, WidthOriginal, HeightOriginal)</l>
<l>dev_open_window_fit_size (0, WidthOriginal + 10, WidthOriginal, HeightOriginal, -1, -1, WindowHandle2)</l>
<l>dev_set_line_width (2)</l>
<c>* </c>
<c>* Create two ECC 200 data code models for 'small_modules_robustness' set to 'high'</c>
<c>* and 'small_modules_robustness' set to 'low', respectively (set 'module_size_min' to 1).</c>
<l>create_data_code_2d_model ('Data Matrix ECC 200', ['small_modules_robustness','module_size_min'], ['high',1], DataCodeHandle1)</l>
<l>create_data_code_2d_model ('Data Matrix ECC 200', ['small_modules_robustness','module_size_min'], ['low',1], DataCodeHandle2)</l>
<c>* </c>
<c>* Within the loop:</c>
<c>* + In each iteration step, the image is scaled down again</c>
<c>* + Find the data code with 'small_modules_robustness' set to 'high'</c>
<c>* + Find data code with 'small_modules_robustness' set to 'low'</c>
<c>* + Display the results for each setting in different windows</c>
<l>Size := 16</l>
<l>for ZoomFactor := ZoomFactorStart to 0.3 by -0.1</l>
<l>    zoom_image_factor (Image, ImageZoomed, ZoomFactor, ZoomFactor, 'constant')</l>
<l>    set_display_font (WindowHandle1, Size, 'mono', 'true', 'false')</l>
<l>    set_display_font (WindowHandle2, Size, 'mono', 'true', 'false')</l>
<l>    Size := Size - 1</l>
<c>    * </c>
<c>    * Find data code with 'small_modules_robustness' set to 'high'</c>
<l>    find_data_code_2d (ImageZoomed, SymbolXLDs1, DataCodeHandle1, [], [], ResultHandles1, DecodedDataStrings1)</l>
<c>    * </c>
<c>    * Find data code with 'small_modules_robustness' set to 'low'</c>
<l>    find_data_code_2d (ImageZoomed, SymbolXLDs2, DataCodeHandle2, [], [], ResultHandles2, DecodedDataStrings2)</l>
<c>    * </c>
<c>    * Display the results for both settings</c>
<l>    if (Size &lt; 11)</l>
<l>        Message := 'Small modules robustness:\n'</l>
<l>    else</l>
<l>        Message := 'Small modules robustness: '</l>
<l>    endif</l>
<c>    * For 'small_modules_robustness: high'</c>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_resize_window_fit_image (ImageZoomed, 0, 0, 1000, 1000)</l>
<l>    dev_set_line_width (2)</l>
<l>    dev_display (ImageZoomed)</l>
<l>    disp_message (WindowHandle1, Message + 'high', 'window', 4, 4, 'black', 'true')</l>
<l>    disp_results (SymbolXLDs1, WindowHandle1, DataCodeHandle1, ResultHandles1, DecodedDataStrings1)</l>
<c>    * For 'small_modules_robustness: low'</c>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_resize_window_fit_image (ImageZoomed, 0, WidthOriginal + 10, 1000, 1000)</l>
<l>    dev_display (ImageZoomed)</l>
<l>    disp_message (WindowHandle2, Message + 'low', 'window', 4, 4, 'black', 'true')</l>
<l>    disp_results (SymbolXLDs2, WindowHandle2, DataCodeHandle2, ResultHandles2, DecodedDataStrings2)</l>
<l>    disp_continue_message (WindowHandle2, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* Clear the data code model</c>
<l>clear_data_code_2d_model (DataCodeHandle1)</l>
<l>clear_data_code_2d_model (DataCodeHandle2)</l>
<l>dev_close_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="disp_results">
<interface>
<io>
<par name="SymbolXLDs" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="DataCodeHandle" base_type="ctrl" dimension="0"/>
<par name="ResultHandles" base_type="ctrl" dimension="0"/>
<par name="DecodedDataStrings" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>if (|ResultHandles| &gt; 0)</l>
<l>    get_data_code_2d_results (DataCodeHandle, ResultHandles, ['module_height','module_width'], ModuleSize)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (SymbolXLDs)</l>
<l>    select_obj (SymbolXLDs, SymbolXLD, 1)</l>
<l>    get_contour_xld (SymbolXLD, Row, Col)</l>
<l>    Message := 'Module height: ' + ModuleSize[0]$'.4f'</l>
<l>    Message[1] := 'Module width: ' + ModuleSize[1]$'.4f'</l>
<l>    disp_message (WindowHandle, Message, 'image', 40, 3, 'black', 'true')</l>
<l>    dev_set_color ('white')</l>
<l>    disp_message (WindowHandle, DecodedDataStrings, 'image', min(Row), max(Col), 'green', 'false')</l>
<l>else</l>
<l>    disp_message (WindowHandle, 'Data code not found', 'image', 45, 20, 'red', 'true')</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="disp_results">
<short lang="en_US">This procedure will display the results of the data code reader</short>
<parameters>
<parameter id="DataCodeHandle"/>
<parameter id="DecodedDataStrings"/>
<parameter id="ResultHandles"/>
<parameter id="SymbolXLDs"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
