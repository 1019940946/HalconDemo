<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="13.0">
<procedure name="main">
<interface/>
<body>
<c>* This example shows how to use bead inspection to verify</c>
<c>* adhesive beads. Bead inspection can be used to detect the</c>
<c>* following errors:</c>
<c>*  - segments where adhesive is missing</c>
<c>*  - segments with too much or too little adhesive</c>
<c>*  - segments where adhesive is too far from its destined</c>
<c>*    position</c>
<c>* </c>
<c>* apply_bead_inspection_model requires that the images to inspect</c>
<c>* are already aligned with the reference contour. In this example,</c>
<c>* the alignment is based on planar deformable matching.</c>
<c>* </c>
<l>dev_update_off ()</l>
<c>* </c>
<c>* Create the planar deformable model to align images with the</c>
<c>* reference contour</c>
<l>prepare_alignment (RegionPart, RowT, ColumnT, ModelID)</l>
<l>smallest_rectangle1 (RegionPart, PartRow1, PartColumn1, PartRow2, PartColumn2)</l>
<c>* </c>
<c>* Define the reference path of the adhesive beads. This path could</c>
<c>* also be generated by drawing it on a reference image with, e.g.,</c>
<c>* draw_nurbs.</c>
<l>gen_contour_nurbs_xld (ContourRef, [701.767,626.953,538.867,443.54,390.447,360.28,354.247,363.9,400.1,458.02,509.907,588.34,659.533,696.94], [319.24,336.133,367.507,431.46,489.38,546.093,646.247,722.267,776.567,826.04,869.48,912.92,934.64,929.813], 'auto', [15,15,15,15,15,15,15,15,15,15,15,15,15,15], 3, 1, 5)</l>
<c>* </c>
<c>* Create a new bead inspection model with the following parameters</c>
<l>TargetWidth := 14</l>
<l>WidthTolerance := 7</l>
<l>PositionTolerance := 30</l>
<l>Polarity := 'dark'</l>
<l>create_bead_inspection_model (ContourRef, TargetWidth, WidthTolerance, PositionTolerance, Polarity, [], [], BeadInspectionModel)</l>
<c>* </c>
<c>* Show a correct adhesive bead together with the reference contour</c>
<l>read_image (Image, 'bead/adhesive_bead_01')</l>
<l>align_bead (Image, ImageAligned, ModelID, RowT, ColumnT)</l>
<c>* </c>
<c>* Create two parallel contours to give an impression of how</c>
<c>* thick a correct adhesive bead should be</c>
<l>gen_parallel_contour_xld (ContourRef, ModelSide1, 'regression_normal', TargetWidth * 0.5)</l>
<l>gen_parallel_contour_xld (ContourRef, ModelSide2, 'regression_normal', -TargetWidth * 0.5)</l>
<l>concat_obj (ModelSide1, ModelSide2, ModelSides)</l>
<c>* </c>
<c>* Create two parallel contours to give an impression of where</c>
<c>* a correct adhesive bead should be located</c>
<l>gen_parallel_contour_xld (ContourRef, PositionToleranceSide1, 'regression_normal', PositionTolerance)</l>
<l>gen_parallel_contour_xld (ContourRef, PositionToleranceSide2, 'regression_normal', -PositionTolerance)</l>
<l>concat_obj (PositionToleranceSide1, PositionToleranceSide2, PositionToleranceSides)</l>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_size (0, 0, PartColumn2 - PartColumn1 + 1, PartRow2 - PartRow1 + 41, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_part (PartRow1 - 20, PartColumn1, PartRow2 + 20, PartColumn2)</l>
<l>dev_display (ImageAligned)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (ContourRef)</l>
<l>dev_set_line_width (1)</l>
<l>dev_display (ModelSides)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (PositionToleranceSides)</l>
<l>Message := 'Correct adhesive bead and the reference contour. The'</l>
<l>Message[1] := 'yellow contours indicate the range of position tolerance.'</l>
<l>dev_disp_text (Message, 'window', 12, 12, 'black', [], [])</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>stop ()</l>
<c>* </c>
<c>* </c>
<c>* Now, perform the inspection task</c>
<l>TextOffset := 20</l>
<l>NumImages := 7</l>
<l>for Index := 1 to NumImages by 1</l>
<l>    read_image (Image, 'bead/adhesive_bead_' + Index$'02')</l>
<c>    * </c>
<c>    * Align the input image with the reference image</c>
<l>    align_bead (Image, ImageAligned, ModelID, RowT, ColumnT)</l>
<c>    * </c>
<c>    * Apply the bead inspection model to the aligned image</c>
<l>    apply_bead_inspection_model (ImageAligned, LeftContour, RightContour, ErrorSegment, BeadInspectionModel, ErrorType)</l>
<c>    * </c>
<c>    * Display the segmented adhesive bead with its error segments</c>
<l>    set_window_param (WindowHandle, 'flush', 'false')</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (ImageAligned)</l>
<l>    dev_set_line_width (1)</l>
<l>    dev_set_color ('white')</l>
<l>    dev_display (ContourRef)</l>
<l>    dev_display (ModelSides)</l>
<l>    dev_display (PositionToleranceSides)</l>
<l>    dev_set_line_width (2)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (LeftContour)</l>
<l>    dev_display (RightContour)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (ErrorSegment)</l>
<l>    if (|ErrorType| == 0)</l>
<c>        * No errors detected</c>
<l>        Message := 'Adhesive bead is OK'</l>
<l>        dev_disp_text (Message, 'window', 12, 12, 'white', 'box_color', 'forest green')</l>
<l>        dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>        flush_buffer (WindowHandle)</l>
<l>        set_window_param (WindowHandle, 'flush', 'true')</l>
<l>        stop ()</l>
<l>    else</l>
<c>        * Display errors by error class</c>
<l>        Message[0] := 'Adhesive bead is not OK:'</l>
<c>        * </c>
<l>        ErrorClasses := ['no bead','too thin','too thick','incorrect position']</l>
<l>        for ClassIndex := 0 to |ErrorClasses| - 1 by 1</l>
<l>            Class := ErrorClasses[ClassIndex]</l>
<l>            ErrorIndices := find(ErrorType,Class)</l>
<l>            if (ErrorIndices != -1)</l>
<l>                select_obj (ErrorSegment, SelectedSegments, ErrorIndices + 1)</l>
<l>                dev_set_color ('red')</l>
<l>                dev_set_line_width (3)</l>
<l>                if (Class != 'no bead')</l>
<l>                    gen_display_segments (SelectedSegments, LeftContour, RightContour, ErrorParts)</l>
<l>                    dev_display (ErrorParts)</l>
<l>                else</l>
<l>                    dev_display (SelectedSegments)</l>
<l>                endif</l>
<l>                area_center_points_xld (SelectedSegments, Area, Row, Column)</l>
<l>                for E := 0 to |ErrorIndices| - 1 by 1</l>
<l>                    dev_disp_text (ErrorIndices[E] + 1, 'image', Row[E], Column[E] - TextOffset, 'white', 'box_color', 'red')</l>
<l>                    TextOffset := 20 - TextOffset</l>
<l>                endfor</l>
<l>            endif</l>
<l>        endfor</l>
<l>        dev_disp_text (Message, 'window', 12, 12, 'white', 'box_color', 'red')</l>
<l>        dev_disp_text ([1:|ErrorType|] + ': ' + ErrorType, 'image', 500, 500, 'red', 'box', 'false')</l>
<l>        if (Index &lt; NumImages)</l>
<l>            dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>            flush_buffer (WindowHandle)</l>
<l>            set_window_param (WindowHandle, 'flush', 'true')</l>
<l>            stop ()</l>
<l>        endif</l>
<l>    endif</l>
<l>endfor</l>
<l>flush_buffer (WindowHandle)</l>
<l>set_window_param (WindowHandle, 'flush', 'true')</l>
<c>* </c>
<c>* Release all allocated memory</c>
<l>clear_bead_inspection_model (BeadInspectionModel)</l>
<l>clear_deformable_model (ModelID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="align_bead">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageAligned" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ModelID" base_type="ctrl" dimension="0"/>
<par name="RowT" base_type="ctrl" dimension="0"/>
<par name="ColumnT" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Align the test image with the reference image using</c>
<c>* planar deformable matching</c>
<l>find_planar_uncalib_deformable_model (Image, ModelID, -0.39, 0.78, 1, 1, 1, 1, 0.4, 1, 1, 5, 0.9, [], [], HomMat2D1, Score)</l>
<l>hom_mat2d_invert (HomMat2D1, HomMat2DInvert)</l>
<l>hom_mat2d_translate (HomMat2DInvert, RowT, ColumnT, HomMat2DTranslate)</l>
<l>projective_trans_image (Image, ImageAligned, HomMat2DTranslate, 'bilinear', 'false', 'false')</l>
<l>return ()</l>
</body>
<docu id="align_bead">
<parameters>
<parameter id="ColumnT"/>
<parameter id="Image"/>
<parameter id="ImageAligned"/>
<parameter id="ModelID"/>
<parameter id="RowT"/>
</parameters>
</docu>
</procedure>
<procedure name="close_parallels">
<interface>
<io>
<par name="ParallelContours1" base_type="iconic" dimension="0"/>
<par name="ParallelContours2" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Contour" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>count_obj (ParallelContours1, Number)</l>
<l>gen_empty_obj (Contour)</l>
<l>for Index := 1 to Number by 1</l>
<l>    select_obj (ParallelContours1, Parallel1, Index)</l>
<l>    select_obj (ParallelContours2, Parallel2, Index)</l>
<l>    get_contour_xld (Parallel1, Row1, Col1)</l>
<l>    get_contour_xld (Parallel2, Row2, Col2)</l>
<l>    gen_contour_polygon_xld (ClosedContour, [Row1,inverse(Row2),Row1[0]], [Col1,inverse(Col2),Col1[0]])</l>
<l>    concat_obj (Contour, ClosedContour, Contour)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="close_parallels">
<parameters>
<parameter id="Contour"/>
<parameter id="ParallelContours1"/>
<parameter id="ParallelContours2"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_display_segments">
<interface>
<io>
<par name="TooThinSegments" base_type="iconic" dimension="0"/>
<par name="LeftContour" base_type="iconic" dimension="0"/>
<par name="RightContour" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ContoursIntersection" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c>* Construct contours used to visualize the error segments</c>
<c>* returned by the bead inspection</c>
<l>gen_parallel_contour_xld (TooThinSegments, ParallelContours1, 'regression_normal', 50)</l>
<l>gen_parallel_contour_xld (TooThinSegments, ParallelContours2, 'regression_normal', -50)</l>
<l>close_parallels (ParallelContours1, ParallelContours2, Contour)</l>
<l>close_parallels (LeftContour, RightContour, Contour1)</l>
<l>intersection_closed_contours_xld (Contour, Contour1, ContoursIntersection)</l>
<l>return ()</l>
</body>
<docu id="gen_display_segments">
<parameters>
<parameter id="ContoursIntersection"/>
<parameter id="LeftContour"/>
<parameter id="RightContour"/>
<parameter id="TooThinSegments"/>
</parameters>
</docu>
</procedure>
<procedure name="prepare_alignment">
<interface>
<oo>
<par name="RegionPart" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="RowT" base_type="ctrl" dimension="0"/>
<par name="ColumnT" base_type="ctrl" dimension="0"/>
<par name="ModelID" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Set image coordinates of four points used to determine</c>
<c>* a projective transformation to rectify the reference</c>
<c>* image</c>
<l>Row := [658.232,291.923,314.817,691.533]</l>
<l>Col := [330.071,316.617,971.032,947.008]</l>
<c>* Set respective point coordinates to which the above</c>
<c>* defined points will be rectified</c>
<l>W := 5.4</l>
<l>H := 3.4</l>
<l>Row1 := 300 + [H,0,0,H] * 120.0</l>
<l>Col1 := 300 + [0,0,W,W] * 120.0</l>
<l>vector_to_proj_hom_mat2d (Row, Col, Row1, Col1, 'normalized_dlt', [], [], [], [], [], [], HomMat2D, Covariance)</l>
<c>* </c>
<c>* Read the reference image (image withou adhesive bead)</c>
<l>read_image (ImageRef, 'bead/adhesive_bead_ref')</l>
<c>* </c>
<c>* Rectify the reference image</c>
<l>projective_trans_image (ImageRef, ImageRefTrans, HomMat2D, 'bilinear', 'false', 'false')</l>
<c>* </c>
<c>* Determine a region that contains the planar</c>
<c>* part on which the adhesive bead will be applied.</c>
<c>* This planar part will also be used to align the</c>
<c>* test images with the reference image.</c>
<l>binary_threshold (ImageRefTrans, Region, 'smooth_histo', 'light', UsedThreshold)</l>
<l>opening_circle (Region, RegionOpening, 5.5)</l>
<l>connection (RegionOpening, ConnectedRegions)</l>
<l>area_center (ConnectedRegions, AreaCR, RowCR, ColumnCR)</l>
<l>select_obj (ConnectedRegions, ObjectSelected, sort_index(-AreaCR)[0] + 1)</l>
<l>fill_up (ObjectSelected, RegionFillUp)</l>
<l>dilation_circle (RegionFillUp, RegionPart, 5.5)</l>
<l>reduce_domain (ImageRefTrans, RegionPart, ImageReduced)</l>
<l>area_center (RegionPart, AreaT, RowT, ColumnT)</l>
<l>create_planar_uncalib_deformable_model (ImageReduced, 'auto', [], [], 'auto', 1, [], 'auto', 1, [], 'auto', 'none', 'use_polarity', 'auto', 'auto', [], [], ModelID)</l>
<l>return ()</l>
</body>
<docu id="prepare_alignment">
<parameters>
<parameter id="ColumnT"/>
<parameter id="ModelID"/>
<parameter id="RegionPart"/>
<parameter id="RowT"/>
</parameters>
</docu>
</procedure>
</hdevelop>
