<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>*这个示例程序训练一个字体文件，字符a到g。字体用于</c>
<c>*示例程序classify_characters_ocr.hdev</c>
<c>*读取相应的字符。 </c>
<c>* </c>
<l>read_image (Image, 'ocr/chars_training_01.png')</l>
<l>get_image_pointer1 (Image, Pointer, Type, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'white', WindowHandle)</l>
<l>set_display_font (WindowHandle, 12, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>dev_display (Image)</l>
<l>dev_update_window ('off')</l>
<l>dev_update_pc ('off')</l>
<l>dev_update_var ('off')</l>
<c>* </c>
<c>* 为字符A到G创建SVM分类器</c>
<l>ClassNames := ['A','B','C','D','E','F','G']</l>
<l>create_ocr_class_svm (8, 10, 'constant', ['convexity','num_holes','projection_horizontal','projection_vertical'], ClassNames, 'rbf', 0.02, 0.05, 'one-versus-one', 'normalization', 10, OCRHandle)</l>
<c></c>
<c>*读取培训图像并存储区域</c>
<c>*字符到训练文件</c>
<l>for I := 1 to 7 by 1</l>
<l>    read_image (Image, 'ocr/chars_training_' + I$'.2d')</l>
<l>    dev_display (Image)</l>
<l>    get_regions (Image, SortedRegions)</l>
<l>    count_obj (SortedRegions, NumberObjects)</l>
<l>    for J := 1 to NumberObjects by 1</l>
<l>        select_obj (SortedRegions, ObjectSelected, J)</l>
<l>        if (I == 1 and J == 1)</l>
<l>            write_ocr_trainf (ObjectSelected, Image, ClassNames[J - 1], 'train_characters_ocr.trf')</l>
<l>        else</l>
<l>            append_ocr_trainf (ObjectSelected, Image, ClassNames[J - 1], 'train_characters_ocr.trf')</l>
<l>        endif</l>
<l>        dev_set_color ('gray')</l>
<l>        dev_display (ObjectSelected)</l>
<l>        disp_message (WindowHandle, ClassNames[J - 1], 'window', 10, 10 + (J * 20), 'black', 'true')</l>
<l>*         stop ()</l>
<l>    endfor</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* 检查培训文件的内容是否正确</c>
<l>read_ocr_trainf (Characters, 'train_characters_ocr.trf', CharacterNames)</l>
<l>count_obj (Characters, NumberCharacters)</l>
<l>for I := 1 to NumberCharacters by 1</l>
<l>    select_obj (Characters, CharacterSelected, I)</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (CharacterSelected)</l>
<l>    disp_message (WindowHandle, CharacterNames[I - 1], 'window', 10, 10, 'black', 'true')</l>
<l>*     stop ()</l>
<l>endfor</l>
<c>* </c>
<c>*训练字体，将字体写入文件，</c>
<c>*并从内存中清除分类器</c>
<l>trainf_ocr_class_svm (OCRHandle, 'train_characters_ocr.trf', 0.001, 'default')</l>
<l>reduce_ocr_class_svm (OCRHandle, 'bottom_up', 2, 0.001, OCRHandleReduced)</l>
<l>write_ocr_class_svm (OCRHandleReduced, 'font_characters_ocr')</l>
<c>* </c>
<l>clear_ocr_class_svm (OCRHandle)</l>
<l>clear_ocr_class_svm (OCRHandleReduced)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="get_regions">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="SortedRegions" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>dev_set_color ('white')</l>
<l>threshold (Image, Region, 0, 125)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 50, 999999)</l>
<l>sort_region (SelectedRegions, SortedRegions, 'character', 'true', 'row')</l>
<l>return ()</l>
</body>
<docu id="get_regions">
<short lang="en_US">extract the regions of the citrus fruits</short>
<parameters>
<parameter id="Image"/>
<parameter id="SortedRegions"/>
</parameters>
</docu>
</procedure>
</hdevelop>
