<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>* This example shows how to train a deep learning fruit classifier, along with</c>
<c>* a short overview of the necessary steps.</c>
<c>* </c>
<c>* Initialization.</c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>WindowWidth := 800</l>
<l>WindowHeight := 600</l>
<l>dev_open_window_fit_size (0, 0, WindowWidth, WindowHeight, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<c>* </c>
<c>* Some procedures use a random number generator. Set the seed for reproducibility.</c>
<l>set_system ('seed_rand', 42)</l>
<c>* </c>
<c>* Introduction text.</c>
<l>dev_disp_introduction_text ()</l>
<l>stop ()</l>
<l>dev_close_window ()</l>
<l>dev_resize_window_fit_size (0, 0, WindowWidth, WindowHeight, -1, -1)</l>
<l>dev_clear_window ()</l>
<c>* </c>
<c>* ** TRAINING **</c>
<c>* </c>
<c>* Read one of the pretrained networks.</c>
<l>read_dl_classifier ('pretrained_dl_classifier_compact.hdl', DLClassifierHandle)</l>
<c>* Path to directory with images.</c>
<l>RawDataFolder := 'food/' + ['apple_braeburn','apple_golden_delicious','apple_topaz','peach','pear']</l>
<c>* Get the raw data set with labels.</c>
<l>read_dl_classifier_data_set (RawDataFolder, 'last_folder', RawImageFiles, Labels, LabelIndices, Classes)</l>
<c>* Path of output directory for preprocessed data set.</c>
<l>PreprocessedFolder := 'fruit_preprocessed'</l>
<c>* Set to true to overwrite existing images.</c>
<l>OverwritePreprocessingFolder := false</l>
<c>* By default, we will remove the folder with the preprocessed data.</c>
<c>* In a real application you might want to keep this data (if the</c>
<c>* preprocessing does not change to save time).</c>
<l>RemovePreprocessingAfterExample := true</l>
<c>* </c>
<c>* If the preprocessed has been generated already,</c>
<c>* we skip this part.</c>
<l>file_exists (PreprocessedFolder, FileExists)</l>
<l>if (not FileExists or OverwritePreprocessingFolder)</l>
<c>    * Preprocessing of the raw data.</c>
<l>    if (FileExists)</l>
<l>        remove_dir_recursively (PreprocessedFolder)</l>
<l>    endif</l>
<c>    * Create output directories.</c>
<l>    make_dir (PreprocessedFolder)</l>
<l>    for I := 0 to |Classes| - 1 by 1</l>
<l>        make_dir (PreprocessedFolder + '/' + Classes[I])</l>
<l>    endfor</l>
<c>    * Define output file names.</c>
<l>    parse_filename (RawImageFiles, BaseNames, Extensions, Directories)</l>
<l>    ObjectFilesOut := PreprocessedFolder + '/' + Labels + '/' + BaseNames + '.hobj'</l>
<c>    * Check if output file names</c>
<c>    * overlap in the preprocessed folder.</c>
<c>    * This is just a sanity check.</c>
<l>    check_output_file_names_for_duplicates (RawImageFiles, ObjectFilesOut)</l>
<c>    * Preprocess images and save them as hobj files.</c>
<l>    for I := 0 to |RawImageFiles| - 1 by 1</l>
<l>        read_image (Image, RawImageFiles[I])</l>
<c>        * Preprocess the image with a custom procedure</c>
<c>        * in order to remove the background.</c>
<l>        preprocess_dl_fruit_example (Image, ImagePreprocessed, DLClassifierHandle)</l>
<c>        * Write preprocessed image to hobj file.</c>
<l>        write_object (ImagePreprocessed, ObjectFilesOut[I])</l>
<l>        dev_disp_preprocessing_progress (I, RawImageFiles, PreprocessedFolder, WindowHandle)</l>
<l>    endfor</l>
<l>    dev_clear_window ()</l>
<l>    dev_disp_text ('Preprocessing done.', 'window', 'top', 'left', 'black', [], [])</l>
<l>endif</l>
<c>* </c>
<c>* 2) Split data into training, validation, and test set.</c>
<c>* </c>
<c>* Read the data, i.e., the paths of the images and their respective ground truth labels.</c>
<l>read_dl_classifier_data_set (PreprocessedFolder, 'last_folder', ImageFiles, Labels, LabelsIndices, Classes)</l>
<c>* </c>
<c>* Split the data into three subsets,</c>
<c>* for training 70%, validation 15%, and testing 15%.</c>
<l>TrainingPercent := 70</l>
<l>ValidationPercent := 15</l>
<l>split_dl_classifier_data_set (ImageFiles, Labels, TrainingPercent, ValidationPercent, TrainingImages, TrainingLabels, ValidationImages, ValidationLabels, TestImages, TestLabels)</l>
<c>* </c>
<c>* Set training hyper-parameters.</c>
<c>* In order to retrain the neural network, we have to specify</c>
<c>* the class names of our classification problem.</c>
<l>set_dl_classifier_param (DLClassifierHandle, 'classes', Classes)</l>
<c>* Set the batch size.</c>
<l>BatchSize := 64</l>
<l>set_dl_classifier_param (DLClassifierHandle, 'batch_size', BatchSize)</l>
<c>* Try to initialize the runtime environment.</c>
<l>try</l>
<l>    set_dl_classifier_param (DLClassifierHandle, 'runtime_init', 'immediately')</l>
<l>catch (Exception)</l>
<l>    dev_disp_error_text (Exception)</l>
<l>    if (RemovePreprocessingAfterExample and Exception[0] != 4104)</l>
<l>        remove_dir_recursively (PreprocessedFolder)</l>
<l>        dev_disp_text ('Preprocessed data in folder "' + PreprocessedFolder + '" have been deleted.', 'window', 'bottom', 'left', 'black', [], [])</l>
<l>    endif</l>
<l>    stop ()</l>
<l>endtry</l>
<c>* For this data set, an initial learning rate of 0.001</c>
<c>* has proven to yield good results.</c>
<l>InitialLearningRate := 0.001</l>
<l>set_dl_classifier_param (DLClassifierHandle, 'learning_rate', InitialLearningRate)</l>
<c>* In this example, we reduce the learning rate</c>
<c>* by a factor of 1/10 every 4th epoch.</c>
<l>LearningRateStepEveryNthEpoch := 30</l>
<l>LearningRateStepRatio := 0.1</l>
<c>* We iterate 100 times over the full training set.</c>
<l>NumEpochs := 100</l>
<c>* </c>
<c>* Train the classifier.</c>
<c>* </c>
<l>dev_clear_window ()</l>
<l>dev_disp_text ('Training has started...', 'window', 'top', 'left', 'black', [], [])</l>
<c>* </c>
<l>PlotEveryNthEpoch := 4</l>
<l>FileName := 'classifier_fruit.hdl'</l>
<l>train_fruit_classifier (DLClassifierHandle, FileName, NumEpochs, TrainingImages, TrainingLabels, ValidationImages, ValidationLabels, LearningRateStepEveryNthEpoch, LearningRateStepRatio, PlotEveryNthEpoch, WindowHandle)</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>stop ()</l>
<l>read_dl_classifier (FileName, DLClassifierHandle)</l>
<c>* </c>
<c>* Compute the confusion matrix for the validation data set.</c>
<l>get_predicted_classes (ValidationImages, DLClassifierHandle, PredictedClassesValidation)</l>
<l>gen_confusion_matrix (ValidationLabels, PredictedClassesValidation, [], [], WindowHandle, ConfusionMatrix)</l>
<l>dev_disp_text ('Validation data', 'window', 'top', 'left', 'gray', 'box', 'false')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>stop ()</l>
<l>dev_clear_window ()</l>
<c>* </c>
<c>* ** INFERENCE **</c>
<c>* </c>
<c>* This part shows a typical inference scenario.</c>
<c>* Read the classifier.</c>
<l>read_dl_classifier (FileName, DLClassifierHandle)</l>
<c>* If it is not possible to accumulate more than one image</c>
<c>* at a time the batch size should be set to 1.</c>
<l>set_dl_classifier_param (DLClassifierHandle, 'batch_size', 1)</l>
<c>* Set the runtime to 'cpu' to perform the inference on the</c>
<c>* CPU, if this is possible on the current hardware.</c>
<c>* (CPU inference is only supported on Intel compatible x86</c>
<c>* processors)</c>
<l>try</l>
<l>    set_dl_classifier_param (DLClassifierHandle, 'runtime', 'cpu')</l>
<l>    Runtime := 'cpu'</l>
<l>catch (Exception)</l>
<c>    * Keep the 'gpu' runtime if switching to 'cpu' failed.</c>
<l>    Runtime := 'gpu'</l>
<l>endtry</l>
<c>* This initializes the runtime environment immediately.</c>
<l>set_dl_classifier_param (DLClassifierHandle, 'runtime_init', 'immediately')</l>
<c>* </c>
<l>dev_resize_window_fit_size (0, 0, WindowWidth, WindowHeight, -1, -1)</l>
<l>dev_disp_inference_text (Runtime)</l>
<l>stop ()</l>
<c>* Read / acquire images in a loop and classify them.</c>
<l>for Index := 0 to 20 by 1</l>
<l>    ImageFile := RawImageFiles[floor(rand(1) * |RawImageFiles|)]</l>
<l>    read_image (Image, ImageFile)</l>
<l>    dev_resize_window_fit_image (Image, 0, 0, -1, -1)</l>
<l>    preprocess_dl_fruit_example (Image, ImagePreprocessed, DLClassifierHandle)</l>
<l>    apply_dl_classifier (ImagePreprocessed, DLClassifierHandle, DLClassifierResultHandle)</l>
<l>    get_dl_classifier_result (DLClassifierResultHandle, 'all', 'predicted_classes', PredictedClass)</l>
<c>    * </c>
<l>    dev_display (Image)</l>
<l>    Text := 'Predicted class: ' + PredictedClass</l>
<l>    dev_disp_text (Text, 'window', 'top', 'left', 'white', 'box', 'false')</l>
<l>    dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>    stop ()</l>
<l>endfor</l>
<l>stop ()</l>
<l>if (RemovePreprocessingAfterExample)</l>
<l>    remove_dir_recursively (PreprocessedFolder)</l>
<l>    dev_disp_text ('End of program.\nPreprocessed data have been deleted.', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>else</l>
<l>    dev_disp_text ('      End of program      ', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>endif</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="dev_disp_introduction_text">
<interface/>
<body>
<l>Text := 'This example program demonstrates how to train a deep learning classifier '</l>
<l>Text[|Text|] := 'capable of distinguishing different types of fruit. '</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Here, we only give a brief overview of the necessary steps. For more '</l>
<l>Text[|Text|] := 'detailed explanations, please have a look at the example '</l>
<l>Text[|Text|] := 'classifiy_pill_defects_deep_learning.hdev. '</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'You need a compatible GPU to run this example (see system requirements).'</l>
<c>* </c>
<l>dev_clear_window ()</l>
<l>dev_resize_window_fit_size (0, 0, 1024, 240, -1, -1)</l>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'white', 'box', 'false')</l>
<c>* Display example images,</c>
<c>* display a warning in case the images are not found.</c>
<l>try</l>
<l>    dev_disp_images_of_classes ()</l>
<l>catch (Exception)</l>
<l>    if (Exception[0] == 5200)</l>
<l>        dev_disp_missing_images_text ()</l>
<l>        stop ()</l>
<l>    else</l>
<l>        throw (Exception)</l>
<l>    endif</l>
<l>endtry</l>
<c>* Check if the runtime can be initialized.</c>
<l>try</l>
<l>    read_dl_classifier ('pretrained_dl_classifier_compact.hdl', DLClassifierHandle)</l>
<l>    set_dl_classifier_param (DLClassifierHandle, 'batch_size', 1)</l>
<l>    set_dl_classifier_param (DLClassifierHandle, 'runtime_init', 'immediately')</l>
<l>catch (Exception)</l>
<l>    dev_disp_error_text (Exception)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="dev_disp_introduction_text">
<parameters/>
</docu>
</procedure>
<procedure name="dev_disp_inference_text">
<interface>
<ic>
<par name="Runtime" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Text := 'INFERENCE'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'This part of the program is a brief introduction on how to '</l>
<l>Text[|Text|] := 'make use of your trained classifier. '</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'It is important that the same preprocessing as for the training '</l>
<l>Text[|Text|] := 'of the classifier is applied to the raw images. '</l>
<l>Text[|Text|] := ''</l>
<l>if (Runtime == 'cpu')</l>
<l>    Text[|Text|] := 'The \'cpu\' runtime has been selected for inference.'</l>
<l>endif</l>
<c>* </c>
<l>dev_clear_window ()</l>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'white', 'box', 'false')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>return ()</l>
</body>
<docu id="dev_disp_inference_text">
<parameters>
<parameter id="Runtime"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_disp_images_of_classes">
<interface/>
<body>
<l>FileName := ['food/apple_braeburn/apple_braeburn_002','food/apple_golden_delicious/apple_golden_delicious_001','food/apple_topaz/apple_topaz_002','food/peach/peach_001','food/pear/pear_001']</l>
<c></c>
<l>read_image (Image, FileName)</l>
<l>tile_images (Image, TiledImage, 3, 'horizontal')</l>
<c>* </c>
<l>dev_open_window_fit_image (TiledImage, 245, 0, -1, 300, WindowHandle1)</l>
<l>set_display_font (WindowHandle1, 14, 'mono', 'true', 'false')</l>
<l>dev_display (TiledImage)</l>
<l>dev_disp_text ('Apple Braeburn', 'window', 'top', 'left', 'black', [], [])</l>
<l>dev_disp_text ('Apple Golden Delicious', 'window', 'top', 'center', 'black', [], [])</l>
<l>dev_disp_text ('Apple Topaz', 'window', 'top', 'right', 'black', [], [])</l>
<l>dev_disp_text ('Peach', 'window', 'center', 'left', 'black', [], [])</l>
<l>dev_disp_text ('Pear', 'window', 'center', 'center', 'black', [], [])</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>return ()</l>
</body>
<docu id="dev_disp_images_of_classes">
<parameters/>
</docu>
</procedure>
<procedure name="check_output_file_names_for_duplicates">
<interface>
<ic>
<par name="RawImageFiles" base_type="ctrl" dimension="0"/>
<par name="ObjectFilesOut" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>CheckOutputFiles := uniq(sort(ObjectFilesOut))</l>
<l>if (|CheckOutputFiles| != |RawImageFiles|)</l>
<l>    SortedImageFiles := sort(ObjectFilesOut)</l>
<l>    for I := 0 to |SortedImageFiles| - 1 by 1</l>
<l>        if (SortedImageFiles[I] != CheckOutputFiles[I])</l>
<l>            throw ('Error some file(s) have the same output filenames: ' + SortedImageFiles[I])</l>
<l>        endif</l>
<l>    endfor</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="check_output_file_names_for_duplicates">
<parameters>
<parameter id="ObjectFilesOut"/>
<parameter id="RawImageFiles"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_disp_error_text">
<interface>
<ic>
<par name="Exception" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>ErrorAndAdviceText := 'An error occurred during runtime initialization.'</l>
<l>ErrorAndAdviceText := [ErrorAndAdviceText,'']</l>
<l>ErrorAndAdviceText := [ErrorAndAdviceText,'Error ' + Exception[0] + ': \'' + Exception[2] + '\'']</l>
<l>if (Exception[0] == 4104)</l>
<c>    * In case of out of device memory we can give advice.</c>
<l>    ErrorAndAdviceText := [ErrorAndAdviceText,'']</l>
<l>    ErrorAndAdviceText := [ErrorAndAdviceText,'Install a GPU with more RAM or reduce the batch size.']</l>
<l>    ErrorAndAdviceText := [ErrorAndAdviceText,'']</l>
<l>    ErrorAndAdviceText := [ErrorAndAdviceText,'Note that changing the batch size will have an influence on the results.']</l>
<l>endif</l>
<l>dev_clear_window ()</l>
<c>* Display text with line breaks after 60 characters.</c>
<l>dev_disp_text (regexp_replace(ErrorAndAdviceText + ' ',['(.{0,60})\\s','replace_all'],'$1\n'), 'window', 'center', 'left', 'red', [], [])</l>
<l>return ()</l>
</body>
<docu id="dev_disp_error_text">
<parameters>
<parameter id="Exception"/>
</parameters>
</docu>
</procedure>
<procedure name="train_fruit_classifier">
<interface>
<ic>
<par name="DLClassifierHandle" base_type="ctrl" dimension="0"/>
<par name="FileName" base_type="ctrl" dimension="0"/>
<par name="NumEpochs" base_type="ctrl" dimension="0"/>
<par name="TrainingImages" base_type="ctrl" dimension="0"/>
<par name="TrainingLabels" base_type="ctrl" dimension="0"/>
<par name="ValidationImages" base_type="ctrl" dimension="0"/>
<par name="ValidationLabels" base_type="ctrl" dimension="0"/>
<par name="LearningRateStepEveryNthEpoch" base_type="ctrl" dimension="0"/>
<par name="LearningRateStepRatio" base_type="ctrl" dimension="0"/>
<par name="PlotEveryNthEpoch" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* For the plot during training,</c>
<c>* we need to concatenate some intermediate results.</c>
<l>TrainingErrors := []</l>
<l>ValidationErrors := []</l>
<l>LearningRates := []</l>
<l>Epochs := []</l>
<l>LossByIteration := []</l>
<l>get_dl_classifier_param (DLClassifierHandle, 'batch_size', BatchSize)</l>
<l>MinValidationError := 1</l>
<c>* </c>
<c>* Create a tuple that includes all the iterations</c>
<c>* where the plot should be computed (including the last ieration).</c>
<l>NumBatchesInEpoch := int(floor(|TrainingImages| / real(BatchSize)))</l>
<l>NumTotalIterations := (NumBatchesInEpoch * NumEpochs) - 1</l>
<l>PlottedIterations := round([NumBatchesInEpoch * [0:PlotEveryNthEpoch:NumEpochs - 1],NumTotalIterations])</l>
<c>* </c>
<c>* TrainSequence is used for easier indexing of the training data.</c>
<l>tuple_gen_sequence (0, |TrainingImages| - 1, 1, TrainSequence)</l>
<c>* </c>
<c>* Select a subset of the training data set</c>
<c>* in order to obtain a fast approximation</c>
<c>* of the training error during training (plotting).</c>
<l>SelectPercentageTrainingImages := 100</l>
<l>select_percentage_dl_classifier_data (TrainingImages, TrainingLabels, SelectPercentageTrainingImages, TrainingImagesSelected, TrainingLabelsSelected)</l>
<c>* </c>
<l>for Epoch := 0 to NumEpochs - 1 by 1</l>
<c>    * In order to get randomness in each epoch,</c>
<c>    * the training set is shuffled every epoch.</c>
<l>    tuple_shuffle (TrainSequence, TrainSequence)</l>
<l>    for Iteration := 0 to NumBatchesInEpoch - 1 by 1</l>
<c>        * Select a batch from the training data set.</c>
<l>        BatchStart := Iteration * BatchSize</l>
<l>        BatchEnd := BatchStart + (BatchSize - 1)</l>
<l>        BatchIndices := TrainSequence[BatchStart:BatchEnd]</l>
<l>        BatchImageFiles := TrainingImages[BatchIndices]</l>
<l>        BatchLabels := TrainingLabels[BatchIndices]</l>
<c>        * </c>
<c>        * Read the image of the current batch.</c>
<l>        read_image (BatchImages, BatchImageFiles)</l>
<c>        * Augment the images to get a better variety of training images.</c>
<l>        GenParamName := 'mirror'</l>
<l>        GenParamValue := 'rc'</l>
<l>        augment_images (BatchImages, BatchImages, GenParamName, GenParamValue)</l>
<c>        * </c>
<c>        * Train the network with these images and ground truth labels.</c>
<l>        train_dl_classifier_batch (BatchImages, DLClassifierHandle, BatchLabels, DLClassifierTrainResultHandle)</l>
<c>        * You can access the current value of the loss function,</c>
<c>        * which should decrease during the training.</c>
<l>        get_dl_classifier_train_result (DLClassifierTrainResultHandle, 'loss', Loss)</l>
<c>        * Store the loss in a tuple .</c>
<l>        LossByIteration := [LossByIteration,Loss]</l>
<c>        * </c>
<c>        * In regular intervals, we want to evaluate</c>
<c>        * how well our classifier performs.</c>
<l>        CurrentIteration := int(Iteration + (NumBatchesInEpoch * Epoch))</l>
<l>        if (sum(CurrentIteration [==] PlottedIterations))</l>
<c>            * Plot the progress regularly.</c>
<c>            * Evaluate the current classifier on the training and validation set.</c>
<l>            apply_dl_classifier_batchwise (TrainingImagesSelected, DLClassifierHandle, TrainingDLClassifierResultIDs, TrainingPredictedLabels, TrainingConfidences)</l>
<l>            apply_dl_classifier_batchwise (ValidationImages, DLClassifierHandle, ValidationDLClassifierResultIDs, ValidationPredictedLabels, ValidationConfidences)</l>
<c>            * Evaluate the top-1 error on each dataset.</c>
<l>            evaluate_dl_classifier (TrainingLabelsSelected, DLClassifierHandle, TrainingDLClassifierResultIDs, 'top1_error', 'global', TrainingTop1Error)</l>
<l>            evaluate_dl_classifier (ValidationLabels, DLClassifierHandle, ValidationDLClassifierResultIDs, 'top1_error', 'global', ValidationTop1Error)</l>
<c>            * Concatenate the values for the plot.</c>
<l>            get_dl_classifier_param (DLClassifierHandle, 'learning_rate', LearningRate)</l>
<l>            TrainingErrors := [TrainingErrors,TrainingTop1Error]</l>
<l>            ValidationErrors := [ValidationErrors,ValidationTop1Error]</l>
<l>            LearningRates := [LearningRates,LearningRate]</l>
<l>            Epochs := [Epochs,PlottedIterations[|Epochs|] / real(NumBatchesInEpoch)]</l>
<c>            * Plot validation and error against the epochs in order to</c>
<c>            * observe the progress of the training.</c>
<l>            plot_dl_classifier_training_progress (TrainingErrors, ValidationErrors, LearningRates, Epochs, NumEpochs, WindowHandle)</l>
<l>            if (ValidationTop1Error &lt;= MinValidationError)</l>
<l>                write_dl_classifier (DLClassifierHandle, FileName)</l>
<l>                MinValidationError := ValidationTop1Error</l>
<l>            endif</l>
<l>        endif</l>
<l>    endfor</l>
<c>    * Reduce the learning rate every nth epoch.</c>
<l>    if ((Epoch + 1) % LearningRateStepEveryNthEpoch == 0)</l>
<l>        set_dl_classifier_param (DLClassifierHandle, 'learning_rate', LearningRate * LearningRateStepRatio)</l>
<l>        get_dl_classifier_param (DLClassifierHandle, 'learning_rate', LearningRate)</l>
<l>    endif</l>
<l>endfor</l>
<l>stop ()</l>
<l>return ()</l>
</body>
<docu id="train_fruit_classifier">
<parameters>
<parameter id="DLClassifierHandle"/>
<parameter id="FileName"/>
<parameter id="LearningRateStepEveryNthEpoch"/>
<parameter id="LearningRateStepRatio"/>
<parameter id="NumEpochs"/>
<parameter id="PlotEveryNthEpoch"/>
<parameter id="TrainingImages"/>
<parameter id="TrainingLabels"/>
<parameter id="ValidationImages"/>
<parameter id="ValidationLabels"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="get_predicted_classes">
<interface>
<ic>
<par name="Images" base_type="ctrl" dimension="0"/>
<par name="DLClassifierHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Top1PredictedClasses" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>apply_dl_classifier_batchwise (Images, DLClassifierHandle, DLClassifierResultIDsTest, PredictedClasses, Confidences)</l>
<c>* </c>
<l>Top1PredictedClasses := []</l>
<l>for Index := 0 to PredictedClasses.length() - 1 by 1</l>
<l>    Top1PredictedClasses := [Top1PredictedClasses,PredictedClasses.at(Index)[0]]</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="get_predicted_classes">
<parameters>
<parameter id="DLClassifierHandle"/>
<parameter id="Images"/>
<parameter id="Top1PredictedClasses"/>
</parameters>
</docu>
</procedure>
<procedure name="preprocess_dl_fruit_example">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImagePreprocessed" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="DLClassifierHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* </c>
<c>* In this preprocessing, we will remove the background. It is a bit difficult</c>
<c>* to segment the fruits because of the illumination in the images.</c>
<c>* </c>
<c>* First, we retrieve the blue channel. In this channel the fruit</c>
<c>* should be very dark because our fruits are green/red.</c>
<l>image_to_channels (Image, ImagesRGB)</l>
<l>select_obj (ImagesRGB, ImagesB, 3)</l>
<c>* </c>
<c>* Now we try to threshold the fruit or part of it.</c>
<l>threshold (ImagesB, Region, 0, 10)</l>
<c>* </c>
<c>* With this connection, we also get background and clutter.</c>
<l>connection (Region, ConnectedRegions)</l>
<c>* </c>
<c>* Next we will select the region which is most likely the fruit.</c>
<c>* </c>
<c>* Create a frame which is used in an intersection test later.</c>
<l>get_image_size (Image, Width, Height)</l>
<l>gen_rectangle1 (Rectangle2, 0, 0, Height, Width)</l>
<l>gen_rectangle1 (Rectangle1, 1, 1, Height - 2, Width - 2)</l>
<l>difference (Rectangle2, Rectangle1, Frame)</l>
<c>* </c>
<c>* Sort the regions by Area</c>
<c>* (fruit is usually among the largest regions).</c>
<l>area_center (ConnectedRegions, Area, Row, Column)</l>
<l>tuple_sort_index (Area, Indices)</l>
<l>tuple_inverse (Indices, Indices)</l>
<l>select_obj (ConnectedRegions, ConnectedRegions, Indices + 1)</l>
<c>* </c>
<c>* Now get the biggest Region</c>
<c>* which is NOT intersecting with the Frame.</c>
<l>count_obj (ConnectedRegions, Number)</l>
<l>select_obj (ConnectedRegions, Region, 1)</l>
<l>for I := 1 to Number by 1</l>
<l>    select_obj (ConnectedRegions, ObjectSelected, I)</l>
<l>    intersection (ObjectSelected, Frame, RegionIntersection)</l>
<l>    area_center (RegionIntersection, AreaIntersect, _, _)</l>
<l>    if (AreaIntersect &lt; 50)</l>
<c>        * If the intersection is small,</c>
<c>        * the region is still accepted.</c>
<l>        Region := ObjectSelected</l>
<l>        break</l>
<l>    endif</l>
<l>endfor</l>
<c>* </c>
<c>* A final check will test if the selected region is very small.</c>
<l>area_center (Region, Area, _, _)</l>
<l>if (Area &lt; 50 * 50)</l>
<c>    * In this case, we use the largest region.</c>
<l>    select_obj (ConnectedRegions, Region, 1)</l>
<l>endif</l>
<c></c>
<c>* We reduce the domain to the smallest rectangle</c>
<c>* and feed this into preprocess_dl_classifier_images.</c>
<l>smallest_rectangle1 (Region, Row11, Column11, Row2, Column2)</l>
<l>gen_rectangle1 (Rectangle, Row11, Column11, Row2, Column2)</l>
<l>reduce_domain (Image, Rectangle, ImageReduced)</l>
<c>* </c>
<l>PreprocessingGenParamName := 'domain_handling'</l>
<l>PreprocessingGenParamValue := 'crop_domain'</l>
<l>preprocess_dl_classifier_images (ImageReduced, ImagePreprocessed, PreprocessingGenParamName, PreprocessingGenParamValue, DLClassifierHandle)</l>
<l>return ()</l>
</body>
<docu id="preprocess_dl_fruit_example">
<abstract lang="en_US">Preprocesses the fruit classification example images suitable for classification.</abstract>
<parameters>
<parameter id="DLClassifierHandle">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<multivalue>false</multivalue>
<sem_type>dl_classifier</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="Image">
<multichannel>true</multichannel>
<multivalue>false</multivalue>
<sem_type>image</sem_type>
<type_list>
<item>byte</item>
</type_list>
</parameter>
<parameter id="ImagePreprocessed">
<multichannel>true</multichannel>
<multivalue>false</multivalue>
<sem_type>image</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_disp_missing_images_text">
<interface/>
<body>
<l>ErrorAndAdviceText := 'The images required for this example could not be found.'</l>
<l>ErrorAndAdviceText := [ErrorAndAdviceText,'']</l>
<l>ErrorAndAdviceText := [ErrorAndAdviceText,'These images are part of a separate installer. Please']</l>
<l>ErrorAndAdviceText := [ErrorAndAdviceText,'refer to the Installation Guide for more information on']</l>
<l>ErrorAndAdviceText := [ErrorAndAdviceText,'this topic!']</l>
<l>dev_clear_window ()</l>
<l>dev_disp_text (ErrorAndAdviceText, 'window', 'center', 'left', 'red', [], [])</l>
<l>return ()</l>
</body>
<docu id="dev_disp_missing_images_text">
<parameters/>
</docu>
</procedure>
<procedure name="dev_disp_preprocessing_progress">
<interface>
<ic>
<par name="I" base_type="ctrl" dimension="0"/>
<par name="RawImageFiles" base_type="ctrl" dimension="0"/>
<par name="PreprocessedFolder" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>if (I % 10 == 9)</l>
<l>    set_window_param (WindowHandle, 'flush', 'false')</l>
<l>    dev_clear_window ()</l>
<l>    Text := 'Preprocessing the data set... (' + (I + 1) + ' of ' + |RawImageFiles| + ')'</l>
<l>    Text[|Text|] := ''</l>
<l>    Text[|Text|] := 'The preprocessed images are written into the folder'</l>
<l>    Text[|Text|] := '\'' + PreprocessedFolder + '\','</l>
<l>    Text[|Text|] := 'as specified by the variable PreprocessedFolder.'</l>
<l>    Text[|Text|] := 'The preprocessed images will be deleted automatically'</l>
<l>    Text[|Text|] := 'at the end of the program. '</l>
<l>    dev_disp_text (Text, 'window', 'top', 'left', 'white', 'box', 'false')</l>
<l>    flush_buffer (WindowHandle)</l>
<l>    set_window_param (WindowHandle, 'flush', 'true')</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="dev_disp_preprocessing_progress">
<parameters>
<parameter id="I"/>
<parameter id="PreprocessedFolder"/>
<parameter id="RawImageFiles"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
