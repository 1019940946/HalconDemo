<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to use HALCON's shape-based matching</c>
<c>* to find multiple different models in one call to find_shape_models.  Note that this</c>
<c>* is one mode of operation that is frequently useful.  However, the number of</c>
<c>* applications that can be solved with this mechanism is much larger.  For</c>
<c>* another application where finding multiple models in one call is useful are</c>
<c>* applications where the same object can only occur in small angle ranges</c>
<c>* around a discrete set of angles, e.g., 0°, 90°, 180°, and 270°.  In these cases,</c>
<c>* it would be wasteful to train the model for the full 360° rotation range and to</c>
<c>* match the model in this range.  Instead, four models using the small angle</c>
<c>* ranges around the discrete set of angles should be generated from the same</c>
<c>* model image and used in the matching stage using four different angle ranges.</c>
<l>dev_update_pc ('off')</l>
<l>dev_update_window ('off')</l>
<l>dev_update_var ('off')</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 646, 482, 'black', WindowHandle)</l>
<l>dev_set_part (0, 0, 481, 645)</l>
<l>set_display_font (WindowHandle, 20, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<c>* These colors will be used to graphically discern the different models in the</c>
<c>* visualization code below.</c>
<l>Colors := ['red','green','cyan']</l>
<c>* The models will be generated from hard-coded rectangles given by the</c>
<c>* following coordinates:</c>
<l>Row1 := [135,150,185]</l>
<l>Column1 := [250,170,220]</l>
<l>Row2 := [375,310,335]</l>
<l>Column2 := [355,395,375]</l>
<c>* The object Models will hold a set of XLD contours that represent the different</c>
<c>* models.  They are used below to overlay the found models on the current</c>
<c>* image.  XLD contours are used because they can be transformed much faster</c>
<c>* than regions.  This creates a slight problem because in general multiple XLD</c>
<c>* contours will represent one model.  Therefore, the start and end indices of the</c>
<c>* different models will be stored in IndexS and IndexE, respectively.</c>
<l>gen_empty_obj (Models)</l>
<l>IndexS := []</l>
<l>IndexE := []</l>
<c>* The variable ModelIDs holds the different models that are created below.</c>
<l>ModelIDs := []</l>
<c>* Likewise, RowsRef and ColumnsRef store the reference points of the different</c>
<c>* models.  They are necessary to transform the models to the found instances</c>
<c>* in the current image.</c>
<l>for J := 1 to 3 by 1</l>
<l>    read_image (Image, 'metal-parts/metal-part-model-' + J$'02d')</l>
<l>    dev_display (Image)</l>
<l>    dev_set_color ('green')</l>
<l>    set_tposition (WindowHandle, 20, 20)</l>
<l>    write_string (WindowHandle, 'Generating shape model ' + J$'d')</l>
<l>    gen_rectangle1 (Rectangle, Row1[J - 1], Column1[J - 1], Row2[J - 1], Column2[J - 1])</l>
<l>    area_center (Rectangle, Area, Row, Column)</l>
<l>    reduce_domain (Image, Rectangle, ImageReduced)</l>
<c>    * Although we will use get_shape_model_contours below to obtain the</c>
<c>    * representation of the model, we extract a model representation here using</c>
<c>    * inspect_shape_model because this enables us to display the representation</c>
<c>    * of the model while the model is being created.</c>
<l>    inspect_shape_model (Image, ModelImages, ModelRegions, 1, 30)</l>
<c>    * Since the shape models contain a few extraneous edges, they will be</c>
<c>    * removed here to give a slightly nicer visualization.</c>
<l>    connection (ModelRegions, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 20, 100000)</l>
<l>    union1 (SelectedRegions, ModelRegions)</l>
<l>    gen_contours_skeleton_xld (ModelRegions, ModelContours, 1, 'filter')</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (ModelContours)</l>
<l>    create_shape_model (ImageReduced, 5, rad(0), rad(360), 'auto', 'pregeneration', 'use_polarity', 30, 7, ModelID)</l>
<l>    get_shape_model_contours (ModelCont, ModelID, 1)</l>
<l>    select_shape_xld (ModelCont, ModelContours, 'contlength', 'and', 20, 1000)</l>
<c>    * Count how many XLD contours there are in the current model and in the</c>
<c>    * already stored models.  This is necessary to compute IndexS and IndexE.</c>
<l>    count_obj (ModelContours, NumModel)</l>
<l>    count_obj (Models, NumModels)</l>
<l>    concat_obj (Models, ModelContours, Models)</l>
<l>    IndexS := [IndexS,NumModels + 1]</l>
<l>    IndexE := [IndexE,NumModels + NumModel]</l>
<l>    ModelIDs := [ModelIDs,ModelID]</l>
<l>endfor</l>
<l>dev_set_color ('yellow')</l>
<l>set_tposition (WindowHandle, 50, 20)</l>
<l>write_string (WindowHandle, 'Press left button to start')</l>
<l>set_tposition (WindowHandle, 80, 20)</l>
<l>write_string (WindowHandle, 'and stop the demo.')</l>
<l>get_mbutton (WindowHandle, Row3, Column3, Button1)</l>
<l>wait_seconds (0.5)</l>
<l>dev_set_color ('red')</l>
<l>Button := 0</l>
<l>ImgNo := 1</l>
<l>while (Button != 1)</l>
<l>    read_image (Image, 'metal-parts/metal-parts-' + ImgNo$'02d')</l>
<l>    count_seconds (S1)</l>
<l>    find_shape_models (Image, ModelIDs, rad(0), rad(360), 0.5, 0, 0.5, 'least_squares', 0, 0.8, Row, Column, Angle, Score, Model)</l>
<l>    count_seconds (S2)</l>
<l>    Time := (S2 - S1) * 1000</l>
<l>    dev_display (Image)</l>
<l>    Num := |Score|</l>
<l>    for J := 0 to Num - 1 by 1</l>
<c>        * Select the correct XLD contours from the Models object.</c>
<l>        copy_obj (Models, ModelSelected, IndexS[Model[J]], IndexE[Model[J]] - IndexS[Model[J]] + 1)</l>
<c>        * Compute the transformation from the model object to the current instance.</c>
<l>        vector_angle_to_rigid (0, 0, 0, Row[J], Column[J], Angle[J], HomMat2D)</l>
<l>        affine_trans_contour_xld (ModelSelected, ModelTrans, HomMat2D)</l>
<l>        dev_set_color (Colors[Model[J]])</l>
<l>        dev_display (ModelTrans)</l>
<l>    endfor</l>
<l>    dev_set_color ('yellow')</l>
<l>    set_tposition (WindowHandle, 20, 20)</l>
<l>    if (Num == 1)</l>
<l>        write_string (WindowHandle, Num$'1d' + ' object found in ' + Time$'4.2f' + 'ms')</l>
<l>    else</l>
<l>        write_string (WindowHandle, Num$'1d' + ' objects found in ' + Time$'4.2f' + 'ms')</l>
<l>    endif</l>
<l>    ImgNo := ImgNo + 1</l>
<l>    if (ImgNo &gt; 15)</l>
<l>        ImgNo := 1</l>
<l>    endif</l>
<l>    dev_error_var (Error, 1)</l>
<l>    dev_set_check ('~give_error')</l>
<l>    get_mposition (WindowHandle, R, C, Button)</l>
<l>    dev_error_var (Error, 0)</l>
<l>    dev_set_check ('give_error')</l>
<l>    if (Error != H_MSG_TRUE)</l>
<l>        Button := 0</l>
<l>    endif</l>
<l>endwhile</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
