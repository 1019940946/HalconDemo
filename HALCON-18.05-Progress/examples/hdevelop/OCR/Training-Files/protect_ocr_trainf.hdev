<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to protect OCR training files</c>
<c>* with a password using the operator protect_ocr_trainf.</c>
<c>* </c>
<c>* Protected OCR training files can only be used, if the</c>
<c>* correct password is specified by one of the operators</c>
<c>* - read_ocr_trainf_names_protected</c>
<c>* - select_feature_set_trainf_mlp_protected</c>
<c>* - select_feature_set_trainf_svm_protected</c>
<c>* - trainf_ocr_class_mlp_protected</c>
<c>* - trainf_ocr_class_svm_protected</c>
<c>* </c>
<c>* Init</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>read_image (Image, 'letters')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>dev_set_colored (12)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>get_tmp_dir (TmpDir)</l>
<c>* </c>
<l>Exceptions := []</l>
<l>TrainFile := TmpDir + '/letters.trf'</l>
<l>TrainFileProtected := TmpDir + '/letters_protected.trf'</l>
<c>* </c>
<c>* Preparation: Segment training characters and train font</c>
<c>* </c>
<l>dev_display (Image)</l>
<l>gen_rectangle1 (Rectangle, 0, 0, Height - 1, 400)</l>
<l>reduce_domain (Image, Rectangle, Image)</l>
<c>* Segment the image</c>
<l>binary_threshold (Image, Region, 'max_separability', 'dark', UsedThreshold)</l>
<c>* Connect the i's and j's with their dots</c>
<l>dilation_circle (Region, RegionDilation, 3.5)</l>
<c>* Compute the correct connected components</c>
<l>connection (RegionDilation, ConnectedRegions)</l>
<c>* Reduce each connected component (character) to its original shape</c>
<l>intersection (ConnectedRegions, Region, RegionIntersection)</l>
<c>* Sort the characters line-by-line</c>
<l>sort_region (RegionIntersection, Characters, 'character', 'true', 'row')</l>
<l>dev_display (Characters)</l>
<l>disp_message (WindowHandle, 'Train characters', 'window', 12, 12, 'black', 'true')</l>
<c>* Compute the true class of each character</c>
<l>count_obj (Characters, Number)</l>
<l>Length := Number / 27</l>
<l>Classes := []</l>
<l>for J := 0 to 25 by 1</l>
<l>    Classes := [Classes,gen_tuple_const(Length,chr(ord('a') + J))]</l>
<l>endfor</l>
<l>Classes := [Classes,gen_tuple_const(Length,'.')]</l>
<c>* </c>
<c>* Write training file</c>
<c>* (Note, that it is still unprotected)</c>
<c>* </c>
<l>disp_message (WindowHandle, 'Write training file', 'window', 42, 12, 'black', 'true')</l>
<l>write_ocr_trainf (Characters, Image, Classes, TrainFile)</l>
<c>* </c>
<c>* Create a protected copy of the TrainFile</c>
<c>* </c>
<l>protect_ocr_trainf (TrainFile, 'MySecretPassword007', TrainFileProtected)</l>
<l>disp_message (WindowHandle, 'Training file is now password protected', 'window', 72, 12, 'forest green', 'true')</l>
<c>* </c>
<c>* Delete the original training file.</c>
<c>* After that, only the password protected training file is left.</c>
<l>delete_file (TrainFile)</l>
<c>* </c>
<l>try</l>
<l>    read_ocr_trainf_names (TrainFileProtected, CharacterNames, CharacterCount)</l>
<l>catch (Exception)</l>
<c>    * The protected file can only be accessed with</c>
<c>    * the *_protected variants of the ocr operators</c>
<l>    Exceptions := [Exceptions,Exception]</l>
<l>    disp_message (WindowHandle, 'Reading training file without password\n... failed', 'window', 102, 12, 'red', 'true')</l>
<l>endtry</l>
<c>* </c>
<l>try</l>
<l>    read_ocr_trainf_names_protected (TrainFileProtected, 'WrongPassword', CharacterNames, CharacterCount)</l>
<l>catch (Exception)</l>
<c>    * Using a wrong password raises an exception</c>
<l>    Exceptions := [Exceptions,Exception]</l>
<l>    disp_message (WindowHandle, 'Reading training file with wrong password\n... failed', 'window', 152, 12, 'red', 'true')</l>
<l>endtry</l>
<c>* </c>
<l>try</l>
<l>    read_ocr_trainf_names_protected (TrainFileProtected, 'MySecretPassword007', CharacterNames, CharacterCount)</l>
<l>    disp_message (WindowHandle, 'Reading training file with correct password\n... successful', 'window', 202, 12, 'forest green', 'true')</l>
<l>catch (Exception)</l>
<c>    * This time, it should have worked</c>
<l>    Exceptions := [Exceptions,Exception]</l>
<l>endtry</l>
<c>* </c>
<c>* The classifier is created as usual</c>
<l>create_ocr_class_mlp (8, 10, 'constant', 'default', CharacterNames, 20, 'normalization', 26, 42, OCRHandle)</l>
<c>* </c>
<c>* Train the classifier</c>
<l>try</l>
<l>    trainf_ocr_class_mlp (OCRHandle, TrainFileProtected, 100, 0.01, 0.01, Error, ErrorLog)</l>
<l>catch (Exception)</l>
<c>    * For training, the password is also needed</c>
<l>    Exceptions := [Exceptions,Exception]</l>
<l>endtry</l>
<c>* </c>
<l>try</l>
<l>    trainf_ocr_class_mlp_protected (OCRHandle, TrainFileProtected, 'MySecretPassword007', 100, 0.01, 0.01, Error, ErrorLog)</l>
<l>catch (Exception)</l>
<c>    * This should have worked</c>
<l>    Exceptions := [Exceptions,Exception]</l>
<l>endtry</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Apply the classifier</c>
<c>* </c>
<l>full_domain (Image, Image)</l>
<c>* Segment characters the same way as before</c>
<l>binary_threshold (Image, Region, 'max_separability', 'dark', UsedThreshold1)</l>
<l>dilation_circle (Region, RegionDilation, 3.5)</l>
<l>connection (RegionDilation, ConnectedRegions)</l>
<l>intersection (ConnectedRegions, Region, RegionIntersection)</l>
<l>sort_region (RegionIntersection, Characters, 'character', 'true', 'row')</l>
<c>* Classification</c>
<l>do_ocr_multi_class_mlp (Characters, Image, OCRHandle, Class, Confidence)</l>
<c>* Display results</c>
<l>area_center (Characters, Area, Row, Column)</l>
<l>dev_display (Image)</l>
<l>set_display_font (WindowHandle, 16, 'sans', 'true', 'false')</l>
<l>disp_message (WindowHandle, Class, 'image', Row - 16, Column + 8, 'blue', 'false')</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>disp_message (WindowHandle, 'Classification result', 'window', 12, 12, 'black', 'true')</l>
<l>dev_set_check ('~give_error')</l>
<l>delete_file (TrainFileProtected)</l>
<l>dev_set_check ('give_error')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="get_tmp_dir">
<interface>
<oc>
<par name="LocalTemp" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>tuple_environment ('TEMP', LocalTemp)</l>
<l>if (LocalTemp == '')</l>
<l>    tuple_environment ('TMP', LocalTemp)</l>
<l>    if (LocalTemp == '')</l>
<l>        file_exists ('/tmp', FileExists)</l>
<l>        if (FileExists)</l>
<l>            LocalTemp := '/tmp'</l>
<l>        else</l>
<l>            LocalTemp := './'</l>
<l>        endif</l>
<l>    endif</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="get_tmp_dir">
<parameters>
<parameter id="LocalTemp"/>
</parameters>
</docu>
</procedure>
</hdevelop>
