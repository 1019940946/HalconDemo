<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to use the operator</c>
<c>* projective_trans_object_model_3d in HALCON.  In this example</c>
<c>* some cubes are created by different means.</c>
<c>* After that, the cubes are tranformed with a projective</c>
<c>* transformation.</c>
<c>* </c>
<c>* Initialize program</c>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 640, 480, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>HomMat3D := [-0.3,0.5,0.8,0,-0.1,0.8,-0.5,0,-.1,-0.3,0.2,1,0.5,0.8,0.5,1]</l>
<c>* </c>
<c>* Create cubes</c>
<c>* </c>
<c>* a) Create a box primitive</c>
<l>gen_box_object_model_3d ([0.5,0.5,0.5,0,0,0,0], 1, 1, 1, CubeBox)</l>
<c>* Note, that primitives CANNOT be transformed by</c>
<c>* projective_trans_object_model_3d (because after</c>
<c>* that they would not be primitives anymore)</c>
<c>* </c>
<c>* Therefore we show three alternatives, if you</c>
<c>* ever need to projectively transform primitives</c>
<c>* </c>
<c>* a) Sample primitive to get a 3D object model of points</c>
<l>sample_object_model_3d (CubeBox, 'fast', 0.1, [], [], CubeSampled)</l>
<c>* b) Create cube from corner points</c>
<l>gen_object_model_3d_from_points ([0,0,0,0,1,1,1,1], [0,0,1,1,0,0,1,1], [0,1,0,1,0,1,0,1], CubePoints)</l>
<c>* c) Create faces from the corner points</c>
<l>set_object_model_3d_attrib (CubePoints, 'polygons', [], [4,0,1,3,2,4,4,5,7,6,4,0,1,5,4,4,2,3,7,6,4,1,3,7,5,4,0,2,6,4], CubeFaces)</l>
<c>* </c>
<c>* Translate cubes for better visualization</c>
<l>rigid_trans_object_model_3d (CubePoints, [2,0,0,0,0,0,0], CubePointsRT)</l>
<l>rigid_trans_object_model_3d (CubeFaces, [4,0,0,0,0,0,0], CubeFacesRT)</l>
<c>* </c>
<c>* Display original cubes</c>
<l>VisParamNames := ['disp_pose','color']</l>
<l>VisParamValues := ['true','orange']</l>
<l>gen_cam_par_area_scan_division (0.016, 0, 5e-6, 5e-6, 320, 240, 640, 480, VisCamParam)</l>
<l>create_pose (-1.7, 1, 45, 35, 340, 334, 'Rp+T', 'gba', 'point', VisPose)</l>
<l>Instructions[0] := 'Rotate: Left button'</l>
<l>Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>Instructions[2] := 'Move:   Ctrl  + left button'</l>
<l>Labels := ['Sampled Primitive','Corner points only','Faces','']</l>
<l>Title := 'Original object models'</l>
<l>visualize_object_model_3d (WindowHandle, [CubeSampled,CubePointsRT,CubeFacesRT,CubeBox], VisCamParam, VisPose, [VisParamNames,'alpha_3','color_3'], [VisParamValues,0.3,'white'], Title, Labels, Instructions, PoseOut)</l>
<c>* </c>
<c>* Apply projective transformation to the cubes</c>
<c>* </c>
<l>projective_trans_object_model_3d (CubePointsRT, HomMat3D, CubePoints1)</l>
<l>projective_trans_object_model_3d (CubeFacesRT, HomMat3D, CubeFaces1)</l>
<l>projective_trans_object_model_3d (CubeSampled, HomMat3D, CubeSampled1)</l>
<c>* </c>
<c>* ! ATTENTION: Primitives are NOT transformed! CubeBox1 would be empty!</c>
<l>* projective_trans_object_model_3d (CubeBox, HomMat3D, CubeBox1)</l>
<c>* </c>
<c>* Display projectively transformed cubes</c>
<l>Title := 'Projectively transformed object models'</l>
<l>create_pose (-0.3, 0.1, 10, 145, 60, 315, 'Rp+T', 'gba', 'point', VisPose)</l>
<l>Labels := ['Sampled Primitive','Corner points only','Faces']</l>
<l>visualize_object_model_3d (WindowHandle, [CubeSampled1,CubePoints1,CubeFaces1], VisCamParam, VisPose, VisParamNames, VisParamValues, Title, Labels, Instructions, PoseOut)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
