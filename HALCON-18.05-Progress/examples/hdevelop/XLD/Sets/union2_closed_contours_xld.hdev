<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>* This example shows the usage of the operator union2_closed_contours_xld</c>
<c>* </c>
<c>* First, two closed contours are created. They both enclose a circular region.</c>
<c>* These two regions overlap each other.</c>
<l>gen_ellipse_contour_xld (Contour1, 200, 200, 0, 100, 100, 0, 6.28318, 'positive', 1.5)</l>
<l>gen_ellipse_contour_xld (Contour2, 200, 300, 0, 100, 100, 0, 6.28318, 'positive', 1.5)</l>
<c>* </c>
<c>* Now, the union of the two regions is determined.</c>
<l>union2_closed_contours_xld (Contour1, Contour2, ContoursUnion)</l>
<c>* </c>
<c>* Visualization of the result</c>
<l>dev_set_line_width (5)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (Contour1)</l>
<l>dev_set_color ('red')</l>
<l>dev_display (Contour2)</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('blue')</l>
<l>dev_display (ContoursUnion)</l>
<l>stop ()</l>
<l>dev_clear_window ()</l>
<l>dev_set_line_width (1)</l>
<l>dev_set_color ('white')</l>
<c>* </c>
<c>* Now, boundary sets that define regions with holes are created.</c>
<l>gen_ellipse_contour_xld (Boundary1, 200, 200, 0, 100, 100, 0, 6.28318, 'positive', 1.5)</l>
<l>gen_ellipse_contour_xld (Hole1, 200, 200, 0, 75, 75, 0, 6.28318, 'positive', 1.5)</l>
<l>concat_obj (Boundary1, Hole1, BoundarySet1)</l>
<l>gen_ellipse_contour_xld (Boundary2, 200, 300, 0, 100, 100, 0, 6.28318, 'positive', 1.5)</l>
<l>gen_ellipse_contour_xld (Hole2, 200, 300, 0, 75, 75, 0, 6.28318, 'positive', 1.5)</l>
<l>concat_obj (Boundary2, Hole2, BoundarySet2)</l>
<c>* </c>
<c>* Now, the union of the two regions is determined.</c>
<l>union2_closed_contours_xld (BoundarySet1, BoundarySet2, ContoursUnion)</l>
<c>* </c>
<c>* Visualization of the result</c>
<l>dev_set_line_width (5)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (BoundarySet1)</l>
<l>dev_set_color ('red')</l>
<l>dev_display (BoundarySet2)</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('blue')</l>
<l>dev_display (ContoursUnion)</l>
<c>* </c>
<c>* Note that last three contours in the result define holes in the first contour.</c>
<c>* This information is stored in the global contour attribute 'is_hole'.</c>
<l>count_obj (ContoursUnion, Number)</l>
<l>for Index := 1 to Number by 1</l>
<l>    select_obj (ContoursUnion, ObjectSelected, Index)</l>
<l>    get_contour_global_attrib_xld (ObjectSelected, 'is_hole', Attrib)</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
