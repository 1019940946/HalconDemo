<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 768 / 2, 576 / 2, 'black', WindowHandle1)</l>
<l>set_display_font (WindowHandle1, 14, 'mono', 'true', 'false')</l>
<l>dev_update_off ()</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<c>* </c>
<c>* Calibrate the camera.</c>
<c>* </c>
<l>CalTabDescrFile := 'caltab_big.descr'</l>
<c>* Make sure that the file 'CaltabName' is in the current directory,</c>
<c>* the HALCONROOT/calib directory, or use an absolute path</c>
<l>gen_cam_par_area_scan_division (0.008, 0, 0.0000086, 0.0000086, 384, 288, 768, 576, StartCamPar)</l>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, [], StartCamPar)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CalTabDescrFile)</l>
<l>NumImages := 10</l>
<l>read_image (Images, 'calib/calib-3d-coord-' + [1:NumImages]$'02d')</l>
<l>for I := 1 to NumImages by 1</l>
<l>    select_obj (Images, Image, I)</l>
<l>    dev_display (Image)</l>
<l>    Message := 'Find calibration plate in\nall calibration images (' + I + '/' + NumImages + ')'</l>
<l>    disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<c>    * Find the calibration plate</c>
<l>    find_calib_object (Image, CalibDataID, 0, 0, I - 1, [], [])</l>
<l>    get_calib_data (CalibDataID, 'camera', 0, 'init_params', StartCamPar)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, I - 1, Row, Column, Index, Pose)</l>
<l>    get_calib_data_observ_contours (Contours, CalibDataID, 'caltab', 0, 0, I - 1)</l>
<l>    gen_cross_contour_xld (Cross, Row, Column, 6, 0.785398)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (Contours)</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_display (Cross)</l>
<l>endfor</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<l>calibrate_cameras (CalibDataID, Error)</l>
<l>get_calib_data (CalibDataID, 'camera', 0, 'params', CamParam)</l>
<l>gen_empty_obj (Maps)</l>
<l>for I := 1 to NumImages by 1</l>
<c>    * Obtain the pose of the calibration table</c>
<l>    get_calib_data (CalibDataID, 'calib_obj_pose', [0,I - 1], 'pose', Pose)</l>
<l>    set_origin_pose (Pose, -1.125, -1.0, 0, PoseNewOrigin)</l>
<c>    * Generate map</c>
<l>    gen_image_to_world_plane_map (MapSingle, CamParam, PoseNewOrigin, 768, 576, 900, 800, 0.0025, 'bilinear')</l>
<l>    concat_obj (Maps, MapSingle, Maps)</l>
<l>endfor</l>
<c>* </c>
<c>* Map the images</c>
<c>* </c>
<l>dev_open_window (0, 391, 900 / 2, 800 / 2, 'black', WindowHandle2)</l>
<l>set_display_font (WindowHandle2, 14, 'mono', 'true', 'false')</l>
<l>Button := 0</l>
<l>NumImage := 1</l>
<l>for I := 1 to NumImages by 1</l>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_set_part (0, 0, 575, 767)</l>
<l>    dev_clear_window ()</l>
<l>    select_obj (Images, Image, I)</l>
<l>    dev_display (Image)</l>
<l>    select_obj (Maps, MapSingle, I)</l>
<l>    map_image (Image, MapSingle, ImageMapped)</l>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_set_part (0, 0, 799, 899)</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (ImageMapped)</l>
<l>    Message := 'Calibration image (' + I + '/' + NumImages + ')'</l>
<l>    disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    Message := 'Mapped image'</l>
<l>    disp_message (WindowHandle2, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    if (I &lt; NumImages)</l>
<l>        disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
