<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>* Example program to illustrate the operator 'disparity_to_point_3d'</c>
<c>* </c>
<c>* The following algorithm is performed to an original and a rectified binocular camera system:</c>
<c>* 1) two cameras are defined;</c>
<c>* 2) one (virtual) calibration plate is projected into both cameras, the images are rectified;</c>
<c>* 3) the circular marks of the calibration plate are extracted in both images of the plate;</c>
<c>* 4) some features are calculated from the disparity of the point correspondences in both images:</c>
<c>*    e.g., the 3D points of the calibration plate are reconstructed and</c>
<c>*     the results are compared with the 3D model points of the plate</c>
<c>* -------------------------------------------------------------------</c>
<c>* (1) define the relative pose of camera 2 with respect to camera 1</c>
<c>* (this is the pose as it would be returned by binocular calibration)</c>
<l>roty := 15</l>
<l>base := 0.08</l>
<l>create_pose (base * cos(rad(roty)), 0, base * sin(rad(roty)), 0, -2 * roty, 0, 'Rp+T', 'gba', 'point', c1Pc2_model)</l>
<l>pose_to_hom_mat3d (c1Pc2_model, c1Tc2_model)</l>
<c>* </c>
<c>* define the internal parameters of the cameras</c>
<l>Width := 320</l>
<l>Height := 240</l>
<l>gen_cam_par_area_scan_division (0.0085, -1000.0, 7.4e-6, 7.4e-6, Width / 2, Height / 2, Width, Height, AVTCam1)</l>
<l>AVTCam2 := AVTCam1</l>
<c>* </c>
<c>* prepare the visualization</c>
<l>dev_close_window ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle1)</l>
<l>dev_update_window ('off')</l>
<l>dev_open_window (0, Width + 4, Width, Height, 'black', WindowHandle2)</l>
<l>dev_update_window ('off')</l>
<c>* </c>
<c>* (2) define the pose of the calibration plate (with respect to camera1)</c>
<l>dist := 0.15</l>
<l>create_pose (base / 2.0 * cos(rad(roty)) - dist * sin(rad(roty)), 0, base / 2.0 * sin(rad(roty)) + dist * cos(rad(roty)), 0, -roty, 0, 'Rp+T', 'gba', 'point', c1Ptab)</l>
<l>pose_to_hom_mat3d (c1Ptab, c1Ttab)</l>
<l>pose_invert (c1Pc2_model, c2Pc1_model)</l>
<l>pose_compose (c2Pc1_model, c1Ptab, c2Ptab)</l>
<c>* </c>
<c>* generate the images of the simulated calibration plates</c>
<l>sim_caltab (TabImage1, 'caltab_30mm.descr', AVTCam1, c1Ptab, 128, 224, 80, 0.5)</l>
<l>sim_caltab (TabImage2, 'caltab_30mm.descr', AVTCam2, c2Ptab, 128, 224, 80, 0.5)</l>
<c>* and visualize the images:</c>
<l>dev_set_window (WindowHandle1)</l>
<l>dev_clear_window ()</l>
<l>dev_display (TabImage1)</l>
<l>dev_set_window (WindowHandle2)</l>
<l>dev_clear_window ()</l>
<l>dev_display (TabImage2)</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* (1)+(2) rectify the images of the plate (generate epipolar images)</c>
<l>gen_binocular_rectification_map (Map1, Map2, AVTCam1, AVTCam2, c1Pc2_model, 1, 'geometric', 'bilinear', CamParamRect1, CamParamRect2, CamPoseRect1, CamPoseRect2, RelPoseRect)</l>
<l>map_image (TabImage1, Map1, ImageMapped1)</l>
<l>map_image (TabImage2, Map2, ImageMapped2)</l>
<l>dev_set_window (WindowHandle1)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ImageMapped1)</l>
<l>dev_set_window (WindowHandle2)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ImageMapped2)</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* (3) find the points and their correspondences in the images</c>
<l>find_caltab (ImageMapped1, Caltab, 'caltab_30mm.descr', 3, 112, 5)</l>
<l>find_marks_and_pose (ImageMapped1, Caltab, 'caltab_30mm.descr', CamParamRect1, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose1)</l>
<l>find_caltab (ImageMapped2, Caltab, 'caltab_30mm.descr', 3, 112, 5)</l>
<l>find_marks_and_pose (ImageMapped2, Caltab, 'caltab_30mm.descr', CamParamRect2, 128, 10, 18, 0.9, 15, 100, RCoord2, CCoord2, StartPose2)</l>
<c>* evaluate that the point correspondences comply with the epipolar constraint:</c>
<c>*  ( the difference in row should be smaller than 1 pixel for a good usable epipolar rectification)</c>
<l>EpipolError := max(abs(RCoord2 - RCoord1))</l>
<l>if (EpipolError &gt; 1.0)</l>
<c>    * Uuups, the epipolar error might be too big to have accurate reconstuctions</c>
<l>    disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>    stop ()</l>
<l>endif</l>
<c>* visualize the extracted image points</c>
<l>dev_set_window (WindowHandle1)</l>
<l>dev_set_color ('red')</l>
<l>disp_cross (WindowHandle1, RCoord1, CCoord1, 6, 0)</l>
<l>dev_set_window (WindowHandle2)</l>
<l>dev_set_color ('green')</l>
<l>disp_cross (WindowHandle2, RCoord2, CCoord2, 6, 0)</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* (4) compute some features, e.g., the 3d points of the calibration plate by disparity_to_point_3d</c>
<c>* get the disparity values of the corresponding calibration points</c>
<l>Disparity := CCoord2 - CCoord1</l>
<c>* some features can be calculated from the disparity values:</c>
<l>disparity_to_distance (CamParamRect1, CamParamRect2, RelPoseRect, Disparity, Distance)</l>
<l>disparity_to_point_3d (CamParamRect1, CamParamRect2, RelPoseRect, RCoord1, CCoord1, Disparity, X, Y, Z)</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* compare the reconstructed 3d points with the model points (known by the simulation)</c>
<c>* !!! transform the reconstructed caltab points from the rectified coordinate system of camera 1</c>
<c>*     into the *original* coordinate system of camera 1</c>
<l>pose_to_hom_mat3d (CamPoseRect1, c1Trect1)</l>
<l>affine_trans_point_3d (c1Trect1, X, Y, Z, c1X, c1Y, c1Z)</l>
<c>* transform the model calibration points into the original coordinate system of camera 1</c>
<l>caltab_points ('caltab_30mm.descr', CalX, CalY, CalZ)</l>
<l>affine_trans_point_3d (c1Ttab, CalX, CalY, CalZ, c1CalX, c1CalY, c1CalZ)</l>
<c>* </c>
<c>* compare the results (reconstructed points with original 3D model points)</c>
<l>tuple_sub (c1X, c1CalX, XDiff)</l>
<l>tuple_sub (c1Y, c1CalY, YDiff)</l>
<l>tuple_sub (c1Z, c1CalZ, ZDiff)</l>
<c>* Note: the values of XDiff,YDiff,ZDiff should be very small  (accuracy at some um (=e-6 m) in this simulated example)</c>
<c>* THE END :)</c>
<l>dev_close_window ()</l>
<l>dev_clear_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
