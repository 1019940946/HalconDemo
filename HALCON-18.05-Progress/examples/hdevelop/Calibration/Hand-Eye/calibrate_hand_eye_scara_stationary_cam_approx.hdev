<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>* This example explains how to perform an approximate hand-eye calibration</c>
<c>* for a SCARA robot without a calibration plate. The approximate calibration</c>
<c>* or "alignment" of the robot with respect to the world coordinate</c>
<c>* system presumes that the tool-center-point lies at a (unknown)</c>
<c>* position (0, 0, Z) in the tool coordinate system, i.e., the gripper or</c>
<c>* vacuum cup is centered with respect to the z axis of the tool</c>
<c>* coordinate system. Furthermore, it is assumed that the orientation</c>
<c>* (the rotation around the Z axis) of the gripper or vacuum cup</c>
<c>* needs not to be taken into consideration for gripping the</c>
<c>* objects.</c>
<c>* It is based on at least four so-called calibration points.</c>
<c>* These are points for which the image coordinates as well as the</c>
<c>* robot coordinates are known, i.e., they must be clearly identifiable</c>
<c>* in the image and it must be possible to approach them accurately</c>
<c>* with the robot tool. These points can be provided by, e.g.,</c>
<c>* placing the objects to be grasped in the field of view of the</c>
<c>* camera, acquiring an image, manually indicating the grasping</c>
<c>* positions in the image and then, manually moving the tool center</c>
<c>* point to the grasping positions and registering the respective robot</c>
<c>* poses. This kind of calibration points is used in this example.</c>
<c>* Instead of using the grasping positions on the objects, it would</c>
<c>* also be possible to simply draw crosses on a sheet of paper</c>
<c>* and to use these points as calibration points.</c>
<c>* In this example, we use five calibration points, i.e., one point</c>
<c>* more than necessary, to make the calibration result slightly more</c>
<c>* accurate.</c>
<c>* Note that this example only calibrates the hand-eye system. It uses</c>
<c>* predefined image coordinates as well as robot poses for the calibration</c>
<c>* points. To adapt this example to real applications, you must determine</c>
<c>* the image coordinates and the robot poses first.</c>
<c>* In this example, the camera is assumed to be stationary with respect</c>
<c>* to the robot and it observes the workspace of the robot.</c>
<c>* Finally, the calibration result as well as data that is required</c>
<c>* to determine the position of the objects to be grasped is written</c>
<c>* to file. This information is then used by the example program</c>
<c>* pick_and_place_scara_stationary_cam.hdev. Note that this kind</c>
<c>* of "calibration" provides only an approximation of the "real" calibration</c>
<c>* information. The accuracy depends on the accuracy of the image</c>
<c>* coordinates and the respective robot poses of the calibration</c>
<c>* points.</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>read_image (Image, '3d_machine_vision/hand_eye/scara_stationary_cam_setup_01_calib_approx_01')</l>
<l>dev_clear_window ()</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>Message := 'This example program shows how to perform an approximate hand-eye calibration for a SCARA robot without a calibration plate. In a first step, the input data - the row and column coordinates and the respective robot poses for the calibration points - are shown. Then, the approximate calibration is carried out. The example does not display any results. Instead, the results are written to file and can be used with the HDevelop example program pick_and_place_scara_stationary_cam.hdev'</l>
<l>MessageWrapped := regexp_replace(Message + ' ',['(.{0,50})\\s','replace_all'],'$1\n')</l>
<l>disp_message (WindowHandle, MessageWrapped, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Provide the camera parameters of the previously calibrated camera</c>
<l>gen_cam_par_area_scan_division (0.0165251, -642.277, 4.65521e-006, 4.65e-006, 595.817, 521.75, 1280, 1024, CameraParam)</l>
<c>* </c>
<c>* Provide row/column-coordinates and respective robot poses of the</c>
<c>* calibration points. In real applications, these values must be</c>
<c>* determined as explained above.</c>
<l>CalibrationPointsRow := [139.5,111.5,485.5,809.5,915.5]</l>
<l>CalibrationPointsColumn := [252.0,1069.5,629.5,217.0,1042.0]</l>
<l>CalibrationPointsRobotPose := {[0.309454,0.147978,0.122474,0.0,0.0,379.475,0],[0.204182,0.150825,0.123036,0.0,0.0,405.695,0],[0.257784,0.191762,0.123514,0.0,0.0,394.668,0],[0.315887,0.231502,0.124396,0.0,0.0,379.325,0],[0.206101,0.238083,0.124235,0.0,0.0,408.274,0]}</l>
<l>NumCalibrationPoints := |CalibrationPointsRow|</l>
<c>* </c>
<c>* Visualize the input data</c>
<l>read_image (Image, '3d_machine_vision/hand_eye/scara_stationary_cam_setup_01_calib_approx_01')</l>
<l>dev_set_line_width (2)</l>
<l>for Index := 0 to NumCalibrationPoints - 1 by 1</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (Image)</l>
<l>    dev_set_color ('yellow')</l>
<l>    gen_cross_contour_xld (Cross, CalibrationPointsRow[Index], CalibrationPointsColumn[Index], 25, 0.785398)</l>
<l>    dev_display (Cross)</l>
<l>    disp_message (WindowHandle, 'Calibration point ' + (Index + 1), 'window', 12, 12, 'black', 'true')</l>
<l>    Message := 'Image coordinates'</l>
<l>    Message[1] := '  Row    = ' + CalibrationPointsRow[Index]</l>
<l>    Message[2] := '  Column = ' + CalibrationPointsColumn[Index]</l>
<l>    Message[3] := 'Robot pose:'</l>
<l>    Message[4] := '  Tx    = ' + CalibrationPointsRobotPose.at(Index)[0]$'.3f'</l>
<l>    Message[5] := '  Ty    = ' + CalibrationPointsRobotPose.at(Index)[1]$'.3f'</l>
<l>    Message[6] := '  Tz    = ' + CalibrationPointsRobotPose.at(Index)[2]$'.3f'</l>
<l>    Message[7] := '  Alpha = ' + CalibrationPointsRobotPose.at(Index)[3]$'.1f'</l>
<l>    Message[8] := '  Beta  = ' + CalibrationPointsRobotPose.at(Index)[4]$'.1f'</l>
<l>    Message[9] := '  Gamma =  ' + CalibrationPointsRobotPose.at(Index)[5]$'.1f'</l>
<l>    disp_message (WindowHandle, Message, 'image', min([CalibrationPointsRow[Index],500]), min([CalibrationPointsColumn[Index],900]), 'white', 'false')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<l>dev_clear_window ()</l>
<c>* </c>
<c>* Perform approximate hand-eye calibration to determine the measurement plane:</c>
<c>* </c>
<c>* With the calibration points defined (or measured) above, we can</c>
<c>* calculate the pose of the camera in the robot base coordinate system</c>
<c>* (which in fact is the main outcome of the hand-eye calibration)</c>
<c>* very easily. We just need the coordinates of the calibration points</c>
<c>* in the base coordinate system (up to an unknown translation in z)</c>
<c>* and the respective image coordinates to determine the pose with</c>
<c>* the operator vector_to_pose.</c>
<c>* </c>
<c>* To be able to determine the position of objects to be grasped by</c>
<c>* the robot, we must also determine the pose of the measurement plane.</c>
<c>* For this, the calibration points defined (or measured) above are used</c>
<c>* similarly to the calibration marks of a HALCON calibration plate.</c>
<c>* In a first step, we must determine the X, Y, and Z coordinates</c>
<c>* of the calibration points. This information can be derived from the</c>
<c>* robot poses. We define the coordinate system in which the object</c>
<c>* coordinates of the calibration points are given such that its origin</c>
<c>* lies in the first calibration point. Then, the coordinates of the</c>
<c>* remaining points can be determined by the translational part of the</c>
<c>* respective relative robot poses. This simulated calibration plate</c>
<c>* is then used to determine the measurement plane, again with the</c>
<c>* operator vector_to_pose.</c>
<l>calibrate_hand_eye_scara_stationary_cam_approx (CameraParam, CalibrationPointsRow, CalibrationPointsColumn, CalibrationPointsRobotPose, CamInBasePose, CPInCamPose)</l>
<c>* If the calibration points did not lie in the plane in which the</c>
<c>* the grasping points lie, e.g., because the calibration points were</c>
<c>* just marked on a sheet of paper (-&gt; CalibrationObjectThickness := 0.000)</c>
<c>* and the objects to be grasped are 1 mm thick (-&gt; ObjectThickness := 0.001),</c>
<c>* the pose of the calibrated plane must be corrected to describe the</c>
<c>* measurement plane. If, instead, the grasping points were used as calibration</c>
<c>* points, CalibrationObjectThickness must be set to the value of ObjectThickness.</c>
<l>CalibrationObjectThickness := 0.001</l>
<l>ObjectThickness := 0.001</l>
<l>set_origin_pose (CPInCamPose, 0, 0, CalibrationObjectThickness - ObjectThickness, MPInCamPose)</l>
<c>* </c>
<c>* Write the results</c>
<c>* - Results of hand-eye calibration</c>
<l>write_pose (CamInBasePose, 'cam_in_base_pose.dat')</l>
<c>* - Data required for pose estimation of the objects to be grasped</c>
<c>*   from the original image</c>
<l>write_cam_par (CameraParam, 'camera_parameters.dat')</l>
<l>write_pose (MPInCamPose, 'measurement_plane_in_cam_pose.dat')</l>
<l>disp_end_of_program_message (WindowHandle, 'black', 'true')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="calibrate_hand_eye_scara_stationary_cam_approx">
<interface>
<ic>
<par name="CameraParam" base_type="ctrl" dimension="0"/>
<par name="CalibrationPointsRow" base_type="ctrl" dimension="0"/>
<par name="CalibrationPointsColumn" base_type="ctrl" dimension="0"/>
<par name="CalibrationPointsRobotPose" base_type="ctrl" dimension="1"/>
</ic>
<oc>
<par name="CamInBasePose" base_type="ctrl" dimension="0"/>
<par name="CPInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ToolInBasePose := CalibrationPointsRobotPose.at(0)</l>
<l>pose_invert (ToolInBasePose, BaseInToolPose)</l>
<l>CalibrationPointsXBase := []</l>
<l>CalibrationPointsYBase := []</l>
<l>CalibrationPointsZBase := []</l>
<l>NumCalibrationPoints := |CalibrationPointsRow|</l>
<l>for I := 0 to NumCalibrationPoints - 1 by 1</l>
<c>    * Get the robot pose for the current calibration point</c>
<l>    ToolInBasePoseI := CalibrationPointsRobotPose.at(I)</l>
<c>    * </c>
<c>    * Determine coordinates of calibration points in base coordinate system.</c>
<c>    * Note that this presumes that the tool-center-point lies at a (unknown)</c>
<c>    * position (0, 0, Z) in the tool coordinate system, i.e., the gripper or</c>
<c>    * vacuum cup is centered with respect to the z axis of the tool</c>
<c>    * coordinate system. Note also that - based on this assumption - we do</c>
<c>    * not determine the (unknow) distance z of the tool-center-point from</c>
<c>    * the origin of the tool coordinate system (the mounting point of the tool).</c>
<l>    CalibrationPointsXBase[I] := ToolInBasePoseI[0]</l>
<l>    CalibrationPointsYBase[I] := ToolInBasePoseI[1]</l>
<l>    CalibrationPointsZBase[I] := ToolInBasePoseI[2]</l>
<c>    * </c>
<c>    * Determine coordinates of calibration points in object coordinate system</c>
<c>    * (relative to first calibration point)</c>
<l>    pose_compose (BaseInToolPose, ToolInBasePoseI, ToolIInTool0Pose)</l>
<c>    * Note that the z axis of the base coordinate system points upwards</c>
<c>    * while the z axis of the coordinate system in which the calibration points</c>
<c>    * are given points downwards (similar to the coordinate system of a HALCON</c>
<c>    * calibration plate). Therefore, rotate the resulting pose by</c>
<c>    * 180 degrees around the x (or y) axis.</c>
<l>    pose_to_hom_mat3d (ToolIInTool0Pose, HomMat3D)</l>
<l>    hom_mat3d_rotate (HomMat3D, rad(180), 'x', 0, 0, 0, HomMat3DRotate)</l>
<l>    hom_mat3d_to_pose (HomMat3DRotate, ToolIInTool0PoseRot)</l>
<c>    * The translational part of the rotated relative pose between</c>
<c>    * the calibration points represents the object coordinates</c>
<c>    * of the calibration points</c>
<l>    CalibrationPointsXObj[I] := ToolIInTool0PoseRot[0]</l>
<l>    CalibrationPointsYObj[I] := ToolIInTool0PoseRot[1]</l>
<l>    CalibrationPointsZObj[I] := ToolIInTool0PoseRot[2]</l>
<l>endfor</l>
<c>* </c>
<c>* Determine the pose of the camera in the base coordinate system</c>
<l>vector_to_pose (CalibrationPointsXBase, CalibrationPointsYBase, CalibrationPointsZBase, CalibrationPointsRow, CalibrationPointsColumn, CameraParam, 'iterative', 'error', BaseInCamPose, Quality)</l>
<l>pose_invert (BaseInCamPose, CamInBasePose)</l>
<c>* </c>
<c>* Determine the pose of the measurement plane and a rectification map</c>
<c>* to rectify the image in order to make it possible to find the objects</c>
<c>* even if the camera looks tilted onto the measurement plane</c>
<c>* </c>
<c>* Determine the pose of the measurement plane in the camera coordinates system</c>
<l>vector_to_pose (CalibrationPointsXObj, CalibrationPointsYObj, CalibrationPointsZObj, CalibrationPointsRow, CalibrationPointsColumn, CameraParam, 'iterative', 'error', CPInCamPose, Quality)</l>
<l>return ()</l>
</body>
<docu id="calibrate_hand_eye_scara_stationary_cam_approx">
<abstract lang="en_US">calibrate_hand_eye_scara_stationary_cam_approx calculates the pose of the camera in the robot base coordinate system (CamInBasePose) and the pose of the plane that is defined by the calibration points (CPInCamPose) from the coordinates of at least five calibration points given in the base coordinate system (up to an unknown translation in z) and from the respective image coordinates.</abstract>
<chapters lang="en_US">
<item>Calibration</item>
<item>Hand-Eye</item>
</chapters>
<short lang="en_US">Perform an approximate hand-eye calibration sor SCARA robots and determine the measurement plane.</short>
<parameters>
<parameter id="CPInCamPose">
<default_type>real</default_type>
<description lang="en_US">Pose of the  plane defined by the calibration points in the camera coordinate system.</description>
<mixed_type>optional</mixed_type>
<multivalue>true</multivalue>
<sem_type>pose</sem_type>
<type_list>
<item>integer</item>
<item>real</item>
</type_list>
</parameter>
<parameter id="CalibrationPointsColumn">
<default_type>real</default_type>
<description lang="en_US">Column coordinates of the calibration points.</description>
<mixed_type>optional</mixed_type>
<multivalue>true</multivalue>
<sem_type>point.x</sem_type>
<type_list>
<item>integer</item>
<item>real</item>
</type_list>
</parameter>
<parameter id="CalibrationPointsRobotPose">
<default_type>real</default_type>
<description lang="en_US">Robot poses when the tool is positioned at the calibration points.</description>
<mixed_type>optional</mixed_type>
<multivalue>true</multivalue>
<sem_type>pose</sem_type>
<type_list>
<item>integer</item>
<item>real</item>
</type_list>
</parameter>
<parameter id="CalibrationPointsRow">
<default_type>real</default_type>
<description lang="en_US">Row coordinates of the calibration points.</description>
<mixed_type>optional</mixed_type>
<multivalue>true</multivalue>
<sem_type>point.y</sem_type>
<type_list>
<item>integer</item>
<item>real</item>
</type_list>
</parameter>
<parameter id="CamInBasePose">
<default_type>real</default_type>
<description lang="en_US">Pose of the camera in the robot base coordinate system.</description>
<mixed_type>optional</mixed_type>
<multivalue>true</multivalue>
<sem_type>pose</sem_type>
<type_list>
<item>integer</item>
<item>real</item>
</type_list>
</parameter>
<parameter id="CameraParam">
<default_type>real</default_type>
<description lang="en_US">Camera parameters.</description>
<mixed_type>optional</mixed_type>
<multivalue>true</multivalue>
<sem_type>number</sem_type>
<type_list>
<item>integer</item>
<item>real</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
</hdevelop>
