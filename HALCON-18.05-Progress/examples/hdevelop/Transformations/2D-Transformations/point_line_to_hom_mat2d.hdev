<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c>* This example program shows how to align images based on point-to-line</c>
<c>* correspondences. HALCON's metrology model and point_line_to_hom_mat2d are used</c>
<c>* to detect the position and angle of the print in the images. The found position</c>
<c>* and angle are used to transform the images to the reference position (the</c>
<c>* position of the print in the first image in this example).</c>
<c>* From the aligned images of correct prints, a variation model is constructed.</c>
<c>* This variation model is then used to check and classify images of correct and</c>
<c>* incorrect prints.</c>
<l>dev_update_off ()</l>
<l>read_image (Image, 'pen/pen-01')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, Width + 12, Width, Height, 'black', WindowHandle)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandleAlign)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>set_display_font (WindowHandleAlign, 14, 'mono', 'true', 'false')</l>
<l>dev_set_color ('red')</l>
<l>dev_display (Image)</l>
<c>* Note: the checking of the print will be restricted to the region of the clip.</c>
<c>* Sometimes the print is also in an incorrect position of the clip.  This will lead</c>
<c>* to erroneous regions at the top or bottom border of the clip and hence can</c>
<c>* be detected easily.</c>
<l>threshold (Image, Region, 100, 255)</l>
<l>fill_up (Region, RegionFillUp)</l>
<l>erosion_rectangle1 (RegionFillUp, RegionROI, 1, 15)</l>
<c>* Set up the metrology model with four lines.  Four lines are used since this is</c>
<c>* the minimum number of point-to-line correspondences that results in a unique rigid</c>
<c>* transformation.</c>
<l>create_metrology_model (MetrologyHandle)</l>
<l>set_metrology_model_image_size (MetrologyHandle, Width, Height)</l>
<l>add_metrology_object_line_measure (MetrologyHandle, [208,137,213,90], [49,327,139,307], [100,201,214,89], [82,318,56,375], 40, 5, 1, 30, ['measure_transition','min_score'], ['negative',0.5], Index)</l>
<c>* Apply the metrology model to the reference image and read out the results.</c>
<l>apply_metrology_model (Image, MetrologyHandle)</l>
<l>get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'row_begin', RowBegin)</l>
<l>get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'column_begin', ColBegin)</l>
<l>get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'row_end', RowEnd)</l>
<l>get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'column_end', ColEnd)</l>
<c>* The reference points of the model are the center points of the detected line</c>
<c>* segments.  They will be used to compute the transformation from the current image</c>
<c>* to the reference image using point_line_to_hom_mat2d below.</c>
<l>RowRef := 0.5 * (RowBegin + RowEnd)</l>
<l>ColRef := 0.5 * (ColBegin + ColEnd)</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display (Image)</l>
<l>dev_set_window (WindowHandleAlign)</l>
<l>dev_display (Image)</l>
<l>get_metrology_object_measures (MeasureContours, MetrologyHandle, 'all', 'all', Row, Column)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (MeasureContours)</l>
<l>dev_set_color ('green')</l>
<l>disp_message (WindowHandleAlign, ['Measure objects of the four','metrology line objects'], 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>dev_set_window (WindowHandleAlign)</l>
<l>dev_display (Image)</l>
<l>get_metrology_object_result_contour (MeasuredLines, MetrologyHandle, 'all', 'all', 1.5)</l>
<l>gen_cross_contour_xld (RefPoints, RowRef, ColRef, 16, rad(45))</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (MeasuredLines)</l>
<l>dev_set_color ('blue')</l>
<l>dev_display (RefPoints)</l>
<l>dev_set_line_width (1)</l>
<l>disp_message (WindowHandleAlign, ['Lines measured in the reference image','and reference points on the lines'], 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Create the variation model.</c>
<l>create_variation_model (Width, Height, 'byte', 'standard', VariationModelID)</l>
<l>for I := 1 to 15 by 1</l>
<l>    read_image (Image, 'pen/pen-' + I$'02d')</l>
<c>    * Apply the metrology model to the current image and read out the line segment</c>
<c>    * coordinates.</c>
<l>    apply_metrology_model (Image, MetrologyHandle)</l>
<l>    get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'row_begin', RowBegin)</l>
<l>    get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'column_begin', ColBegin)</l>
<l>    get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'row_end', RowEnd)</l>
<l>    get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'column_end', ColEnd)</l>
<c>    * Determine a rigid transformation based on the point-to-line correspondences</c>
<c>    * from the reference points to the extracted lines.  Note that this determines</c>
<c>    * a transformation from the reference points to the lines in the current image.</c>
<c>    * Therefore, we must invert this transformation to obtain the transformation</c>
<c>    * from the current image to the rerefence image.</c>
<l>    point_line_to_hom_mat2d ('rigid', RowRef + 0.5, ColRef + 0.5, RowBegin + 0.5, ColBegin + 0.5, RowEnd + 0.5, ColEnd + 0.5, HomMat2D)</l>
<l>    hom_mat2d_invert (HomMat2D, HomMat2DInvert)</l>
<l>    affine_trans_image (Image, ImageTrans, HomMat2DInvert, 'constant', 'false')</l>
<c>    * Train the variation model with the transformed, i.e., aligned image.</c>
<l>    train_variation_model (ImageTrans, VariationModelID)</l>
<l>    dev_set_window (WindowHandleAlign)</l>
<l>    dev_display (Image)</l>
<l>    get_metrology_object_result_contour (MeasuredLines, MetrologyHandle, 'all', 'all', 1.5)</l>
<l>    dev_set_line_width (2)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (MeasuredLines)</l>
<l>    dev_set_color ('blue')</l>
<l>    dev_display (RefPoints)</l>
<l>    dev_set_line_width (1)</l>
<l>    disp_message (WindowHandleAlign, ['Lines measured in the current','image and reference points'], 'window', 12, 12, 'black', 'true')</l>
<l>    dev_set_window (WindowHandle)</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (ImageTrans)</l>
<l>    affine_trans_contour_xld (MeasuredLines, MeasuredLinesTrans, HomMat2DInvert)</l>
<l>    dev_set_line_width (2)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (MeasuredLinesTrans)</l>
<l>    dev_set_color ('blue')</l>
<l>    dev_display (RefPoints)</l>
<l>    dev_set_line_width (1)</l>
<l>    disp_message (WindowHandle, ['Measured lines transformed to the','reference image pose and reference points'], 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<l>get_variation_model (MeanImage, VarImage, VariationModelID)</l>
<l>prepare_variation_model (VariationModelID, 20, 3)</l>
<l>dev_set_window (WindowHandleAlign)</l>
<l>dev_display (MeanImage)</l>
<l>disp_message (WindowHandleAlign, 'Reference image', 'window', 12, 12, 'black', 'true')</l>
<l>dev_set_window (WindowHandle)</l>
<l>dev_display (VarImage)</l>
<l>disp_message (WindowHandle, 'Variation image', 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Check and classify images of correct and incorrect prints.</c>
<l>NumImages := 30</l>
<l>for I := 1 to 30 by 1</l>
<l>    read_image (Image, 'pen/pen-' + I$'02d')</l>
<l>    apply_metrology_model (Image, MetrologyHandle)</l>
<l>    get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'row_begin', RowBegin)</l>
<l>    get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'column_begin', ColBegin)</l>
<l>    get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'row_end', RowEnd)</l>
<l>    get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'column_end', ColEnd)</l>
<l>    point_line_to_hom_mat2d ('rigid', RowRef + 0.5, ColRef + 0.5, RowBegin + 0.5, ColBegin + 0.5, RowEnd + 0.5, ColEnd + 0.5, HomMat2D)</l>
<l>    hom_mat2d_invert (HomMat2D, HomMat2DInvert)</l>
<l>    affine_trans_image (Image, ImageTrans, HomMat2DInvert, 'constant', 'false')</l>
<l>    reduce_domain (ImageTrans, RegionROI, ImageReduced)</l>
<l>    compare_variation_model (ImageReduced, RegionDiff, VariationModelID)</l>
<l>    connection (RegionDiff, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, RegionsError, 'area', 'and', 20, 1000000)</l>
<l>    count_obj (RegionsError, NumError)</l>
<l>    dev_set_window (WindowHandle)</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (ImageTrans)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_set_draw ('margin')</l>
<l>    dev_display (RegionsError)</l>
<l>    disp_message (WindowHandle, 'Aligned image', 'window', 12, 12, 'black', 'true')</l>
<l>    if (NumError == 0)</l>
<l>        disp_message (WindowHandle, 'Print OK', 'window', 12, 300, 'green', 'false')</l>
<l>    else</l>
<l>        disp_message (WindowHandle, 'Print not OK', 'window', 12, 300, 'red', 'false')</l>
<l>    endif</l>
<l>    dev_set_window (WindowHandleAlign)</l>
<l>    dev_display (Image)</l>
<l>    get_metrology_object_result_contour (MeasuredLines, MetrologyHandle, 'all', 'all', 1.5)</l>
<l>    dev_set_line_width (2)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (MeasuredLines)</l>
<l>    dev_set_color ('blue')</l>
<l>    dev_display (RefPoints)</l>
<l>    dev_set_line_width (1)</l>
<l>    disp_message (WindowHandleAlign, ['Lines measured in the current','image and reference points'], 'window', 12, 12, 'black', 'true')</l>
<l>    if (I &lt; NumImages)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
